using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using GalaSoft.MvvmLight;
using GalaSoft.MvvmLight.Command;
using MatchingDash.Model;
using MatchingDash.Helpers;
using GalaSoft.MvvmLight.Messaging;
using System.Collections.ObjectModel;
using System.Windows;
using MatchingDash.Shared;
using MatchingDash.Views;
using MahApps.Metro.Controls;
using CH.Combinatorics;
using System.Threading;
using System.Windows.Forms;
using FileHelpers;
using MahApps.Metro.Controls.Dialogs;
using Application = System.Windows.Application;
using MessageBox = System.Windows.MessageBox;

//using Microsoft.Win32;

namespace MatchingDash.ViewModel
{
    public class ResultViewModel:ViewModelBase
    {
        private IDataService _dataService;
        private IDialogService _dialogService;
        private INavigationDataService _navigationService;
        private List<Student> _students = null;         
        private List<string> assigned;
        private static Semaphore _pool;
      //  private readonly IDialogCoordinator _dialogCoordinator;
        TableResult removal;
        private System.Windows.Forms.SaveFileDialog _fileSaving;
      /*  private int GlobalCount = 0;
        bool check = false;
        int checkerid=1,studentcount=0;
        bool matchstart = false, matchend = false;
        bool Open = false;
        private string tempTransport,tempTeacher,tempDay,tempstu;
        bool Monday = false, Tuesday = false, Wednesday = false, Thursday = false, Friday = false;
       * */
        public string BarValue = string.Empty;
       
        public bool Done = false;
        private static Random rng = new Random();
        private static Random rngsched=new Random();
        private static Random rngteach = new Random();
      //  public List<TableResult> _result_report = new List<TableResult>();
        string[] separators = { "-"};
        private string[] preference = {","};
       // string SciencePattern
        public List<Student> Students
        {
            get { return _students; }
            set { _students = value; }
        }
        private List<StudentStep2> _studentstep2 = null;
        public List<StudentStep2> Studentstep2
        {
            get { return _studentstep2; }
            set { _studentstep2 = value; }
        }
        private List<StudentStep1> _studentstep1 = null;
        public List<StudentStep1> Studentstep1
        {
            get { return _studentstep1; }
            set { _studentstep1 = value; }
        }
        private List<StudentCI> _studentci = null;
        public List<StudentCI> Studentci
        {
            get { return _studentci; }
            set { _studentci = value; }
        }
        private List<Teacher> _teachers = null;
        public List<Teacher> Teachers
        {
            get { return _teachers; }
            set { _teachers = value; }
        }
        private List<TeacherStep2> _teacherstep2 = null;
        public List<TeacherStep2> Teacherstep2
        {
            get { return _teacherstep2; }
            set { _teacherstep2 = value; }
        }
        private List<TeacherStep1> _teacherstep1 = null;
        public List<TeacherStep1> Teacherstep1
        {
            get { return _teacherstep1; }
            set { _teacherstep1 = value; }
        }
        private List<TeacherCI> _teacherci = null;
        public List<TeacherCI> Teacherci
        {
            get { return _teacherci; }
            set { _teacherci = value; }
        }
        private List<TableResult> _results = null;
        public List<TableResult> Results
        {
            get { return _results; }
            set { _results = value; RaisePropertyChanged("Results"); }
        }
     
        private List<TableResult> _noConditionResult = null;
        //private List<TableResult> Temporary2,temp3;
        //private List<StudentStep2> Temporary;
        //private List<StudentStep1> Temporary1;
        //private List<StudentCI> Temporary3;
        private List<List<IEnumerable<StudentStep2>>> permuterstep2;
        
        private List<List<TableResult>> Resultpermut;
        public List<TableResult> NoConditionResult
        {
            get { return _noConditionResult; }
            set { _noConditionResult = value; RaisePropertyChanged("NoConditionResult"); }
        }
       private StudentStep2 _step2Student=null;
        public StudentStep2 Step2Student
        {
            get { return _step2Student; }
            set { _step2Student = value; RaisePropertyChanged("Step2Student"); }
        }
        private TeacherStep2 _step2Teacher = null;
        public TeacherStep2 Step2Teacher
        {
            get { return _step2Teacher; }
            set { _step2Teacher = value; RaisePropertyChanged("Step2Teacher"); }
        }
        private string _transportation = null;
        public string Transportation 
        {
            get { return _transportation; }
            set { _transportation = value; RaisePropertyChanged("Transportation"); }
        }
        private string _section = null;
        public string section
        {
            get { return _section; }
            set { _section = value; RaisePropertyChanged("section"); }
        }
        private string _canSave;
        public string CanSave
        {
            get { return _canSave; }
            set { _canSave = value; RaisePropertyChanged("CanSave"); }
        }
        private bool _canShow;
        public bool CanShow
        {
            get { return _canShow; }
            set { _canShow = value; RaisePropertyChanged("CanShow"); }
        }
        public RelayCommand ExecuteSave { get; set; }
        private RelayCommand _refreshResult=null; 
        public RelayCommand RefreshResult
        {
            get { return _refreshResult; }
            set { _refreshResult = value; RaisePropertyChanged("RefreshResult"); }
        }
        public bool IsEnabledSchedule { get; set; }
        public RelayCommand ExecuteReset { get; set; }
        public RelayCommand<TableResult> ExecuteDetails { get; set; }
        public RelayCommand ExecuteView { get; set; }
          public ResultViewModel(IDataService dataService,IDialogService dialogService,INavigationDataService navigationService)
        {
            Results = new List<TableResult>();
        //    Resultpermut = new List<List<TableResult>>();
            //Temporary = new List<StudentStep2>();
            //Temporary1 = new List<StudentStep1>();
            //Temporary3 = new List<StudentCI>();
            //Temporary2 = new List<TableResult>();
            removal = new TableResult();
              _pool=new Semaphore(0,1);
            NoConditionResult = new List<TableResult>();
            _dialogService = dialogService;
            _navigationService = navigationService;
            _dataService = dataService;
            Messenger.Default.Register<NotificationMessage<DialogService>>(this, HandleMenuOption);
            CanShow = true;
            ExecuteSave = new RelayCommand(Save);
            ExecuteDetails = new RelayCommand<TableResult>(getDetails);
            ExecuteView = new RelayCommand(LoadRecord);
           // _dialogCoordinator = new DialogCoordinator();
          }

          private void LoadRecord()
          {
              ResultView menu = Application.Current.Windows.OfType<ResultView>().SingleOrDefault(x => x.IsActive);
              var flyout = menu.Flyouts.Items[0] as Flyout;
             // getTeacherCollection();
              //  menu.Record.ItemsSource = Students;
              //  }
              if (flyout == null)
              {
                  return;
              }
              flyout.IsOpen = !flyout.IsOpen;
          }
          private void Save()
          {
       //       ReportView menu = new ReportView();
         //     _navigationService.OpenWinUI(menu);
              MessageBox.Show("Choose the folder and name of excel CSV file where you want to save the results of Matching", "INFO",MessageBoxButton.OK);
              _fileSaving = new SaveFileDialog();
              _fileSaving.FileName = "Document";
              _fileSaving.DefaultExt = ".csv";
              _fileSaving.Filter = "CSV Files (*.csv)|*.csv";
              if (_fileSaving.ShowDialog() == DialogResult.OK )
              {
                  //SelectedPath = _fileSaving.FileName;
                  var engine = new FileHelperAsyncEngine<InterpreterCSV.TableResult>();
                  using (engine.BeginWriteFile(_fileSaving.FileName))
                  {
                      engine.WriteNext(new InterpreterCSV.TableResult()
                      {
                          TeacherName = "Teacher Name",
                          StudentName = "Student Name",
                          Major = "Major",
                          Hour = "Hour",
                          Days="Days",
                          School="School",
                          Room="Room",
                          Transportation="Transportation",                        
                          Section="Section"                  
                      });

                      int count = 0;
                      string previousteacher = string.Empty;
                      foreach (var record in Results)
                      {

                          if (count >= 2 && record.TeacherName!=previousteacher)
                          {
                              count = 0;
                              engine.WriteNext(new InterpreterCSV.TableResult()
                              {
                                  TeacherName = "",
                                  StudentName = "",
                                  Major = "",
                                  Hour = "",
                                  Days = "",
                                  School = "",
                                  Room = "",
                                  Transportation = "",
                                  Section = ""
                              });
                          }
                              engine.WriteNext(new InterpreterCSV.TableResult()
                              {
                                  TeacherName = record.TeacherName,
                                  StudentName = record.StudentName,
                                  Major = record.Major,
                                  Hour = record.Hour,
                                  Days = record.Days,
                                  School = record.School,
                                  Room = record.Room,
                                  Transportation = record.Transportation,
                                  Section = record.section
                              });
                              previousteacher = record.TeacherName;
                          count++;
                         
                      }
                  }
                  MessageBox.Show("Your new excel file is created", "SUCCESS",MessageBoxButton.OK);  
              }                            
          }
  
          private void HandleMenuOption(NotificationMessage<DialogService> message)
          {
              //throw new NotImplementedException();
              DialogService _DialogService= message.Content;
              _dialogService.Setvalues(_DialogService.Text, _DialogService.Timestamp);
              string MessageType = message.Notification;
              Done = false;
            //  ResultView menu= Application.Current.Windows.OfType<ResultView>().SingleOrDefault(x=>x.IsInitialized);      
              
              if (MessageType == "ResultOption")
              {
                  if (_DialogService.Text == "CI")
                  {
                      BarValue = "CI";
                      getStudentCICollection();
                      getTeacherCICollection();
                         Task job = Task.Factory.StartNew(() =>
                          {
                              Thread.Sleep(3000);
                      getMatchListCICI();
                      Done = true;
                          });
                  }
                  if (_DialogService.Text == "TeachStep2")
                  {
                      BarValue = "TeachStep2";
                      getStudentStep2Collection();
                      getTeacherStep2Collection();
             /*         getPermut_studentStep2();
                     // List<Task> tasks = new List<Task>[permuterstep2.Count()];
                      List < Task >tasks= new List<Task>();
                      
                      List<TableResult> Result = new List<TableResult>();
                    //  int i = 0;
                      foreach (List<IEnumerable<StudentStep2>> student in permuterstep2.ToList())
                      {                 
                          Task job = Task.Factory.StartNew(() =>
                          {
                             // Task[] taskChilds = new Task[student.Count()];
                              List<Task> taskChilds = new List<Task>();                                                        
                              object thisLock = new object();
                           
                              foreach(IEnumerable<StudentStep2>collection in student){                             
                                 Task jobChilds = Task.Factory.StartNew(() =>
                            {

                                foreach (TableResult item in getMatchListStep3(collection.ToList()))
                                {
                                    lock(thisLock)
                                    Result.Add(item);
                                }                                                          

                            });
                                 taskChilds.Add(jobChilds);
                                 // Thread.Sleep(70);
                                 // j++;  
                              }
                              Task.WaitAll(taskChilds.ToArray());
                             
                              
                             // permuterstep2[j] = (Permutation.Permute<StudentStep2>(list2[j])).ToList();
                          });
                          tasks.Add(job);
                        //  Thread.Sleep(9000);
                      }
                      
                      Task.WaitAll(tasks.ToArray());
                      Results = Result.Distinct<TableResult>(new Compare()).ToList();
                      Result = Results.ToList();
                   //   Results = Result.ToList();
                      getMatchList(Result, Results);
                      //Results=from o in Results select o where
                    //  Results=Result.FindAll()
                //      getMatchListStep2();
              * */
                         Task job = Task.Factory.StartNew(() =>
                          {
                              Thread.Sleep(3000);
                      getMatchListStep222();
                      Done = true;
                          });
                  }
                  if (_DialogService.Text == "TeachStep1")
                  {
                      BarValue = "TeachStep1";
                      getStudentStep1Collection();
                      getTeacherStep1Collection();              
                  //    RunProgressFromVm();
                     Task job = Task.Factory.StartNew(() =>
                          {
                              Thread.Sleep(3000);
                              getMatchListStep111();
                              Done = true;
                          });
            //         menu.Loaded += (o,e)=>{
           //              _DialogService.ResultBarProgress(menu, this);
                         
              //       };

                  //   menu.Loaded += menu_Loaded;
                   //  _DialogService.ResultBarProgress(menu, this);
                        
                  
                     //  _DialogService.controller.CloseAsync();
               //       _DialogService.ResultBarTerminated(menu, "Step1 results");
                  }
                 
              }
          }


         
        private void getStudentCollection()
        {
            Students = _dataService.RefreshStudent().Result.ToList();
        }
        private void getStudentStep2Collection()
        {
            Studentstep2 = _dataService.RefreshStudentStep2().Result.ToList();
    //        Studentstep2 = Studentstep2.OrderBy(p => p.Transportation == "Yes").ToList();
        }
        private void getStudentCICollection()
        {
            Studentci = _dataService.RefreshStudentCI().Result.ToList();
        }
        private void getStudentStep1Collection()
        {
            Studentstep1 = _dataService.RefreshStudentStep1().Result.ToList();
         //   Studentstep1 = Studentstep1.OrderBy(p => p.Transportation == "Yes").ToList();
        }
        private void getTeacherCollection()
        {
            Teachers = _dataService.RefreshTeacher().Result.ToList();
        }
        private void getTeacherStep2Collection()
        {
            Teacherstep2 = _dataService.RefreshTeacherStep2().Result.ToList();
        }
        private void getTeacherCICollection()
        {
            Teacherci = _dataService.RefreshTeacherCI().Result.ToList();
        }
        private void getTeacherStep1Collection()
        {
            Teacherstep1 = _dataService.RefreshTeacherStep1().Result.ToList();
        }
      
        private void getDetails(TableResult list)
        {
            string[] separator = { " " };
            String[] namesteach = list.TeacherName.Split(separator, StringSplitOptions.None);
            String[] namestu = list.StudentName.Split(separator, StringSplitOptions.None);
           // string teacherName, studentName;
         //   Temporary2.Clear();
            List<StudentStep2> unikstu = new List<StudentStep2>();
          //  unikstu=Studentstep2.Distinct(new Compare3()).ToList();
            foreach (var item in Studentstep2)
            {
                if (item.FirstName.Equals(namestu[0]) && item.LastName.Equals(namestu[1]))
                {
                    Step2Student = item;
                    break;
                }
            }
            foreach (var item in Teacherstep2)
            {
                if (item.FirstName.Equals(namesteach[0]) && item.LastName.Equals(namesteach[1]))
                {
                    Step2Teacher = item;
                    break;
                }
            }
            DetailsView menu = new DetailsView();
            //Messenger.Default.Send(message);
            _navigationService.OpenUI(menu);

        }
    
        private void getMatchListStep2()
        {
            //assigned = new List<string>();

            _pool.Release();
            Task[] jobs = new Task[10];
            var tokenSource2 = new CancellationTokenSource();
            CancellationToken ct = tokenSource2.Token;
           //  for (int k = 0; k < (Studentstep2.Count + Teacherstep2.Count); k++)
            for (int k = 0; k < (10); k++)
            {
                 jobs[k] = Task.Factory.StartNew(() =>
                {
                     List<TableResult> Results2 = new List<TableResult>();
                    List<TableResult> NoConditionResult2 = new List<TableResult>();
                    List<StudentStep2> Studentstep22 = Studentstep2.ToList();
                    List<TeacherStep2> Teacherstep22 = Teacherstep2.ToList();
                    List<Avail> teachschedule =  new List<Avail>();
            bool check = false;
        int checkerid=1,studentcount=0;
        bool matchstart = false, matchend = false;
       // bool Open = false;
         string tempTransport,tempTeacher,tempDay,tempstu;
        bool Monday = false, Tuesday = false, Wednesday = false, Thursday = false, Friday = false;
   
          //   NoConditionResult.Clear();
            int timing = 0,numberOfCount=0;
            string timecheck;
            string sectioncheck;
            bool location,checkback;
            int count,teachCount,backcounter;
            bool Open = false;
            bool status = true;
            List<BackStudent> StudentMeetingBack = new List<BackStudent>();
       //    Studentstep2 = Studentstep2.OrderBy(p => p.Transportation == "Yes").ToList();
            bool timer = false;           
    //        Teacherstep2 = Teacherstep2.OrderBy(p => p.Pair == "Yes").ToList();
            while (!Open)
            {
                location = false;
                Results2.Clear();
                StudentMeetingBack.Clear();
                tempDay = string.Empty;
                tempstu = string.Empty;
                tempTeacher = string.Empty;
                tempTransport = string.Empty;
                timecheck = string.Empty;
                sectioncheck = string.Empty;             
                checkerid = 0; 
               teachCount=1;
            
                //foreach (StudentStep2 item in Studentstep2)
                //{
                //    if (item.Email == "alyssagutierrez2@my.unt.edu")
                //        remv = item;
                //}
                // Studentstep2.Remove(remv);            
   //                 Studentstep2 = Studentstep2.OrderBy(o => o.Section).ToList();
  //                  Teacherstep2 = Teacherstep2.OrderBy(o => o.Pair == "Yes").ToList();
                    // Studentstep2 = Studentstep2..ToList();
                    //List<TableResult> myfilter = new List<TableResult>();
                    // List<TableResult> nomatch = new List<TableResult>();
                   
                           //  checkerid = 1;
                    //teachCount = 1;
               #region
               /* Random order of Teachers*/           
               ShuffleTeachStep2(Teacherstep22);
               #endregion;
                    foreach (var item in Teacherstep22)
                    {
                        checkback = false;
                        backcounter = 0;
                        //        studentcount = 0;

                        if (item.Pair == "Yes")
                        {
                            count = 4;
                        }
                        else
                        {
                            count = 2;
                        }
                        #region 
                            /* Random order schedule*/
                            teachschedule = item.Schedule.ToList();
                            ShuffleSchedule2(teachschedule);
                            #endregion;
                        DateTime startstudentime, endstudentime, startteachertime, endteachertime;
                        TimeSpan differstart, differend;
                       
                        foreach (var i in teachschedule)
                        {
                            timer = false;
                            // tempDay = i.Days;
                            if (i.Subject == "Pre-AP")
                                i.Subject = "Pre-AP Science";
                            i.StartTime = DateTime.Parse(i.StartTime).ToString("hh:mm tt");
                            i.EndTime = DateTime.Parse(i.EndTime).ToString("hh:mm tt");
                          /*  if (Results.Count < (Studentstep2.Count / 4))
                                timer = true;
                            if (Results.Count > (Studentstep2.Count / 4) && Results.Count < (Studentstep2.Count / 2))
                                timer = false;
                            if (Results.Count > (Studentstep2.Count / 2) && Results.Count < (3 * Studentstep2.Count / 4))
                                timer = true;
                            if (Results.Count > (3 * Studentstep2.Count / 4))
                                timer = false;
                           * */
                          //  startteachertime = DateTime.Parse(i.StartTime);
                            startteachertime = DateTime.Parse(i.StartTime);
                            endteachertime = DateTime.Parse(i.EndTime);

                            #region Checking BACK TO BACK OF SUBJECT
                            foreach (var backsubject in item.BackDays)
                        {
                            if (i.Subject == backsubject.Subject)
                            {
                                //changed
                                checkback = true;
                                break;
                            }
                        }
                            #endregion;
                            if (timer && startteachertime > DateTime.Parse("11:59:00 AM"))
                                timer = false;
                          //  if (!timer)
                            foreach (var val in Studentstep22)
                            {                                

                                matchstart = false;
                                matchend = false;
                                Monday = false; Tuesday = false; Wednesday = false; Thursday = false; Friday = false;
                                if ((item.District == "Denton") && (val.DistrictDenton == 1 || val.DistrictDenton == 2 || val.DistrictDenton == 3) && (val.Transportation == "Yes"))
                                    location = true;
                                if ((item.District == "Lewisville") && (val.DistrictLewisville == 1 || val.DistrictLewisville == 2 || val.DistrictLewisville == 3) && (val.Transportation == "Yes"))
                                    location = true;
                                if ((item.District == "McKinney") && (val.DistrictMckinney == 1 || val.DistrictMckinney == 2 || val.DistrictMckinney == 3) && (val.Transportation == "Yes"))
                                    location = true;
                                if ((item.District == "Northwest") && (val.DistrictForthWorth == 1 || val.DistrictForthWorth == 2 || val.DistrictForthWorth == 3) && (val.Transportation == "Yes"))
                                    location = true;
                                if (item.District == "Denton" && val.DistrictDenton == 1)
                                    timing = 0;
                                if (item.District == "Denton" && val.DistrictDenton == 2)
                                    timing = 0;
                                if (item.District == "Denton" && val.DistrictDenton == 3)
                                    timing = 0;
                                if (item.District == "Lewisville" && val.DistrictLewisville == 1)
                                    timing = 0;
                                if (item.District == "Lewisville" && val.DistrictLewisville == 2)
                                    timing = 0;
                                if (item.District == "Lewisville" && val.DistrictLewisville == 3)
                                    timing = 0;
                                if (item.District == "Northwest" && val.DistrictForthWorth == 1)
                                    timing = 0;
                                if (item.District == "Northwest" && val.DistrictForthWorth == 2)
                                    timing = 0;
                                if (item.District == "Northwest" && val.DistrictForthWorth == 3)
                                    timing = 0;
                                if (item.District == "McKinney" && val.DistrictMckinney == 1)
                                    timing = 0;
                                if (item.District == "McKinney" && val.DistrictMckinney == 2)
                                    timing = 0;
                                if (item.District == "McKinney" && val.DistrictMckinney == 3)
                                    timing = 0;

                                foreach (var j in val.Schedule)
                                {
                                    String[] times = j.Time.Split(separators, StringSplitOptions.None);
                                    startstudentime = DateTime.Parse(times[0]);
                                    endstudentime = DateTime.Parse(times[1]);
                                    differstart = startteachertime.Subtract(startstudentime);
                                    differend = endteachertime.Subtract(endstudentime);
                                    if ((i.Days == "Monday" || i.Days == "A Monday" || i.Days == "B Monday") && j.Monday == true)
                                    {

                                        if (differstart.TotalMinutes >= timing)
                                            matchstart = true;
                                        if (differend.TotalMinutes <= -timing)
                                            matchend = true;
                                        if (matchstart && matchend)
                                            Monday = true;
                                    }else if ((i.Days == "Monday" || i.Days == "A Monday" || i.Days == "B Monday") &&
                                           j.Monday != true)
                                        {
                                            matchstart = false;
                                            matchend = false;
                                            //if (differstart.TotalMinutes >= timing)
                                            //    matchstart = true;
                                            //if (differend.TotalMinutes <= -timing)
                                            //    matchend = true;
                                            //if (matchstart && matchend)
                                            //    Monday = true;
                                        }
                                    if ((i.Days == "Tuesday" || i.Days == "A Tuesday" || i.Days == "B Tuesday") && j.Tuesday == true)
                                    {
                                        if (differstart.TotalMinutes >= timing)
                                            matchstart = true;
                                        if (differend.TotalMinutes <= -timing)
                                            matchend = true;
                                        if (matchstart && matchend)
                                            Tuesday = true;
                                    }else if ((i.Days == "Tuesday" || i.Days == "A Tuesday" || i.Days == "B Tuesday") &&
                                            j.Tuesday != true)
                                        {
                                            matchstart = false;
                                            matchend = false;
                                            //if (differstart.TotalMinutes >= timing)
                                            //    matchstart = true;
                                            //if (differend.TotalMinutes <= -timing)
                                            //    matchend = true;
                                            //if (matchstart && matchend)
                                            //    Monday = true;
                                        }
                                    if ((i.Days == "Wednesday" || i.Days == "A Wednesday" || i.Days == "B Wednesday") && j.Wednesday == true)
                                    {
                                        if (differstart.TotalMinutes >= timing)
                                            matchstart = true;
                                        if (differend.TotalMinutes <= -timing)
                                            matchend = true;
                                        if (matchstart && matchend)
                                            Wednesday = true;
                                    } else if ((i.Days == "Wednesday" || i.Days == "A Wednesday" || i.Days == "B Wednesday") &&
                                           j.Wednesday != true)
                                        {
                                            matchstart = false;
                                            matchend = false;
                                            //if (differstart.TotalMinutes >= timing)
                                            //    matchstart = true;
                                            //if (differend.TotalMinutes <= -timing)
                                            //    matchend = true;
                                            //if (matchstart && matchend)
                                            //    Monday = true;
                                        }
                                    if ((i.Days == "Thursday" || i.Days == "A Thursday" || i.Days == "B Thursday") && j.Thursday == true)
                                    {
                                        if (differstart.TotalMinutes >= timing)
                                            matchstart = true;
                                        if (differend.TotalMinutes <= -timing)
                                            matchend = true;
                                        if (matchstart && matchend)
                                            Thursday = true;
                                    }else if ((i.Days == "Thursday" || i.Days == "A Thursday" || i.Days == "B Thursday") &&
                                          j.Thursday != true)
                                        {
                                            matchstart = false;
                                            matchend = false;
                                            //if (differstart.TotalMinutes >= timing)
                                            //    matchstart = true;
                                            //if (differend.TotalMinutes <= -timing)
                                            //    matchend = true;
                                            //if (matchstart && matchend)
                                            //    Monday = true;
                                        }
                                    if ((i.Days == "Friday" || i.Days == "A Friday" || i.Days == "B Friday") && j.Friday == true)
                                    {
                                        if (differstart.TotalMinutes >= timing)
                                            matchstart = true;
                                        if (differend.TotalMinutes <= -timing)
                                            matchend = true;
                                        if (matchstart && matchend)
                                            Friday = true;
                                    }else if ((i.Days == "Friday" || i.Days == "A Friday" || i.Days == "B Friday") &&
                                          j.Friday != true)
                                        {
                                            matchstart = false;
                                            matchend = false;
                                            //if (differstart.TotalMinutes >= timing)
                                            //    matchstart = true;
                                            //if (differend.TotalMinutes <= -timing)
                                            //    matchend = true;
                                            //if (matchstart && matchend)
                                            //    Monday = true;
                                        }
                                  /*   #region Add 4000 people who should be Step2 with 90 min block
                                    if((val.FirstName.ToLower() + val.LastName.ToLower() == "jessmith" || val.FirstName.ToLower() + val.LastName.ToLower() == "candicekelcourse")))
                                    {
                                        
                                    }
                                    #endregion;*/
                                  
                                    #region Control Back to back for section 1300 student and 4000 who should be on step2
                                    TimeSpan is90 = endteachertime.Subtract(startteachertime);
                                    int backcount = StudentMeetingBack.Select(p => p.Name == val.FirstName + " " + val.LastName).Count();
                                    if ((  val.Section =="TNTX 1300.001, Monday/Wednesday @ 11:00-12:20" || val.Section  =="TNTX 1300.002, Tuesday/Thursday @ 9:30-10:50" ||(val.FirstName.ToLower() + val.LastName.ToLower() == "jessmith" || val.FirstName.ToLower() + val.LastName.ToLower() == "candicekelcourse") )
                                        &&(teachCount<=2 && count==4))
                                    {


                                        if (is90.TotalMinutes >= 90)
                                            checkback = false;
                                     
                                    //    else checkback =true;
                                       
                                        if (backcount == 0)
                                            backcounter = 0;
                                        else if (backcount == 1)
                                            backcounter = 1;
                                        else check = true;
                                       
                                    }else if (is90.TotalMinutes < 80 && backcount==0)
                                        checkback = false;
                                    else if (is90.TotalMinutes >= 90) check = true;

                                    #endregion;
                                 /*   #region check if student back meet condition
                                    
                                    foreach (var studentID in StudentMeetingBack)
                                        if (studentID.Name == val.FirstName + " " + val.LastName && studentID.Time == i.StartTime + "-" + i.EndTime && i.Days == studentID.Day)
                                        {
                                            check = true;
                                            break;
                                        }
                                    #endregion;*/
                                   
                                    if ((Monday != false || Tuesday != false || Wednesday != false || Thursday != false || Friday != false) && (teachCount <= count))
                                        if ((check == false))
                                        {
                                            if ((i.Subject == "Math" || i.Subject == "Algebra 1" || i.Subject == "Pre-AP Math" || i.Subject == "Math Others") && (val.Major == "Mathematics") && (location == true))
                                            {
                                                if ((tempstu != val.Email && (tempDay != i.Days) && teachCount == 1 &&
                                                         (tempTeacher != item.FirstName + " " + item.LastName)) ||
                                                        (tempstu != val.Email && teachCount == 3 && tempDay != i.Days &&
                                                         (tempTeacher == item.FirstName + " " + item.LastName)) ||
                                                        (tempstu != val.Email && tempDay == i.Days &&
                                                         (tempTeacher == item.FirstName + " " + item.LastName) &&
                                                         (teachCount == 4 || teachCount == 2) &&
                                                         (val.Section == sectioncheck) && (timecheck == i.StartTime + "-" + i.EndTime)))    {
                                                    if (checkback)
                                                    {
                                                        if (backcounter ==0)
                                                        {
                                                           /* foreach (var studentID in StudentMeetingBack)
                                                                if (studentID.Name == val.FirstName + " " + val.LastName)
                                                                {
                                                                    checkerid = 1;
                                                                    backcounter = 1;
                                                                    break;
                                                                }*/
                                                            if (checkerid == 0)
                                                            {
                                                                StudentMeetingBack.Add(new BackStudent() { Name = val.FirstName + " " + val.LastName, Time = i.StartTime + "-" + i.EndTime, Day = i.Days });

                                                              /*  timecheck = i.StartTime + "-" + i.EndTime;

                                                                tempTransport = val.Transportation;
                                                                tempTeacher = item.FirstName + " " + item.LastName;
                                                                tempDay = i.Days;
                                                                tempstu = val.Email;
                                                                teachCount++;
                                                                sectioncheck = val.Section;
                                                                  studentcount++;
                                                                check = true;*/
                                                                backcounter = 1;
                                                            }
                                                            checkerid = 0;
                                                        }
                                                        if (backcounter == 1)
                                                        {
                                                           // foreach (BackStudent backing in StudentMeetingBack)
                                                             //   if (backing.Name == val.FirstName + " " + val.LastName )
                                                             //   {
                                                            /*
                                                            #region get day and hour of backing

                                                            string day = string.Empty, hour = string.Empty;
                                                            foreach (BackStudent backing in StudentMeetingBack)
                                                                if (backing.Name ==
                                                                    val.FirstName + " " + val.LastName)
                                                                {
                                                                    day = backing.Day;
                                                                    hour = backing.Time;
                                                                    break;
                                                                }
                                                            #endregion;
                                                                    foreach (var ID in Results2)
                                                                        if (ID.StudentName == val.FirstName + " " + val.LastName)
                                                                        {
                                                                            checkerid = 1;
                                                                            break;
                                                                        }
                                                            */
                                                                    if (checkerid == 0)
                                                                    {
                                                                        Results2.Add(new TableResult()
                                                                        {
                                                                            TeacherName = item.FirstName + " " + item.LastName,
                                                                            StudentName = val.FirstName + " " + val.LastName,
                                                                            Major = i.Subject,
                                                                            Hour = i.StartTime + "-" + i.EndTime,
                                                                            Days = i.Days,
                                                                            School = item.School,
                                                                            Room = item.Room,
                                                                            Transportation = val.Transportation,
                                                                            Pair = item.Pair,
                                                                            Location = location,
                                                                            section = val.Section

                                                                        });
                                                                 /*       #region remove  student back meet condition

                                                                        BackStudent remStudent=null;
                                                                        foreach (BackStudent studentID in StudentMeetingBack)
                                                                            if (studentID.Name ==
                                                                                val.FirstName + " " + val.LastName)
                                                                            {
                                                                                remStudent = studentID;
                                                                                break;
                                                                            }
                                                                        if(remStudent!=null)
                                                                        StudentMeetingBack.Remove(remStudent);
                                                                        #endregion;
                                                                        */
                                                                        timecheck = i.StartTime + "-" + i.EndTime;

                                                                        tempTransport = val.Transportation;
                                                                        tempTeacher = item.FirstName + " " + item.LastName;
                                                                        tempDay = i.Days;
                                                                        tempstu = val.Email;
                                                                        teachCount++;
                                                                        sectioncheck = val.Section;
                                                                        //  studentcount++;
                                                                        check = true;
                                                                    }

                                                                    checkerid = 0;
                                                            //    }
                                                        }
                                                        
                                                    }
                                                    else
                                                    {
                                                        foreach (var ID in Results2)
                                                            if (ID.StudentName == val.FirstName + " " + val.LastName)
                                                                checkerid = 1;
                                                        if (checkerid == 0)
                                                        {
                                                            Results2.Add(new TableResult()
                                                            {
                                                                TeacherName = item.FirstName + " " + item.LastName,
                                                                StudentName = val.FirstName + " " + val.LastName,
                                                                Major = i.Subject,
                                                                Hour = i.StartTime + "-" + i.EndTime,
                                                                Days = i.Days,
                                                                School = item.School,
                                                                Room = item.Room,
                                                                Transportation = val.Transportation,
                                                                Pair = item.Pair,
                                                                Location = location,
                                                                section = val.Section

                                                            });
/*
                                                            #region remove  student back meet condition

                                                            BackStudent remStudent = null;
                                                            foreach (BackStudent studentID in StudentMeetingBack)
                                                                if (studentID.Name ==
                                                                    val.FirstName + " " + val.LastName)
                                                                {
                                                                    remStudent = studentID;
                                                                    break;
                                                                }
                                                            if (remStudent != null)
                                                                StudentMeetingBack.Remove(remStudent);
                                                            #endregion;
                                                            */
                                                            //  else if ((tempTransport == "Yes") && (val.Transportation == "No") && (tempTeacher == item.LastName && (teachCount==2||teachCount==4)) && (tempDay == i.Days))

                                                            //  remv = val;

                                                            timecheck = i.StartTime + "-" + i.EndTime;

                                                            tempTransport = val.Transportation;
                                                            tempTeacher = item.FirstName + " " + item.LastName;
                                                            tempDay = i.Days;
                                                            tempstu = val.Email;
                                                            teachCount++;
                                                            sectioncheck = val.Section;
                                                            //  studentcount++;
                                                            check = true;
                                                        }

                                                        checkerid = 0;
                                                    }
                                                }
                                            }
                                            else
                                                if ((i.Subject == "AP Bio" || i.Subject == "Biology" || i.Subject == "Chemistry" || i.Subject == "AP Chemistry" || i.Subject == "Science" || i.Subject == "Pre-AP Science" || i.Subject == "Science Others" || i.Subject == "Others") && (val.Major == "Science") && (location == true))
                                                {
                                                    if ((tempstu != val.Email && (tempDay != i.Days) && teachCount == 1 &&
                                                         (tempTeacher != item.FirstName + " " + item.LastName)) ||
                                                        (tempstu != val.Email && teachCount == 3 && tempDay != i.Days &&
                                                         (tempTeacher == item.FirstName + " " + item.LastName)) ||
                                                        (tempstu != val.Email && tempDay == i.Days &&
                                                         (tempTeacher == item.FirstName + " " + item.LastName) &&
                                                         (teachCount == 4 || teachCount == 2) &&
                                                         (val.Section == sectioncheck) && (timecheck == i.StartTime + "-" + i.EndTime)))  {
                                                        if (checkback)
                                                        {
                                                            if (backcounter == 0)
                                                            {
                                                               /* foreach (var studentID in StudentMeetingBack)
                                                                    if (studentID.Name == val.FirstName + " " + val.LastName)
                                                                    {
                                                                        checkerid = 1;
                                                                        backcounter = 1;
                                                                        break;
                                                                    }
                                                                * */
                                                                if (checkerid == 0)
                                                                {
                                                                    StudentMeetingBack.Add(new BackStudent() { Name = val.FirstName + " " + val.LastName, Time = i.StartTime + "-" + i.EndTime, Day = i.Days });

                                                                    /*timecheck = i.StartTime + "-" + i.EndTime;

                                                                    tempTransport = val.Transportation;
                                                                    tempTeacher = item.FirstName + " " + item.LastName;
                                                                    tempDay = i.Days;
                                                                    tempstu = val.Email;
                                                                    teachCount++;
                                                                    sectioncheck = val.Section;
                                                                    //  studentcount++;
                                                                    check = true;*/
                                                                    backcounter = 1;
                                                                }
                                                                checkerid = 0;
                                                            }
                                                            if (backcounter == 1)
                                                            {
                                                               // foreach (BackStudent backing in StudentMeetingBack)
                                                                //    if (backing.Name == val.FirstName + " " + val.LastName)
                                                                //    {
                                                                /*
                                                                #region get day and hour of backing

                                                                string day = string.Empty, hour = string.Empty;
                                                                foreach (BackStudent backing in StudentMeetingBack)
                                                                    if (backing.Name ==
                                                                        val.FirstName + " " + val.LastName)
                                                                    {
                                                                        day = backing.Day;
                                                                        hour = backing.Time;
                                                                        break;
                                                                    }
                                                                #endregion;
                                                                        foreach (var ID in Results2)
                                                                            if (ID.StudentName == val.FirstName + " " + val.LastName)
                                                                            {
                                                                                checkerid = 1;
                                                                                break;
                                                                            }
                                                                */
                                                                        if (checkerid == 0)
                                                                        {
                                                                            Results2.Add(new TableResult()
                                                                            {
                                                                                TeacherName = item.FirstName + " " + item.LastName,
                                                                                StudentName = val.FirstName + " " + val.LastName,
                                                                                Major = i.Subject,
                                                                                Hour = i.StartTime + "-" + i.EndTime,
                                                                                Days =  i.Days,
                                                                                School = item.School,
                                                                                Room = item.Room,
                                                                                Transportation = val.Transportation,
                                                                                Pair = item.Pair,
                                                                                Location = location,
                                                                                section = val.Section

                                                                            });
                                                               /*             #region remove  student back meet condition

                                                                            BackStudent remStudent = null;
                                                                            foreach (BackStudent studentID in StudentMeetingBack)
                                                                                if (studentID.Name ==
                                                                                    val.FirstName + " " + val.LastName)
                                                                                {
                                                                                    remStudent = studentID;
                                                                                    break;
                                                                                }
                                                                            if (remStudent != null)
                                                                                StudentMeetingBack.Remove(remStudent);
                                                                            #endregion;
                                                                * */
                                                                            timecheck = i.StartTime + "-" + i.EndTime;

                                                                            tempTransport = val.Transportation;
                                                                            tempTeacher = item.FirstName + " " + item.LastName;
                                                                            tempDay = i.Days;
                                                                            tempstu = val.Email;
                                                                            teachCount++;
                                                                            sectioncheck = val.Section;
                                                                            //  studentcount++;
                                                                            check = true;
                                                                        }

                                                                        checkerid = 0;
                                                                 //   }
                                                            }

                                                        }
                                                        else
                                                        {
                                                            foreach (var ID in Results2)
                                                                if (ID.StudentName == val.FirstName + " " + val.LastName)
                                                                    checkerid = 1;
                                                            if (checkerid == 0)
                                                            {
                                                                Results2.Add(new TableResult()
                                                                {
                                                                    TeacherName = item.FirstName + " " + item.LastName,
                                                                    StudentName = val.FirstName + " " + val.LastName,
                                                                    Major = i.Subject,
                                                                    Hour = i.StartTime + "-" + i.EndTime,
                                                                    Days = i.Days,
                                                                    School = item.School,
                                                                    Room = item.Room,
                                                                    Transportation = val.Transportation,
                                                                    Pair = item.Pair,
                                                                    Location = location,
                                                                    section = val.Section

                                                                });
/*
                                                                #region remove  student back meet condition

                                                                BackStudent remStudent = null;
                                                                foreach (BackStudent studentID in StudentMeetingBack)
                                                                    if (studentID.Name ==
                                                                        val.FirstName + " " + val.LastName)
                                                                    {
                                                                        remStudent = studentID;
                                                                        break;
                                                                    }
                                                                if (remStudent != null)
                                                                    StudentMeetingBack.Remove(remStudent);
                                                                #endregion;
                                                                */
                                                                timecheck = i.StartTime + "-" + i.EndTime;

                                                                tempTransport = val.Transportation;
                                                                tempTeacher = item.FirstName + " " + item.LastName;
                                                                tempDay = i.Days;
                                                                tempstu = val.Email;
                                                                teachCount++;
                                                                sectioncheck = val.Section;
                                                                //  studentcount++;
                                                                check = true;
                                                            }

                                                            checkerid = 0;
                                                        }
                                               /*         foreach (var ID in Results)
                                                        if (ID.StudentName == val.FirstName + " " + val.LastName)
                                                            checkerid = 1;
                                                    if (checkerid == 0)
                                                    {
                                                    Results.Add(new TableResult()
                                                    {
                                                        TeacherName = item.FirstName + " " + item.LastName,
                                                        StudentName = val.FirstName + " " + val.LastName,
                                                        Major = i.Subject,
                                                        Hour = i.StartTime + "-" + i.EndTime,
                                                        Days = i.Days,
                                                        School = item.School,
                                                        Room = item.Room,
                                                        Transportation = val.Transportation,
                                                        Pair = item.Pair,
                                                        Location = location,
                                                        section = val.Section

                                                    });
                                              
                                                    //  else if ((tempTransport == "Yes") && (val.Transportation == "No") && (tempTeacher == item.LastName && (teachCount==2||teachCount==4)) && (tempDay == i.Days))
                                                   
                                                  //  remv = val;
                                                                
                                                    timecheck = i.StartTime + "-" + i.EndTime;
                                                   
                                                    tempTransport = val.Transportation;
                                                    tempTeacher = item.LastName;
                                                    tempDay = i.Days;
                                                    tempstu = val.Email;
                                                    teachCount++;
                                                    sectioncheck = val.Section;
                                                  //  studentcount++;
                                                    check = true;
                                                }
                                                     checkerid=0;
                                                * */
                                                    }
                                                }
                                                else if ((i.Subject == "AP Bio" || i.Subject == "Biology" || i.Subject == "Chemistry" || i.Subject == "AP Chemistry" || i.Subject == "Science" || i.Subject == "Pre-AP Science" || i.Subject == "Science Others" || i.Subject == "Others") && (val.Major == "Science") && (location == false))
                                                {
                                                    if ((tempTransport == "Yes") && (val.Transportation == "No") &&
                                                        (tempTeacher == item.FirstName + " " + item.LastName) &&
                                                        (tempDay == i.Days) &&
                                                        (teachCount == 2 || teachCount == 4) &&
                                                        (timecheck == i.StartTime + "-" + i.EndTime) &&
                                                        (val.Section == sectioncheck))  {
                                                        if (checkback)
                                                        {
                                                            if (backcounter == 0)
                                                            {
                                                              /*  foreach (var studentID in StudentMeetingBack)
                                                                    if (studentID.Name == val.FirstName + " " + val.LastName)
                                                                    {
                                                                        checkerid = 1;
                                                                        backcounter = 1;
                                                                        break;
                                                                    }
                                                               * */
                                                                if (checkerid == 0)
                                                                {
                                                                    StudentMeetingBack.Add(new BackStudent() { Name = val.FirstName + " " + val.LastName, Time = i.StartTime + "-" + i.EndTime, Day = i.Days });

                                                                /*    timecheck = i.StartTime + "-" + i.EndTime;

                                                                    tempTransport = val.Transportation;
                                                                    tempTeacher = item.FirstName + " " + item.LastName;
                                                                    tempDay = i.Days;
                                                                    tempstu = val.Email;
                                                                    teachCount++;
                                                                    sectioncheck = val.Section;
                                                                    //  studentcount++;
                                                                    check = true;*/
                                                                    backcounter = 1;
                                                                }
                                                                checkerid = 0;
                                                            }
                                                            if (backcounter == 1)
                                                            {
                                                              //  foreach (BackStudent backing in StudentMeetingBack)
                                                               //     if (backing.Name == val.FirstName + " " + val.LastName)
                                                              //      {
                                                                /*
                                                                #region get day and hour of backing

                                                                string day = string.Empty, hour = string.Empty;
                                                                foreach (BackStudent backing in StudentMeetingBack)
                                                                    if (backing.Name ==
                                                                        val.FirstName + " " + val.LastName)
                                                                    {
                                                                        day = backing.Day;
                                                                        hour = backing.Time;
                                                                        break;
                                                                    }
                                                                #endregion;
                                                                        foreach (var ID in Results2)
                                                                            if (ID.StudentName == val.FirstName + " " + val.LastName)
                                                                            {
                                                                                checkerid = 1;
                                                                                break;
                                                                            }
                                                                */
                                                                        if (checkerid == 0)
                                                                        {
                                                                            Results2.Add(new TableResult()
                                                                            {
                                                                                TeacherName = item.FirstName + " " + item.LastName,
                                                                                StudentName = val.FirstName + " " + val.LastName,
                                                                                Major = i.Subject,
                                                                                Hour =  i.StartTime + "-" + i.EndTime,
                                                                                Days =  i.Days,
                                                                                School = item.School,
                                                                                Room = item.Room,
                                                                                Transportation = val.Transportation,
                                                                                Pair = item.Pair,
                                                                                Location = location,
                                                                                section = val.Section

                                                                            });
                                                                            /*
                                                                            #region remove  student back meet condition

                                                                            BackStudent remStudent = null;
                                                                            foreach (BackStudent studentID in StudentMeetingBack)
                                                                                if (studentID.Name ==
                                                                                    val.FirstName + " " + val.LastName)
                                                                                {
                                                                                    remStudent = studentID;
                                                                                    break;
                                                                                }
                                                                            if (remStudent != null)
                                                                                StudentMeetingBack.Remove(remStudent);
                                                                            #endregion;
                                                                            */
                                                                            timecheck = i.StartTime + "-" + i.EndTime;

                                                                            tempTransport = val.Transportation;
                                                                            tempTeacher = item.FirstName + " " + item.LastName;
                                                                            tempDay = i.Days;
                                                                            tempstu = val.Email;
                                                                            teachCount++;
                                                                            sectioncheck = val.Section;
                                                                            //  studentcount++;
                                                                            check = true;
                                                                        }

                                                                        checkerid = 0;
                                                                //    }
                                                            }

                                                        }
                                                        else
                                                        {
                                                            foreach (var ID in Results2)
                                                                if (ID.StudentName == val.FirstName + " " + val.LastName)
                                                                    checkerid = 1;
                                                            if (checkerid == 0)
                                                            {
                                                                Results2.Add(new TableResult()
                                                                {
                                                                    TeacherName = item.FirstName + " " + item.LastName,
                                                                    StudentName = val.FirstName + " " + val.LastName,
                                                                    Major = i.Subject,
                                                                    Hour = i.StartTime + "-" + i.EndTime,
                                                                    Days = i.Days,
                                                                    School = item.School,
                                                                    Room = item.Room,
                                                                    Transportation = val.Transportation,
                                                                    Pair = item.Pair,
                                                                    Location = location,
                                                                    section = val.Section

                                                                });
/*
                                                                #region remove  student back meet condition

                                                                BackStudent remStudent = null;
                                                                foreach (BackStudent studentID in StudentMeetingBack)
                                                                    if (studentID.Name ==
                                                                        val.FirstName + " " + val.LastName)
                                                                    {
                                                                        remStudent = studentID;
                                                                        break;
                                                                    }
                                                                if (remStudent != null)
                                                                    StudentMeetingBack.Remove(remStudent);
                                                                #endregion;
                                                                */
                                                                timecheck = i.StartTime + "-" + i.EndTime;

                                                                tempTransport = val.Transportation;
                                                                tempTeacher = item.FirstName + " " + item.LastName;
                                                                tempDay = i.Days;
                                                                tempstu = val.Email;
                                                                teachCount++;
                                                                sectioncheck = val.Section;
                                                                //  studentcount++;
                                                                check = true;
                                                            }

                                                            checkerid = 0;
                                                        }
                                                  /*       foreach (var ID in Results)
                                                        if (ID.StudentName == val.FirstName + " " + val.LastName)
                                                            checkerid = 1;
                                                    if (checkerid == 0)
                                                    {
                                                    Results.Add(new TableResult()
                                                    {
                                                        TeacherName = item.FirstName + " " + item.LastName,
                                                        StudentName = val.FirstName + " " + val.LastName,
                                                        Major = i.Subject,
                                                        Hour = i.StartTime + "-" + i.EndTime,
                                                        Days = i.Days,
                                                        School = item.School,
                                                        Room = item.Room,
                                                        Transportation = val.Transportation,
                                                        Pair = item.Pair,
                                                        Location = location,
                                                        section = val.Section

                                                    });
                                              
                                                    //  else if ((tempTransport == "Yes") && (val.Transportation == "No") && (tempTeacher == item.LastName && (teachCount==2||teachCount==4)) && (tempDay == i.Days))
                                                   
                                                  //  remv = val;
                                                                
                                                    timecheck = i.StartTime + "-" + i.EndTime;
                                                   
                                                    tempTransport = val.Transportation;
                                                    tempTeacher = item.LastName;
                                                    tempDay = i.Days;
                                                    tempstu = val.Email;
                                                    teachCount++;
                                                    sectioncheck = val.Section;
                                                  //  studentcount++;
                                                    check = true;
                                                }
                                                     checkerid=0;
                                                   * */
                                                    }
                                                }
                                                else if ((i.Subject == "Math" || i.Subject == "Algebra 1" || i.Subject == "Pre-AP Math" || i.Subject == "Math Others") && (val.Major == "Mathematics") && (location == false))
                                                {
                                                    if ((tempTransport == "Yes") && (val.Transportation == "No") &&
                                                        (tempTeacher == item.FirstName + " " + item.LastName) &&
                                                        (tempDay == i.Days) &&
                                                        (teachCount == 2 || teachCount == 4) &&
                                                        (timecheck == i.StartTime + "-" + i.EndTime) &&
                                                        (val.Section == sectioncheck))  {

                                                        if (checkback)
                                                        {
                                                            if (backcounter == 0)
                                                            {
                                                              /*  foreach (var studentID in StudentMeetingBack)
                                                                    if (studentID.Name == val.FirstName + " " + val.LastName)
                                                                    {
                                                                        checkerid = 1;
                                                                        backcounter = 1;
                                                                        break;
                                                                    }*/
                                                                if (checkerid == 0)
                                                                {
                                                                    StudentMeetingBack.Add(new BackStudent() { Name = val.FirstName + " " + val.LastName, Time = i.StartTime + "-" + i.EndTime, Day = i.Days });

                                                                  /*  timecheck = i.StartTime + "-" + i.EndTime;

                                                                    tempTransport = val.Transportation;
                                                                    tempTeacher = item.FirstName + " " + item.LastName;
                                                                    tempDay = i.Days;
                                                                    tempstu = val.Email;
                                                                    teachCount++;
                                                                    sectioncheck = val.Section;
                                                                    //  studentcount++;
                                                                    check = true;*/
                                                                    backcounter = 1;
                                                                }
                                                                checkerid = 0;
                                                            }
                                                            if (backcounter == 1)
                                                            {
                                                               // foreach (BackStudent backing in StudentMeetingBack)
                                                                //    if (backing.Name == val.FirstName + " " + val.LastName)
                                                                //    {
                                                                /*
                                                         #region get day and hour of backing

                                                                string day=string.Empty, hour=string.Empty;
                                                                foreach (BackStudent backing in StudentMeetingBack)
                                                                    if (backing.Name ==
                                                                        val.FirstName + " " + val.LastName)
                                                                    {
                                                                        day = backing.Day;
                                                                        hour = backing.Time;
                                                                        break;
                                                                    }
                                                                    #endregion;
                                                                foreach (var ID in Results2)
                                                                            if (ID.StudentName == val.FirstName + " " + val.LastName)
                                                                            {
                                                                                checkerid = 1;
                                                                                break;
                                                                            }
                                                                */
                                                                        if (checkerid == 0)
                                                                        {
                                                                            Results2.Add(new TableResult()
                                                                            {
                                                                                TeacherName = item.FirstName + " " + item.LastName,
                                                                                StudentName = val.FirstName + " " + val.LastName,
                                                                                Major = i.Subject,
                                                                                Hour =  i.StartTime + "-" + i.EndTime,
                                                                                Days =  i.Days,
                                                                                School = item.School,
                                                                                Room = item.Room,
                                                                                Transportation = val.Transportation,
                                                                                Pair = item.Pair,
                                                                                Location = location,
                                                                                section = val.Section

                                                                            });
                                                                            /*
                                                                            #region remove  student back meet condition

                                                                            BackStudent remStudent = null;
                                                                            foreach (BackStudent studentID in StudentMeetingBack)
                                                                                if (studentID.Name ==
                                                                                    val.FirstName + " " + val.LastName)
                                                                                {
                                                                                    remStudent = studentID;
                                                                                    break;
                                                                                }
                                                                            if (remStudent != null)
                                                                                StudentMeetingBack.Remove(remStudent);
                                                                            #endregion;
                                                                            */
                                                                            timecheck = i.StartTime + "-" + i.EndTime;

                                                                            tempTransport = val.Transportation;
                                                                            tempTeacher = item.FirstName + " " + item.LastName;
                                                                            tempDay = i.Days;
                                                                            tempstu = val.Email;
                                                                            teachCount++;
                                                                            sectioncheck = val.Section;
                                                                            //  studentcount++;
                                                                            check = true;
                                                                        }

                                                                        checkerid = 0;
                                                                //    }
                                                            }

                                                        }
                                                        else
                                                        {
                                                            foreach (var ID in Results2)
                                                                if (ID.StudentName == val.FirstName + " " + val.LastName)
                                                                    checkerid = 1;
                                                            if (checkerid == 0)
                                                            {
                                                                Results2.Add(new TableResult()
                                                                {
                                                                    TeacherName = item.FirstName + " " + item.LastName,
                                                                    StudentName = val.FirstName + " " + val.LastName,
                                                                    Major = i.Subject,
                                                                    Hour = i.StartTime + "-" + i.EndTime,
                                                                    Days = i.Days,
                                                                    School = item.School,
                                                                    Room = item.Room,
                                                                    Transportation = val.Transportation,
                                                                    Pair = item.Pair,
                                                                    Location = location,
                                                                    section = val.Section

                                                                });
                                                                /*
                                                                #region remove  student back meet condition

                                                                BackStudent remStudent = null;
                                                                foreach (BackStudent studentID in StudentMeetingBack)
                                                                    if (studentID.Name ==
                                                                        val.FirstName + " " + val.LastName)
                                                                    {
                                                                        remStudent = studentID;
                                                                        break;
                                                                    }
                                                                if (remStudent != null)
                                                                    StudentMeetingBack.Remove(remStudent);
                                                                #endregion;
                                                                */
                                                                //  else if ((tempTransport == "Yes") && (val.Transportation == "No") && (tempTeacher == item.LastName && (teachCount==2||teachCount==4)) && (tempDay == i.Days))

                                                                //  remv = val;

                                                                timecheck = i.StartTime + "-" + i.EndTime;

                                                                tempTransport = val.Transportation;
                                                                tempTeacher = item.FirstName + " " + item.LastName;
                                                                tempDay = i.Days;
                                                                tempstu = val.Email;
                                                                teachCount++;
                                                                sectioncheck = val.Section;
                                                                //  studentcount++;
                                                                check = true;
                                                            }

                                                            checkerid = 0;
                                                        }
                                                 /*       foreach (var ID in Results)
                                                        if (ID.StudentName == val.FirstName + " " + val.LastName)
                                                            checkerid = 1;
                                                    if (checkerid == 0)
                                                    {
                                                    Results.Add(new TableResult()
                                                    {
                                                        TeacherName = item.FirstName + " " + item.LastName,
                                                        StudentName = val.FirstName + " " + val.LastName,
                                                        Major = i.Subject,
                                                        Hour = i.StartTime + "-" + i.EndTime,
                                                        Days = i.Days,
                                                        School = item.School,
                                                        Room = item.Room,
                                                        Transportation = val.Transportation,
                                                        Pair = item.Pair,
                                                        Location = location,
                                                        section = val.Section

                                                    });
                                              
                                                   
                                                                
                                                    timecheck = i.StartTime + "-" + i.EndTime;
                                                   
                                                    tempTransport = val.Transportation;
                                                    tempTeacher = item.LastName;
                                                    tempDay = i.Days;
                                                    tempstu = val.Email;
                                                    teachCount++;
                                                    sectioncheck = val.Section;
                                                  //  studentcount++;
                                                    check = true;
                                                }
                                                     checkerid=0;
                                                      */

                                                    }
                                                }
                                        }
                                    check = false;

                                }
                                location = false;
                            }

                  
                         
                            if (teachCount > count)
                            {
                                teachCount = 1;
                                break;
                            }
                            backcounter = 0;
                        }

                        //studentcount++;
                    }

                if (Results.Count == Studentstep22.Count)
                {
                    Open = true;
                    NoConditionResult2 = Results2.ToList();
                     //Here update value on screen progres bar
                            if (Results.Count < Results2.Count)
                            {
                                _pool.WaitOne();
                                Results = Results2.ToList();
                                NoConditionResult = Results2.ToList();
                                _pool.Release();
                            }
                }

                else if ( numberOfCount >5)
                {                
                    Open = true;
                  //  bool status = true;
                    foreach(var item in NoConditionResult2)
                        if (NoConditionResult2.Where(p => p.TeacherName == item.TeacherName).Count() < 2)
                        {
                            Open = false;
                            break;
                        }
                    if (numberOfCount >8)                           
                            Open = true;             
                    if (!Open)
                    {
                       
                        if (NoConditionResult.Count < Results2.Count)
                       NoConditionResult2 = Results2.ToList();
                         //Here update value on screen progres bar
                                    if (Results.Count < Results2.Count)
                                    {
                                        _pool.WaitOne();
                                        Results = Results2.ToList();
                                        NoConditionResult = Results2.ToList();
                                        _pool.Release();
                                    }
                        ShuffleStep2(Studentstep22);
                        ShuffleStep2(Studentstep22);
                        numberOfCount++;
                    }
                    
                }
                else
                {
                    if (NoConditionResult2.Count < Results2.Count)
                    {
                        NoConditionResult2 = Results2.ToList();
                        numberOfCount = 0;
                          //Here update value on screen progres bar
                                    if (Results.Count < Results2.Count)
                                    {
                                        _pool.WaitOne();
                                        Results = Results2.ToList();
                                        NoConditionResult = Results2.ToList();
                                        _pool.Release();
                                    }
                    }
                   /* if (NoConditionResult.Count == Results.Count)
                    {
                        status = true;
                         foreach(var item in Results)
                             if (Results.Where(p => p.TeacherName == item.TeacherName).Count() < 2)
                                 status = false;
                        if(status)
                            NoConditionResult = Results.ToList();
                    }*/
                    ShuffleStep2(Studentstep22);
                   //   ShuffleTeachStep2(Teacherstep2);
                    numberOfCount++;
                }
            }
            Results2 = NoConditionResult2.ToList();
                      //Here update value on screen progres bar
                                    if (Results.Count < Results2.Count)
                                    {
                                        _pool.WaitOne();
                                        Results = Results2.ToList();
                                        NoConditionResult = Results2.ToList();
                                        _pool.Release();
                                    }
                      },tokenSource2.Token);
            }
            //TODO THREAD ALL THREAD EXIT AFTER Done=true
           
       //     Task.WaitAny(jobs);
       //     tokenSource2.Cancel();
            Task.WaitAll(jobs);
           
            foreach (Task task in jobs)
                task.Dispose();
            Done = true;
        }
        private void getMatchListCI()
        {

            NoConditionResult.Clear();
            string timecheck;
            string sectioncheck;
            bool location,checkback;
            int count;
            int timing = 0, numberOfCount = 0;
            int teachCount,backcounter;
                    bool check = false;
                 int checkerid,studentcount;
                 bool matchstart = false, matchend = false;
                 //bool Open = false;
                  string tempTransport,tempTeacher,tempDay,tempstu;
                 bool Monday = false, Tuesday = false, Wednesday = false, Thursday = false, Friday = false;
             
        bool    Open = false;          
            List<BackStudent> StudentMeetingBack = new List<BackStudent>();
            while (!Open)
            {
                Results.Clear();
                timecheck = string.Empty;
                sectioncheck = string.Empty;
                tempDay = string.Empty;
                tempstu = string.Empty;
                tempTeacher = string.Empty;
                tempTransport = string.Empty;
                location = false;
                teachCount = 1;
                checkerid = 0;

                //  checkerid = 1;
                //   teachCount = 1;
                foreach (var item in Teacherci)
                {
                    checkback = false;
                    backcounter = 0;

                    //        studentcount = 0;

                    if (item.Pair == "Yes")
                    {
                        count = 4;
                    }
                    else
                    {
                        count = 2;
                    }
                    DateTime startstudentime, endstudentime, startteachertime, endteachertime;
                    TimeSpan differstart, differend;
                    foreach (var i in item.Schedule)
                    {
                        #region Checking BACK TO BACK OF SUBJECT
                        foreach (var backsubject in item.BackDays)
                        {
                            if (i.Subject == backsubject.Subject)
                            {
                                checkback = true;
                                break;
                            }
                        }
                        #endregion;

                        if (i.Subject == "Pre-AP")
                            i.Subject = "Pre-AP Science";
                        i.StartTime = DateTime.Parse(i.StartTime).ToString("hh:mm tt");
                        i.EndTime = DateTime.Parse(i.EndTime).ToString("hh:mm tt");
                        startteachertime = DateTime.Parse(i.StartTime);
                        endteachertime = DateTime.Parse(i.EndTime);
                        foreach (var val in Studentci)
                        {
                            string[] mathpreference = val.PreferredDays.Split(preference, StringSplitOptions.None);
                            string[] sciencepreference = val.Year.Split(preference, StringSplitOptions.None);
                            string mathtype1=string.Empty,mathtype2=string.Empty,sciencetype1=string.Empty,sciencetype2=string.Empty;
                            bool matchpreference=false;
                            for(int number=0;number<mathpreference.Count();number++){
                                if (mathpreference[number] == "1")
                                {
                                    if (number == 1)
                                        mathtype1 = "Algebra 1";
                                    if (number == 2)
                                        mathtype1 = "Geometry";
                                    if (number == 3)
                                        mathtype1 = "Algebra 2";
                                    if (number == 4)
                                        mathtype1 = "Math Models";
                                    if (number == 5)
                                        mathtype1 = "Pre-calculus";                                  
                                }
                                if (mathpreference[number] == "2")
                                {
                                    if (number == 1)
                                        mathtype2 = "Algebra 1";
                                    if (number == 2)
                                        mathtype2 = "Geometry";
                                    if (number == 3)
                                        mathtype2 = "Algebra 2";
                                    if (number == 4)
                                        mathtype2 = "Math Models";
                                    if (number == 5)
                                        mathtype2 = "Pre-calculus";    
                                }
                                }
                            for (int number = 0; number < sciencepreference.Count(); number++)
                            {
                                if (sciencepreference[number] == "1")
                                {
                                    if (number == 1)
                                        sciencetype1 = "Biology";
                                    if (number == 2)
                                        sciencetype1 = "Anatomy/Physiology";
                                    if (number == 3)
                                        sciencetype1 = "Aquatic Science";
                                    if (number == 4)
                                        sciencetype1 = "Environmental Science";
                                   
                                }
                                if (sciencepreference[number] == "2")
                                {
                                    if (number == 1)
                                        sciencetype2 = "Biology";
                                    if (number == 2)
                                        sciencetype2 = "Anatomy/Physiology";
                                    if (number == 3)
                                        sciencetype2 = "Aquatic Science";
                                    if (number == 4)
                                        sciencetype2 = "Environmental Science";                                   
                                }
                            }
                            if ((i.Subject == sciencetype1 || i.Subject == sciencetype2) && (val.Major == "Biology" ))
                                matchpreference = true;
                            if ((i.Subject == mathtype1 || i.Subject == mathtype2) && (val.Major == "Math 7-12" || val.Major == "Math 4-8"))
                                matchpreference = true;
                            if(val.Major=="Chemistry" || val.Major=="Physics" || val.Major=="Computer Science" || val.Major == "Science 4-8" )
                                matchpreference = true;
                            //addition modification
                            matchpreference = true;
                            matchstart = false;
                            matchend = false;
                            Monday = false; Tuesday = false; Wednesday = false; Thursday = false; Friday = false;
                            if ((item.District == "Denton") && (val.DistrictDenton == 1 || val.DistrictDenton == 2 || val.DistrictDenton == 3) && (val.Transportation == "Yes" && matchpreference))
                                location = true;
                            if ((item.District == "Lewisville") && (val.DistrictLewisville == 1 || val.DistrictLewisville == 2 || val.DistrictLewisville == 3) && (val.Transportation == "Yes" && matchpreference))
                                location = true;
                            if ((item.District == "McKinney") && (val.DistrictMckinney == 1 || val.DistrictMckinney == 2 || val.DistrictMckinney == 3) && (val.Transportation == "Yes"))
                                location = true;
                            if ((item.District == "Northwest") && (val.DistrictForthWorth == 1 || val.DistrictForthWorth == 2 || val.DistrictForthWorth == 3) && (val.Transportation == "Yes" && matchpreference))
                                location = true;
                            if (item.District == "Denton" && val.DistrictDenton == 1)
                                timing = 5;
                            if (item.District == "Denton" && val.DistrictDenton == 2)
                                timing = 10;
                            if (item.District == "Denton" && val.DistrictDenton == 3)
                                timing = 15;
                            if (item.District == "Lewisville" && val.DistrictLewisville == 1)
                                timing = 5;
                            if (item.District == "Lewisville" && val.DistrictLewisville == 2)
                                timing = 10;
                            if (item.District == "Lewisville" && val.DistrictLewisville == 3)
                                timing = 15;
                            if (item.District == "Northwest" && val.DistrictForthWorth == 1)
                                timing = 5;
                            if (item.District == "Northwest" && val.DistrictForthWorth == 2)
                                timing = 10;
                            if (item.District == "Northwest" && val.DistrictForthWorth == 3)
                                timing = 15;
                            if (item.District == "McKinney" && val.DistrictMckinney == 1)
                                timing = 5;
                            if (item.District == "McKinney" && val.DistrictMckinney == 2)
                                timing = 10;
                            if (item.District == "McKinney" && val.DistrictMckinney == 3)
                                timing = 15;


                            foreach (var j in val.Schedule)
                            {
                                String[] times = j.Time.Split(separators, StringSplitOptions.None);
                                startstudentime = DateTime.Parse(times[0]);
                                endstudentime = DateTime.Parse(times[1]);
                                differstart = startteachertime.Subtract(startstudentime);
                                differend = endteachertime.Subtract(endstudentime);
                                if ((i.Days == "Monday" || i.Days == "A Monday" || i.Days == "B Monday") && j.Monday == true)
                                {

                                    if (differstart.Minutes >= timing)
                                        matchstart = true;
                                    if (differend.Minutes <= -timing)
                                        matchend = true;
                                    if (matchstart && matchend)
                                        Monday = true;
                                }
                                if ((i.Days == "Tuesday" || i.Days == "A Tuesday" || i.Days == "B Tuesday") && j.Tuesday == true)
                                {
                                    if (differstart.Minutes >= timing)
                                        matchstart = true;
                                    if (differend.Minutes <= -timing)
                                        matchend = true;
                                    if (matchstart && matchend)
                                        Tuesday = true;
                                }
                                if ((i.Days == "Wednesday" || i.Days == "A Wednesday" || i.Days == "B Wednesday") && j.Wednesday == true)
                                {
                                    if (differstart.Minutes >= timing)
                                        matchstart = true;
                                    if (differend.Minutes <= -timing)
                                        matchend = true;
                                    if (matchstart && matchend)
                                        Wednesday = true;
                                }
                                if ((i.Days == "Thursday" || i.Days == "A Thursday" || i.Days == "B Thursday") && j.Thursday == true)
                                {
                                    if (differstart.Minutes >= timing)
                                        matchstart = true;
                                    if (differend.Minutes <= -timing)
                                        matchend = true;
                                    if (matchstart && matchend)
                                        Thursday = true;
                                }
                                if ((i.Days == "Friday" || i.Days == "A Friday" || i.Days == "B Friday") && j.Friday == true)
                                {
                                    if (differstart.Minutes >= timing)
                                        matchstart = true;
                                    if (differend.Minutes <= -timing)
                                        matchend = true;
                                    if (matchstart && matchend)
                                        Friday = true;
                                }
                                if ((Monday != false || Tuesday != false || Wednesday != false || Thursday != false || Friday != false) && (teachCount <= count))
                                    if ((check == false))
                                    {
                                        if ((i.Subject == "Math" || i.Subject == "Algebra 1" || i.Subject == "Pre-AP Math" || i.Subject == "Math Others" || i.Subject == "Algebra 2" || i.Subject == "Pre-Calculus") && (val.Major == "Math 7-12" || val.Major == "Math 4-8") && (location == true))
                                        {
                                            if ((tempstu != val.Email && (tempDay != i.Days) && teachCount == 1) || (tempstu != val.Email && teachCount == 3 && tempDay != i.Days) || (tempstu != val.Email && tempDay == i.Days && (teachCount == 4 || teachCount == 2) && (val.Section == sectioncheck)))
                                            {
                                                foreach (var ID in Results)
                                                    if (ID.StudentName == val.FirstName + " " + val.LastName)
                                                        checkerid = 1;
                                                if (checkerid == 0)
                                                {
                                                    Results.Add(new TableResult()
                                                    {
                                                        TeacherName = item.FirstName + " " + item.LastName,
                                                        StudentName = val.FirstName + " " + val.LastName,
                                                        Major = i.Subject,
                                                        Hour = i.StartTime + "-" + i.EndTime,
                                                        Days = i.Days,
                                                        School = item.School,
                                                        Room = item.Room,
                                                        Transportation = val.Transportation,
                                                        Pair = item.Pair,
                                                        Location = location,
                                                        section = val.Section

                                                    });
                                                    tempTransport = val.Transportation;
                                                    tempTeacher = item.LastName;
                                                    tempDay = i.Days;
                                                    tempstu = val.Email;
                                                    sectioncheck = val.Section;
                                                    timecheck = i.StartTime + "-" + i.EndTime;
                                                    teachCount++;
                                                    //     item.TeachCount++;
                                                    check = true;
                                                }
                                                checkerid = 0;
                                            }
                                        }
                                        else
                                            if ((i.Subject == "Science" || i.Subject == "Pre-AP Science" || i.Subject == "Environmental Science" || i.Subject=="Ecology"|| i.Subject == "Science Others") && (val.Major == "Science 4-8" || val.Major == "Biology") && (location == true))
                                            {
                                                if ((tempstu != val.Email && (tempDay != i.Days) && teachCount == 1) || (tempstu != val.Email && teachCount == 3 && tempDay != i.Days) || (tempstu != val.Email && tempDay == i.Days && (teachCount == 4 || teachCount == 2) && (val.Section == sectioncheck)))
                                                {
                                                    foreach (var ID in Results)
                                                        if (ID.StudentName == val.FirstName + " " + val.LastName)
                                                            checkerid = 1;
                                                    if (checkerid == 0)
                                                    {
                                                        Results.Add(new TableResult()
                                                        {
                                                            TeacherName = item.FirstName + " " + item.LastName,
                                                            StudentName = val.FirstName + " " + val.LastName,
                                                            Major = i.Subject,
                                                            Hour = i.StartTime + "-" + i.EndTime,
                                                            Days = i.Days,
                                                            School = item.School,
                                                            Room = item.Room,
                                                            Transportation = val.Transportation,
                                                            Pair = item.Pair,
                                                            Location = location,
                                                            section = val.Section

                                                        });
                                                        tempTransport = val.Transportation;
                                                        tempTeacher = item.LastName;
                                                        tempDay = i.Days;
                                                        tempstu = val.Email;
                                                        sectioncheck = val.Section;
                                                        timecheck = i.StartTime + "-" + i.EndTime;
                                                        teachCount++;
                                                        //     item.TeachCount++;
                                                        check = true;
                                                    }
                                                    checkerid = 0;
                                                }
                                            }
                                            else
                                                if ((i.Subject == "Biology" || i.Subject == "AP Bio") && (val.Major == "Biology") && (location == true))
                                                {
                                                    if ((tempstu != val.Email && (tempDay != i.Days) && teachCount == 1) || (tempstu != val.Email && teachCount == 3 && tempDay != i.Days) || (tempstu != val.Email && tempDay == i.Days && (teachCount == 4 || teachCount == 2) && (val.Section == sectioncheck)))
                                                    {
                                                        foreach (var ID in Results)
                                                            if (ID.StudentName == val.FirstName + " " + val.LastName)
                                                                checkerid = 1;
                                                        if (checkerid == 0)
                                                        {
                                                            Results.Add(new TableResult()
                                                            {
                                                                TeacherName = item.FirstName + " " + item.LastName,
                                                                StudentName = val.FirstName + " " + val.LastName,
                                                                Major = i.Subject,
                                                                Hour = i.StartTime + "-" + i.EndTime,
                                                                Days = i.Days,
                                                                School = item.School,
                                                                Room = item.Room,
                                                                Transportation = val.Transportation,
                                                                Pair = item.Pair,
                                                                Location = location,
                                                                section = val.Section

                                                            });
                                                            tempTransport = val.Transportation;
                                                            tempTeacher = item.LastName;
                                                            tempDay = i.Days;
                                                            tempstu = val.Email;
                                                            sectioncheck = val.Section;
                                                            timecheck = i.StartTime + "-" + i.EndTime;
                                                            teachCount++;
                                                            //     item.TeachCount++;
                                                            check = true;
                                                        }
                                                        checkerid = 0;
                                                    }
                                                }
                                                else
                                                    if ((i.Subject == "Computer Science") && (val.Major == "Computer Science") && (location == true))
                                                    {
                                                        if ((tempstu != val.Email && (tempDay != i.Days) && teachCount == 1) || (tempstu != val.Email && teachCount == 3 && tempDay != i.Days) || (tempstu != val.Email && tempDay == i.Days && (teachCount == 4 || teachCount == 2) && (val.Section == sectioncheck)))
                                                        {
                                                            foreach (var ID in Results)
                                                                if (ID.StudentName == val.FirstName + " " + val.LastName)
                                                                    checkerid = 1;
                                                            if (checkerid == 0)
                                                            {
                                                                Results.Add(new TableResult()
                                                                {
                                                                    TeacherName = item.FirstName + " " + item.LastName,
                                                                    StudentName = val.FirstName + " " + val.LastName,
                                                                    Major = i.Subject,
                                                                    Hour = i.StartTime + "-" + i.EndTime,
                                                                    Days = i.Days,
                                                                    School = item.School,
                                                                    Room = item.Room,
                                                                    Transportation = val.Transportation,
                                                                    Pair = item.Pair,
                                                                    Location = location,
                                                                    section = val.Section

                                                                });
                                                                tempTransport = val.Transportation;
                                                                tempTeacher = item.LastName;
                                                                tempDay = i.Days;
                                                                tempstu = val.Email;
                                                                sectioncheck = val.Section;
                                                                timecheck = i.StartTime + "-" + i.EndTime;
                                                                teachCount++;
                                                                //     item.TeachCount++;
                                                                check = true;
                                                            }
                                                            checkerid = 0;
                                                        }
                                                    }
                                                    else
                                                        if ((i.Subject == "Physics") && (val.Major == "Physics") && (location == true))
                                                        {
                                                            if ((tempstu != val.Email && (tempDay != i.Days) && teachCount == 1) || (tempstu != val.Email && teachCount == 3 && tempDay != i.Days) || (tempstu != val.Email && tempDay == i.Days && (teachCount == 4 || teachCount == 2) && (val.Section == sectioncheck)))
                                                            {
                                                                foreach (var ID in Results)
                                                                    if (ID.StudentName == val.FirstName + " " + val.LastName)
                                                                        checkerid = 1;
                                                                if (checkerid == 0)
                                                                {
                                                                    Results.Add(new TableResult()
                                                                    {
                                                                        TeacherName = item.FirstName + " " + item.LastName,
                                                                        StudentName = val.FirstName + " " + val.LastName,
                                                                        Major = i.Subject,
                                                                        Hour = i.StartTime + "-" + i.EndTime,
                                                                        Days = i.Days,
                                                                        School = item.School,
                                                                        Room = item.Room,
                                                                        Transportation = val.Transportation,
                                                                        Pair = item.Pair,
                                                                        Location = location,
                                                                        section = val.Section

                                                                    });
                                                                    tempTransport = val.Transportation;
                                                                    tempTeacher = item.LastName;
                                                                    tempDay = i.Days;
                                                                    tempstu = val.Email;
                                                                    sectioncheck = val.Section;
                                                                    timecheck = i.StartTime + "-" + i.EndTime;
                                                                    teachCount++;
                                                                    //     item.TeachCount++;
                                                                    check = true;
                                                                }
                                                                checkerid = 0;
                                                            }
                                                        }
                                                else
                                                    if ((i.Subject == "Chemistry" || i.Subject == "Pre-AP Chemistry" || i.Subject == "AP Chemistry") && (val.Major == "Chemistry") && (location == true))
                                                    {
                                                        if ((tempstu != val.Email && (tempDay != i.Days) && teachCount == 1) || (tempstu != val.Email && teachCount == 3 && tempDay != i.Days) || (tempstu != val.Email && tempDay == i.Days && (teachCount == 4 || teachCount == 2) && (val.Section == sectioncheck)))
                                                        {
                                                            foreach (var ID in Results)
                                                                if (ID.StudentName == val.FirstName + " " + val.LastName)
                                                                    checkerid = 1;
                                                            if (checkerid == 0)
                                                            {
                                                                Results.Add(new TableResult()
                                                                {
                                                                    TeacherName = item.FirstName + " " + item.LastName,
                                                                    StudentName = val.FirstName + " " + val.LastName,
                                                                    Major = i.Subject,
                                                                    Hour = i.StartTime + "-" + i.EndTime,
                                                                    Days = i.Days,
                                                                    School = item.School,
                                                                    Room = item.Room,
                                                                    Transportation = val.Transportation,
                                                                    Pair = item.Pair,
                                                                    Location = location,
                                                                    section = val.Section

                                                                });
                                                                tempTransport = val.Transportation;
                                                                tempTeacher = item.LastName;
                                                                tempDay = i.Days;
                                                                tempstu = val.Email;
                                                                sectioncheck = val.Section;
                                                                timecheck = i.StartTime + "-" + i.EndTime;
                                                                teachCount++;
                                                                //     item.TeachCount++;
                                                                check = true;
                                                            }
                                                            checkerid = 0;
                                                        }
                                                    }
                                                    else if ((i.Subject == "Math" || i.Subject == "Algebra 1" || i.Subject == "Pre-AP Math" || i.Subject == "Math Others" || i.Subject == "Algebra 2" || i.Subject == "Pre-Calculus") && (val.Major == "Math 7-12" || val.Major == "Math 4-8") && (location == false))
                                                    {
                                                        if ((tempTransport == "Yes") && (val.Transportation == "No") && (tempTeacher == item.LastName) && (tempDay == i.Days) && (teachCount == 2 || teachCount == 4) && (timecheck == i.StartTime + "-" + i.EndTime) && (val.Section == sectioncheck))
                                                        {
                                                            foreach (var ID in Results)
                                                                if (ID.StudentName == val.FirstName + " " + val.LastName)
                                                                    checkerid = 1;
                                                            if (checkerid == 0)
                                                            {
                                                                Results.Add(new TableResult()
                                                                {
                                                                    TeacherName = item.FirstName + " " + item.LastName,
                                                                    StudentName = val.FirstName + " " + val.LastName,
                                                                    Major = i.Subject,
                                                                    Hour = i.StartTime + "-" + i.EndTime,
                                                                    Days = i.Days,
                                                                    School = item.School,
                                                                    Room = item.Room,
                                                                    Transportation = val.Transportation,
                                                                    Pair = item.Pair,
                                                                    Location = location,
                                                                    section = val.Section

                                                                });
                                                                tempTransport = val.Transportation;
                                                                tempTeacher = item.LastName;
                                                                tempDay = i.Days;
                                                                tempstu = val.Email;
                                                                sectioncheck = val.Section;
                                                                timecheck = i.StartTime + "-" + i.EndTime;
                                                                teachCount++;
                                                                //     item.TeachCount++;
                                                                check = true;
                                                            }
                                                            checkerid = 0;
                                                        }
                                                    }

                                                    else if ((i.Subject == "Science" || i.Subject == "Pre-AP Science" || i.Subject == "Environmental Science" || i.Subject=="Ecology" || i.Subject == "Sience Others") && (val.Major == "Science 4-8" ||val.Major == "Biology") && (location == false))
                                                    {
                                                        if ((tempTransport == "Yes") && (val.Transportation == "No") && (tempTeacher == item.LastName) && (tempDay == i.Days) && (teachCount == 2 || teachCount == 4) && (timecheck == i.StartTime + "-" + i.EndTime) && (val.Section == sectioncheck))
                                                        {
                                                            foreach (var ID in Results)
                                                                if (ID.StudentName == val.FirstName + " " + val.LastName)
                                                                    checkerid = 1;
                                                            if (checkerid == 0)
                                                            {
                                                                Results.Add(new TableResult()
                                                                {
                                                                    TeacherName = item.FirstName + " " + item.LastName,
                                                                    StudentName = val.FirstName + " " + val.LastName,
                                                                    Major = i.Subject,
                                                                    Hour = i.StartTime + "-" + i.EndTime,
                                                                    Days = i.Days,
                                                                    School = item.School,
                                                                    Room = item.Room,
                                                                    Transportation = val.Transportation,
                                                                    Pair = item.Pair,
                                                                    Location = location,
                                                                    section = val.Section

                                                                });
                                                                tempTransport = val.Transportation;
                                                                tempTeacher = item.LastName;
                                                                tempDay = i.Days;
                                                                tempstu = val.Email;
                                                                sectioncheck = val.Section;
                                                                timecheck = i.StartTime + "-" + i.EndTime;
                                                                teachCount++;
                                                                //     item.TeachCount++;
                                                                check = true;
                                                            }
                                                            checkerid = 0;
                                                            //                }
                                                        }
                                                    }
                                                    else if ((i.Subject == "Biology" || i.Subject == "AP Bio") && (val.Major == "Biology") && (location == false))
                                                    {
                                                        if ((tempTransport == "Yes") && (val.Transportation == "No") && (tempTeacher == item.LastName) && (tempDay == i.Days) && (teachCount == 2 || teachCount == 4) && (timecheck == i.StartTime + "-" + i.EndTime) && (val.Section == sectioncheck))
                                                        {
                                                            foreach (var ID in Results)
                                                                if (ID.StudentName == val.FirstName + " " + val.LastName)
                                                                    checkerid = 1;
                                                            if (checkerid == 0)
                                                            {
                                                                Results.Add(new TableResult()
                                                                {
                                                                    TeacherName = item.FirstName + " " + item.LastName,
                                                                    StudentName = val.FirstName + " " + val.LastName,
                                                                    Major = i.Subject,
                                                                    Hour = i.StartTime + "-" + i.EndTime,
                                                                    Days = i.Days,
                                                                    School = item.School,
                                                                    Room = item.Room,
                                                                    Transportation = val.Transportation,
                                                                    Pair = item.Pair,
                                                                    Location = location,
                                                                    section = val.Section

                                                                });
                                                                tempTransport = val.Transportation;
                                                                tempTeacher = item.LastName;
                                                                tempDay = i.Days;
                                                                tempstu = val.Email;
                                                                sectioncheck = val.Section;
                                                                timecheck = i.StartTime + "-" + i.EndTime;
                                                                teachCount++;
                                                                //     item.TeachCount++;
                                                                check = true;
                                                            }
                                                            checkerid = 0;
                                                            //                }
                                                        }
                                                    }
                                                    else if ((i.Subject == "Computer Science") && (val.Major == "Computer Science") && (location == false))
                                                    {
                                                        if ((tempTransport == "Yes") && (val.Transportation == "No") && (tempTeacher == item.LastName) && (tempDay == i.Days) && (teachCount == 2 || teachCount == 4) && (timecheck == i.StartTime + "-" + i.EndTime) && (val.Section == sectioncheck))
                                                        {
                                                            foreach (var ID in Results)
                                                                if (ID.StudentName == val.FirstName + " " + val.LastName)
                                                                    checkerid = 1;
                                                            if (checkerid == 0)
                                                            {
                                                                Results.Add(new TableResult()
                                                                {
                                                                    TeacherName = item.FirstName + " " + item.LastName,
                                                                    StudentName = val.FirstName + " " + val.LastName,
                                                                    Major = i.Subject,
                                                                    Hour = i.StartTime + "-" + i.EndTime,
                                                                    Days = i.Days,
                                                                    School = item.School,
                                                                    Room = item.Room,
                                                                    Transportation = val.Transportation,
                                                                    Pair = item.Pair,
                                                                    Location = location,
                                                                    section = val.Section

                                                                });
                                                                tempTransport = val.Transportation;
                                                                tempTeacher = item.LastName;
                                                                tempDay = i.Days;
                                                                tempstu = val.Email;
                                                                sectioncheck = val.Section;
                                                                timecheck = i.StartTime + "-" + i.EndTime;
                                                                teachCount++;
                                                                //     item.TeachCount++;
                                                                check = true;
                                                            }
                                                            checkerid = 0;
                                                            //                }
                                                        }
                                                    }
                                                    else if ((i.Subject == "Physics") && (val.Major == "Physics") && (location == false))
                                                    {
                                                        if ((tempTransport == "Yes") && (val.Transportation == "No") && (tempTeacher == item.LastName) && (tempDay == i.Days) && (teachCount == 2 || teachCount == 4) && (timecheck == i.StartTime + "-" + i.EndTime) && (val.Section == sectioncheck))
                                                        {
                                                            foreach (var ID in Results)
                                                                if (ID.StudentName == val.FirstName + " " + val.LastName)
                                                                    checkerid = 1;
                                                            if (checkerid == 0)
                                                            {
                                                                Results.Add(new TableResult()
                                                                {
                                                                    TeacherName = item.FirstName + " " + item.LastName,
                                                                    StudentName = val.FirstName + " " + val.LastName,
                                                                    Major = i.Subject,
                                                                    Hour = i.StartTime + "-" + i.EndTime,
                                                                    Days = i.Days,
                                                                    School = item.School,
                                                                    Room = item.Room,
                                                                    Transportation = val.Transportation,
                                                                    Pair = item.Pair,
                                                                    Location = location,
                                                                    section = val.Section

                                                                });
                                                                tempTransport = val.Transportation;
                                                                tempTeacher = item.LastName;
                                                                tempDay = i.Days;
                                                                tempstu = val.Email;
                                                                sectioncheck = val.Section;
                                                                timecheck = i.StartTime + "-" + i.EndTime;
                                                                teachCount++;
                                                                //     item.TeachCount++;
                                                                check = true;
                                                            }
                                                            checkerid = 0;
                                                            //                }
                                                        }
                                                    }
                                                    else if ((i.Subject == "Chemistry" || i.Subject == "Pre-AP Chemistry" || i.Subject == "AP Chemistry") && (val.Major == "Chemistry") && (location == false))
                                                    {
                                                        if ((tempTransport == "Yes") && (val.Transportation == "No") && (tempTeacher == item.LastName) && (tempDay == i.Days) && (teachCount == 2 || teachCount == 4) && (timecheck == i.StartTime + "-" + i.EndTime) && (val.Section == sectioncheck))
                                                        {
                                                            foreach (var ID in Results)
                                                                if (ID.StudentName == val.FirstName + " " + val.LastName)
                                                                    checkerid = 1;
                                                            if (checkerid == 0)
                                                            {
                                                                Results.Add(new TableResult()
                                                                {
                                                                    TeacherName = item.FirstName + " " + item.LastName,
                                                                    StudentName = val.FirstName + " " + val.LastName,
                                                                    Major = i.Subject,
                                                                    Hour = i.StartTime + "-" + i.EndTime,
                                                                    Days = i.Days,
                                                                    School = item.School,
                                                                    Room = item.Room,
                                                                    Transportation = val.Transportation,
                                                                    Pair = item.Pair,
                                                                    Location = location,
                                                                    section = val.Section

                                                                });
                                                                tempTransport = val.Transportation;
                                                                tempTeacher = item.LastName;
                                                                tempDay = i.Days;
                                                                tempstu = val.Email;
                                                                sectioncheck = val.Section;
                                                                timecheck = i.StartTime + "-" + i.EndTime;
                                                                teachCount++;
                                                                //     item.TeachCount++;
                                                                check = true;
                                                            }
                                                            checkerid = 0;
                                                                          }
                                                        }
                                                    }

                                        check = false;
                                    }
                                location = false;
                            }

                            if (teachCount > count)
                            {
                                teachCount = 1;
                                break;
                            }
                        }



                    }
                    if (Results.Count == Studentci.Count || numberOfCount >= 10)
                        Open = true;
                    else
                    {
                        if (NoConditionResult.Count < Results.Count)
                        {
                            NoConditionResult = Results.ToList();
                            numberOfCount = 0;
                        }
                        ShuffleCI(Studentci);
                        numberOfCount++;
                    }
                }
                Results = NoConditionResult.ToList();

                Done = true;
        }
        private void getMatchListStep1()
        {
            _pool.Release();
            Task[] jobs=new Task[Studentstep1.Count+Teacherstep1.Count];
             var tokenSource2 = new CancellationTokenSource();
        CancellationToken ct = tokenSource2.Token;

            for (int k = 0; k < (Studentstep1.Count + Teacherstep1.Count); k++)
            {
                 jobs[k] = Task.Factory.StartNew(() =>
                {

                    List<TableResult> Results1 = new List<TableResult>();
                    List<TableResult> NoConditionResult1 = new List<TableResult>();
                    List<StudentStep1> Studentstep11 = Studentstep1.ToList();
                    List<TeacherStep1> Teacherstep11 = Teacherstep1.ToList();
                    List<Avail> teachschedule =  new List<Avail>();
                    // Studentstep11 = Studentstep1.ToList();
                    //   NoConditionResult1.Clear();
                    //    Temporary1.Clear();
                    //    Temporary2.Clear();
                    //     StudentStep1 remv=new StudentStep1();
                    //List<TableResult> myfilter = new List<TableResult>();
                    // List<TableResult> nomatch = new List<TableResult>();
                    bool check;
                    int checkerid = 1, studentcount;
                    bool matchstart = false, matchend = false;
                    // bool Open = false;
                    string tempTransport, tempTeacher, tempDay, tempstu;
                    bool Monday = false, Tuesday = false, Wednesday = false, Thursday = false, Friday = false;
                    bool location;
                    int count = 0, numberOfCount = 0;
                    //  checkerid = 1;
                    int teachCount;
                    int timing = 0;
                    string timecheck;
                    string sectioncheck;
                    bool Open = false;
                    bool timer = false;
                    check = false;
                   // double step = Studentstep1.Count / Teacherstep1.Count;
                    //Teacherstep1 = Teacherstep1.OrderBy(p => p.Pair == "Yes").ToList();
                    //     Studentstep1 = Studentstep1.OrderBy(p => p.Transportation == "Yes").ToList();
                    //   StudentStep1 checkstudent = Studentstep1.Where(p => p.Email == "jessieking@my.unt.edu").FirstOrDefault();
                  
                    while (!Open)
                    {

                        location = false;
                        tempTransport = string.Empty;
                        tempTeacher = string.Empty;
                        tempDay = string.Empty;
                        tempstu = string.Empty;
                        teachCount = 1;
                        Results1.Clear();
                        timecheck = string.Empty;
                        sectioncheck = string.Empty;
                        checkerid = 0;
                        #region
                        /* Random order of Teachers*/
                        ShuffleTeachStep1(Teacherstep11);
                        #endregion;
                        foreach (var item in Teacherstep11)
                        {
                            //        studentcount = 0;

                            if (item.Pair == "Yes")
                            {
                                count = 4;
                            }
                            else
                            {
                                count = 2;
                            }
                            #region 
                            /* Random order schedule*/
                            teachschedule = item.Schedule.ToList();
                            ShuffleSchedule1(teachschedule);
                            #endregion;
                           
                            DateTime startstudentime, endstudentime, startteachertime, endteachertime;
                            TimeSpan differstart, differend;
                            foreach (var i in teachschedule)
                            {
                               
                                    timer = false;
                                //  tempDay = i.Days;
                                //  if (i.Subject == "Pre-AP")
                                //     i.Subject = "Pre-AP Science";
                                i.StartTime = DateTime.Parse(i.StartTime).ToString("hh:mm tt");
                                i.EndTime = DateTime.Parse(i.EndTime).ToString("hh:mm tt");
                             /*   if (Results1.Count < (Studentstep1.Count/4))
                                    timer = true;
                                if (Results1.Count > (Studentstep1.Count/4) && Results.Count < (Studentstep1.Count/2))
                                    timer = false;
                                if (Results1.Count > (Studentstep1.Count/2) && Results.Count < (3*Studentstep1.Count/4))
                                    timer = false;
                                if (Results.Count > (3*Studentstep1.Count/4))
                                    timer = true;
                               */
                                   //if (Results1.Count > )
                                   // timer = true;
                              /*  if (Results.Count < Studentstep1.Count/4)
                                    timer = true;
                                if (Results.Count > (3 * Studentstep1.Count / 4))
                                    timer = false;*/
                                startteachertime = DateTime.Parse(i.StartTime);
                                endteachertime = DateTime.Parse(i.EndTime);
                                if (timer && startteachertime > DateTime.Parse("11:59:00 AM"))
                                    timer = false;
                               
                               // if(!timer)
                                foreach (var val in Studentstep11)
                                {

                                    //    if (checkerid < int.Parse(val.Town))
                                    //   {
                                    //     ++studentcount;

                                    matchstart = false;
                                    matchend = false;
                                    Monday = false;
                                    Tuesday = false;
                                    Wednesday = false;
                                    Thursday = false;
                                    Friday = false;
                                    if ((item.District == "Denton") &&
                                        (val.DistrictDenton == 1 || val.DistrictDenton == 2 || val.DistrictDenton == 3) &&
                                        (val.Transportation == "Yes"))
                                        location = true;
                                    if ((item.District == "Lewisville") &&
                                        (val.DistrictLewisville == 1 || val.DistrictLewisville == 2 ||
                                         val.DistrictLewisville == 3) && (val.Transportation == "Yes"))
                                        location = true;
                                    if ((item.District == "McKinney") &&
                                        (val.DistrictMckinney == 1 || val.DistrictMckinney == 2 ||
                                         val.DistrictMckinney == 3) &&
                                        (val.Transportation == "Yes"))
                                        location = true;
                                    if ((item.District == "Northwest") &&
                                        (val.DistrictForthWorth == 1 || val.DistrictForthWorth == 2 ||
                                         val.DistrictForthWorth == 3) && (val.Transportation == "Yes"))
                                        location = true;
                                    if (item.District == "Denton" && val.DistrictDenton == 1)
                                        timing = 0;
                                    if (item.District == "Denton" && val.DistrictDenton == 2)
                                        timing = 0;
                                    if (item.District == "Denton" && val.DistrictDenton == 3)
                                        timing = 0;
                                    if (item.District == "Lewisville" && val.DistrictLewisville == 1)
                                        timing = 0;
                                    if (item.District == "Lewisville" && val.DistrictLewisville == 2)
                                        timing = 0;
                                    if (item.District == "Lewisville" && val.DistrictLewisville == 3)
                                        timing = 0;
                                    if (item.District == "Northwest" && val.DistrictForthWorth == 1)
                                        timing = 0;
                                    if (item.District == "Northwest" && val.DistrictForthWorth == 2)
                                        timing = 0;
                                    if (item.District == "Northwest" && val.DistrictForthWorth == 3)
                                        timing = 0;
                                    if (item.District == "McKinney" && val.DistrictMckinney == 1)
                                        timing = 0;
                                    if (item.District == "McKinney" && val.DistrictMckinney == 2)
                                        timing = 0;
                                    if (item.District == "McKinney" && val.DistrictMckinney == 3)
                                        timing = 0;

                                   
                                    foreach (var j in val.Schedule)
                                    {
                                        String[] times = j.Time.Split(separators, StringSplitOptions.None);
                                        startstudentime = DateTime.Parse(times[0]);
                                        endstudentime = DateTime.Parse(times[1]);
                                        differstart = startteachertime.Subtract(startstudentime);
                                        differend = endteachertime.Subtract(endstudentime);
                                        if ((i.Days == "Monday" || i.Days == "A Monday" || i.Days == "B Monday") &&
                                            j.Monday == true)
                                        {

                                            if (differstart.TotalMinutes >= timing)
                                                matchstart = true;
                                            if (differend.TotalMinutes <= -timing)
                                                matchend = true;
                                            if (matchstart && matchend)
                                                Monday = true;
                                        }
                                        else if ((i.Days == "Monday" || i.Days == "A Monday" || i.Days == "B Monday") &&
                                           j.Monday != true)
                                        {
                                            matchstart = false;
                                            matchend = false;
                                            //if (differstart.TotalMinutes >= timing)
                                            //    matchstart = true;
                                            //if (differend.TotalMinutes <= -timing)
                                            //    matchend = true;
                                            //if (matchstart && matchend)
                                            //    Monday = true;
                                        }
                                        if (val.Email == "Korimontgomery@my.unt.edu" && item.Email==  "lewish@lisd.net")
                                            timing = 0;
                                      
                                        if ((i.Days == "Tuesday" || i.Days == "A Tuesday" || i.Days == "B Tuesday") &&
                                            j.Tuesday == true)
                                        {
                                            if (differstart.TotalMinutes >= timing)
                                                matchstart = true;
                                            if (differend.TotalMinutes <= -timing)
                                                matchend = true;
                                            if (matchstart && matchend)
                                                Tuesday = true;
                                        }else if ((i.Days == "Tuesday" || i.Days == "A Tuesday" || i.Days == "B Tuesday") &&
                                            j.Tuesday != true)
                                        {
                                            matchstart = false;
                                            matchend = false;
                                            //if (differstart.TotalMinutes >= timing)
                                            //    matchstart = true;
                                            //if (differend.TotalMinutes <= -timing)
                                            //    matchend = true;
                                            //if (matchstart && matchend)
                                            //    Monday = true;
                                        }
                                        if ((i.Days == "Wednesday" || i.Days == "A Wednesday" || i.Days == "B Wednesday") &&
                                            j.Wednesday == true)
                                        {
                                            if (differstart.TotalMinutes >= timing)
                                                matchstart = true;
                                            if (differend.TotalMinutes <= -timing)
                                                matchend = true;
                                            if (matchstart && matchend)
                                                Wednesday = true;
                                        }
                                        else if ((i.Days == "Wednesday" || i.Days == "A Wednesday" || i.Days == "B Wednesday") &&
                                           j.Wednesday != true)
                                        {
                                            matchstart = false;
                                            matchend = false;
                                            //if (differstart.TotalMinutes >= timing)
                                            //    matchstart = true;
                                            //if (differend.TotalMinutes <= -timing)
                                            //    matchend = true;
                                            //if (matchstart && matchend)
                                            //    Monday = true;
                                        }
                                        if ((i.Days == "Thursday" || i.Days == "A Thursday" || i.Days == "B Thursday") &&
                                            j.Thursday == true)
                                        {
                                            if (differstart.TotalMinutes >= timing)
                                                matchstart = true;
                                            if (differend.TotalMinutes <= -timing)
                                                matchend = true;
                                            if (matchstart && matchend)
                                                Thursday = true;
                                        }
                                        else if ((i.Days == "Thursday" || i.Days == "A Thursday" || i.Days == "B Thursday") &&
                                          j.Thursday != true)
                                        {
                                            matchstart = false;
                                            matchend = false;
                                            //if (differstart.TotalMinutes >= timing)
                                            //    matchstart = true;
                                            //if (differend.TotalMinutes <= -timing)
                                            //    matchend = true;
                                            //if (matchstart && matchend)
                                            //    Monday = true;
                                        }
                                        if ((i.Days == "Friday" || i.Days == "A Friday" || i.Days == "B Friday") &&
                                            j.Friday == true)
                                        {
                                            if (differstart.TotalMinutes >= timing)
                                                matchstart = true;
                                            if (differend.TotalMinutes <= -timing)
                                                matchend = true;
                                            if (matchstart && matchend)
                                                Friday = true;
                                        }
                                        else if ((i.Days == "Friday" || i.Days == "A Friday" || i.Days == "B Friday") &&
                                          j.Friday != true)
                                        {
                                            matchstart = false;
                                            matchend = false;
                                            //if (differstart.TotalMinutes >= timing)
                                            //    matchstart = true;
                                            //if (differend.TotalMinutes <= -timing)
                                            //    matchend = true;
                                            //if (matchstart && matchend)
                                            //    Monday = true;
                                        }
                                        if ((Monday != false || Tuesday != false || Wednesday != false ||
                                             Thursday != false ||
                                             Friday != false) && (teachCount <= count))
                                            if ((check == false))
                                            {
                                                //     if ((teachCount <2)&&(tempstu!=val.Email)&&(tempDay==i.Days))
                                                if (location == true)
                                                {
                                                    if ((tempstu != val.Email && (tempDay != i.Days) && teachCount == 1 &&
                                                         (tempTeacher != item.FirstName + " " + item.LastName)) ||
                                                        (tempstu != val.Email && teachCount == 3 && tempDay != i.Days &&
                                                         (tempTeacher == item.FirstName + " " + item.LastName)) ||
                                                        (tempstu != val.Email && tempDay == i.Days &&
                                                         (tempTeacher == item.FirstName + " " + item.LastName) &&
                                                         (teachCount == 4 || teachCount == 2) &&
                                                         (val.Section == sectioncheck) && (timecheck == i.StartTime + "-" + i.EndTime)))
                                                    {
                                                        //  if (location == true)
                                                        // {
                                                        foreach (var ID in Results1)
                                                            if (ID.StudentName == val.FirstName + " " + val.LastName)
                                                                checkerid = 1;
                                                        if (checkerid == 0)
                                                        {
                                                            Results1.Add(new TableResult()
                                                            {
                                                                TeacherName = item.FirstName + " " + item.LastName,
                                                                StudentName = val.FirstName + " " + val.LastName,
                                                                //  Major = i.Subject,
                                                                Major = "N/A",
                                                                Hour = i.StartTime + "-" + i.EndTime,
                                                                Days = i.Days,
                                                                School = item.School,
                                                                Room = item.Room,
                                                                Transportation = val.Transportation,
                                                                Pair = item.Pair,
                                                                Location = location,
                                                                section = val.Section

                                                            });
                                                            tempTransport = val.Transportation;
                                                            tempTeacher = item.FirstName + " " + item.LastName;
                                                            tempDay = i.Days;
                                                            tempstu = val.Email;
                                                            sectioncheck = val.Section;
                                                            timecheck = i.StartTime + "-" + i.EndTime;
                                                            teachCount++;
                                                            //     teachCount++;
                                                            check = true;
                                                        }
                                                        checkerid = 0;
                                                    }
                                                }
                                                else
                                                {
                                                    if ((tempTransport == "Yes") && (val.Transportation == "No") &&
                                                        (tempTeacher == item.FirstName + " " + item.LastName) &&
                                                        (tempDay == i.Days) &&
                                                        (teachCount == 2 || teachCount == 4) &&
                                                        (timecheck == i.StartTime + "-" + i.EndTime) &&
                                                        (val.Section == sectioncheck))
                                                        //           if ((tempTransport == "Yes") && (val.Transportation == "No")&&(tempTeacher == item.LastName))
                                                    {
                                                        foreach (var ID in Results1)
                                                            if (ID.StudentName == val.FirstName + " " + val.LastName)
                                                                checkerid = 1;
                                                        if (checkerid == 0)
                                                        {
                                                            Results1.Add(new TableResult()
                                                            {
                                                                TeacherName = item.FirstName + " " + item.LastName,
                                                                StudentName = val.FirstName + " " + val.LastName,
                                                                //  Major = i.Subject,
                                                                Major = "N/A",
                                                                Hour = i.StartTime + "-" + i.EndTime,
                                                                Days = i.Days,
                                                                School = item.School,
                                                                Room = item.Room,
                                                                Transportation = val.Transportation,
                                                                Pair = item.Pair,
                                                                Location = location,
                                                                section = val.Section

                                                            });

                                                            tempTransport = val.Transportation;
                                                            tempTeacher = item.FirstName + " " + item.LastName;
                                                            tempDay = i.Days;
                                                            tempstu = val.Email;
                                                            sectioncheck = val.Section;
                                                            timecheck = i.StartTime + "-" + i.EndTime;
                                                            teachCount++;
                                                            //  teachCount++;
                                                            check = true;
                                                        }
                                                        checkerid = 0;
                                                    }

                                                }
                                                //    }

                                            }
                                        check = false;

                                    }
                                    location = false;
                                }
                                //timer block
                                //   }
                                if (teachCount > count)
                                {
                                    teachCount = 1;
                                    break;
                                }

                                //  }


                            }
                        }
                        if (Results1.Count == Studentstep11.Count)
                        {
                            Open = true;
                            NoConditionResult1 = Results1.ToList();
                            //Here update value on screen progres bar
                            if (Results.Count < Results1.Count)
                            {
                                _pool.WaitOne();
                                Results = Results1.ToList();
                                NoConditionResult = Results1.ToList();
                                _pool.Release();
                            }
                            
                        }
                            
                        else if (numberOfCount >2 )//(double)Math.Round(step,1)
                        {
                            Open = true;
                            //  bool status = true;
                            foreach (var item in NoConditionResult1)
                                if (NoConditionResult1.Where(p => p.TeacherName == item.TeacherName).Count() < 2)
                                    Open = false;
                            if (numberOfCount > 3)
                                Open = true;
                            if (!Open)
                            {
                                /*    if (numberOfCount == 100)
                                    {
                 //                       DialogResult Result = System.Windows.Forms.MessageBox.Show("DO YOU WANT TO CONTINUE COMPUTING?", "INFO",
            //MessageBoxButtons.YesNo);
                   //                     if (Result == DialogResult.Yes)
                     //                       numberOfCount = 50;
                     //                   else Open= true;
                                        Open = true;
                                    }*/
                                if (NoConditionResult1.Count < Results1.Count)
                                {
                                    NoConditionResult1 = Results1.ToList();
                                    //Here update value on screen progres bar
                                    if (Results.Count < Results1.Count)
                                    {
                                        _pool.WaitOne();
                                        Results = Results1.ToList();
                                        NoConditionResult = Results1.ToList();
                                        _pool.Release();
                                    }
                                }
                                ShuffleStep1(Studentstep11);
                                numberOfCount++;
                            }
                        }
                        else
                        {
                            if (NoConditionResult.Count < Results1.Count)
                            {
                                NoConditionResult1 = Results1.ToList();
                                numberOfCount = 0;
                                //Here update value on screen progres bar
                                if (Results.Count < Results1.Count)
                                {
                                    _pool.WaitOne();
                                    Results = Results1.ToList();
                                    NoConditionResult = Results1.ToList();
                                    _pool.Release();
                                }

                            }
                            /*   if (NoConditionResult1.Count == Results1.Count)
                               {
                                   bool status = true;
                                   foreach (var item in Results1)
                                       if (Results1.Where(p => p.TeacherName == item.TeacherName).Count() < 2)
                                           status = false;
                                   if (status)
                                       NoConditionResult1 = Results1.ToList();
                               }*/
                            ShuffleStep1(Studentstep11);
                            numberOfCount++;
                        }
                     //   ct.ThrowIfCancellationRequested();
                    }
                    Results1 = NoConditionResult1.ToList();
                    //Here update value on screen progres bar
                    if (Results.Count < Results1.Count)
                    {
                        _pool.WaitOne();
                        Results = Results1.ToList();
                        NoConditionResult = Results1.ToList();
                        _pool.Release();
                    }
                    
                    
                },tokenSource2.Token);
            }

            //TODO THREAD ALL THREAD EXIT AFTER Done=true
           
       //     Task.WaitAny(jobs);
       //     tokenSource2.Cancel();
            Task.WaitAll(jobs);
           
            foreach (Task task in jobs)
                task.Dispose();
            Done = true;
           

        }

        private void getMatchListStep111()
        {

            Results.Clear();
            NoConditionResult.Clear();
           
                    List<TableResult> Results1 = new List<TableResult>();
                    List<TableResult> NoConditionResult1 = new List<TableResult>();
                    List<TableResult> NoConditionResult2 = new List<TableResult>();
                    List<StudentStep1> Studentstep11 = new List<StudentStep1>();
                    List<StudentStep1> TransportStudentstep1=new List<StudentStep1>();
                    List<StudentStep1> NoTransportStudentstep1 = new List<StudentStep1>();
                    List<string> Sections=Studentstep1.Select(x=>x.Section).Distinct().ToList();
                    List<TeacherStep1> Teacherstep11 = Teacherstep1.ToList();
                    List<MatchingStudent> GroupingStudents = new List<MatchingStudent>();
                    List<MatchingStudent> NoGroupingStudents = new List<MatchingStudent>();
                    List<Avail> teachschedule = new List<Avail>();
                    List<string> Days = new List<string>();
                    Days.Add("Monday"); Days.Add("Tuesday"); Days.Add("Wednesday"); Days.Add("Thursday"); Days.Add("Friday");
                  
               //Get Min and Max Range for teacher time
                    DateTime RangeMinTime = (from o in Teacherstep11 where o.Schedule.Count()>0 select (o.Schedule.Select(x => DateTime.Parse(x.StartTime)).Min())).Min();
                    DateTime RangeMaxTime = (from o in Teacherstep11 where o.Schedule.Count() > 0 select (o.Schedule.Select(x => DateTime.Parse(x.EndTime)).Max())).Max();
                    int count = 0,district=0;
                    bool Open = false;
               //     bool timer = false;
                    bool location = false;
                    bool IsGroupNoTranpsportChecked, restOfTransportChecked;

               
                  
                       
                        foreach (string section in Sections)
                        {
                            Studentstep11 = Studentstep1.Where(x => x.Section.Equals(section)).ToList();
                            TransportStudentstep1 = (Studentstep11.Where(x => x.Transportation.Equals("Yes"))).ToList();
                            NoTransportStudentstep1 = Studentstep11.Where(x => x.Transportation.Equals("No")).ToList();
                            // Classify student in each list of transport yes or no
                            List<studentPriorityQueue> PriorityTransportStudents = new List<studentPriorityQueue>();
                            List<studentPriorityQueue> PriorityNoTransportStudents = new List<studentPriorityQueue>();
                            int PriorityTransportStudent, PriorityNoTransportStudent;
                            foreach (var studentTransport in TransportStudentstep1)
                            {
                                PriorityTransportStudent = 0;
                                foreach (var day in Days)
                                {

                                    if (day == "Monday")
                                        PriorityTransportStudent += (from o in studentTransport.Schedule where o.Monday select o.Time).Count();
                                    else if (day == "Tuesday")
                                        PriorityTransportStudent += (from o in studentTransport.Schedule where o.Tuesday select o.Time).Count();
                                    else if (day == "Wednesday")
                                        PriorityTransportStudent += (from o in studentTransport.Schedule where o.Wednesday select o.Time).Count();
                                    else if (day == "Thursday")
                                        PriorityTransportStudent += (from o in studentTransport.Schedule where o.Thursday select o.Time).Count();
                                    else if (day == "Friday")
                                        PriorityTransportStudent += (from o in studentTransport.Schedule where o.Friday select o.Time).Count();
                                }
                                PriorityTransportStudents.Add(new studentPriorityQueue() { priority = PriorityTransportStudent, FirstName = studentTransport.FirstName, LastName = studentTransport.LastName, email = studentTransport.Email });

                            }
                            foreach (var studentNoTransport in NoTransportStudentstep1)
                            {
                                PriorityNoTransportStudent = 0;
                                foreach (var day in Days)
                                {

                                    if (day == "Monday")
                                        PriorityNoTransportStudent += (from o in studentNoTransport.Schedule where o.Monday select o.Time).Count();
                                    else if (day == "Tuesday")
                                        PriorityNoTransportStudent += (from o in studentNoTransport.Schedule where o.Tuesday select o.Time).Count();
                                    else if (day == "Wednesday")
                                        PriorityNoTransportStudent += (from o in studentNoTransport.Schedule where o.Wednesday select o.Time).Count();
                                    else if (day == "Thursday")
                                        PriorityNoTransportStudent += (from o in studentNoTransport.Schedule where o.Thursday select o.Time).Count();
                                    else if (day == "Friday")
                                        PriorityNoTransportStudent += (from o in studentNoTransport.Schedule where o.Friday select o.Time).Count();
                                }
                                PriorityNoTransportStudents.Add(new studentPriorityQueue() { priority = PriorityNoTransportStudent, FirstName = studentNoTransport.FirstName, LastName = studentNoTransport.LastName, email = studentNoTransport.Email });

                            }
                            PriorityTransportStudents = PriorityTransportStudents.OrderBy(o => o.priority).ToList();
                            PriorityNoTransportStudents = PriorityNoTransportStudents.OrderBy(o => o.priority).ToList();
                            studentPriorityQueue removedStudentPriority = new studentPriorityQueue();
                            foreach (var NoTransportstud in PriorityNoTransportStudents)
                            {
                                StudentStep1 student = (from o in NoTransportStudentstep1 where o.Email == NoTransportstud.email select o).FirstOrDefault();

                           MatchingStudent InfoStudent=new MatchingStudent();
                                IsGroupNoTranpsportChecked = false;
                                if(removedStudentPriority.email!=NoTransportstud.email)
                                foreach (var Transportstud in PriorityTransportStudents)
                                {
                                    StudentStep1 tempstudent = (from o in TransportStudentstep1 where o.Email == Transportstud.email select o).FirstOrDefault();
                                    district=0;
                                    if (!string.IsNullOrEmpty(student.Email) && !string.IsNullOrEmpty(tempstudent.Email) && !IsGroupNoTranpsportChecked)
                                    {
                                        if ((tempstudent.DistrictDenton == 1 || tempstudent.DistrictDenton == 2 ||
                                             tempstudent.DistrictDenton == 3) &&
                                            (student.DistrictDenton == 1 || student.DistrictDenton == 2 ||
                                             student.DistrictDenton == 3 )
                                            )
                                        {
                                            location = true;
                                            district = 1;
                                        }
                                        if ((tempstudent.DistrictLewisville == 1 || tempstudent.DistrictLewisville == 2 ||
                                             tempstudent.DistrictLewisville == 3) &&
                                        (student.DistrictLewisville == 1 || student.DistrictLewisville == 2 ||
                                         student.DistrictLewisville == 3))
                                        {
                                            location = true;
                                            district = 2;
                                        }
                                        if ((tempstudent.DistrictMckinney == 1 || tempstudent.DistrictMckinney == 2 ||
                                             tempstudent.DistrictMckinney == 3) &&
                                            (student.DistrictMckinney == 1 || student.DistrictMckinney == 2 ||
                                             student.DistrictMckinney == 3)
                                            )
                                        {
                                            location = true;
                                            district = 3;
                                        }
                                        if ((tempstudent.DistrictSanger == 1 || tempstudent.DistrictSanger == 2 ||
                                            tempstudent.DistrictSanger == 3) &&
                                       (student.DistrictSanger == 1 || student.DistrictSanger == 2 ||
                                        student.DistrictSanger == 3))
                                        {
                                            location = true;
                                            district = 4;
                                        }
                                        if ((tempstudent.DistrictProsper == 1 || tempstudent.DistrictProsper == 2 ||
                                             tempstudent.DistrictProsper == 3) &&
                                            (student.DistrictProsper == 1 || student.DistrictProsper == 2 ||
                                             student.DistrictProsper == 3)
                                            )
                                        {
                                            location = true;
                                            district = 5;
                                        }
                                      /*  if ((tempstudent.DistrictForthWorth == 1 || tempstudent.DistrictForthWorth == 2 ||
                                             tempstudent.DistrictForthWorth == 3) &&
                                        (student.DistrictForthWorth == 1 || student.DistrictForthWorth == 2 ||
                                         student.DistrictForthWorth == 3))
                                        {
                                            location = true;
                                            district = 4;
                                        }*/
                                      
                                        if (location)
                                        {
                                            count = 0;
                                            foreach (string day in Days)
                                            {
                                                int selectedcount = 0;
                                                String[] times, timesEnd;
                                                List<string> selectedTimeStudent = new List<string>(), selectedTimeTempstudent = new List<string>();
                                                List<StudentTimeCollection> StudentTimeCollection = new List<StudentTimeCollection>();
                                                if (day == "Monday")
                                                {
                                                  //  selectedTimeStudent = (from o in student.Schedule where o.Monday && o.Time != "07:00 AM-07:30 AM" select o.Time).ToList();
                                                
                                                    string previoustime = null, removedTime = null; List<string> TempselectedTimeStudent=new List<string>(); int getIndex = 0;
                                                    selectedTimeStudent = (from o in student.Schedule where o.Monday select o.Time).ToList();
                                                    selectedTimeStudent = (from o in selectedTimeStudent                              
                                                                              where  DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                               && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                           select o).ToList();
                                                    selectedTimeTempstudent = (from o in tempstudent.Schedule where o.Monday select o.Time).ToList();
                                                                                                                                                  
                                                    selectedTimeTempstudent = (from o in selectedTimeTempstudent
                                                                               where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                                   && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                               select o).ToList();
                                                    selectedTimeStudent = selectedTimeStudent.Intersect(selectedTimeTempstudent).ToList();
                                                    foreach (var itemTime in selectedTimeStudent)
                                                    {
                                                          times = itemTime.Split(separators, StringSplitOptions.None);
                                                          if (times[0] == selectedTimeStudent.First().Split(separators, StringSplitOptions.None)[0])
                                                              TempselectedTimeStudent.Add(itemTime);
                                                          if (!string.IsNullOrEmpty(previoustime) && (DateTime.Parse(times[0]).Subtract(DateTime.Parse(previoustime)).TotalMinutes == 0))
                                                          {
                                                              TempselectedTimeStudent.Add(itemTime);
                                                          }else {
                                                              StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                                              TempselectedTimeStudent.Clear();
                                                              TempselectedTimeStudent.Add(itemTime);
                                                          }
                                                          previoustime = times[1];
                                                        if (times[0] == selectedTimeStudent.Last().Split(separators, StringSplitOptions.None)[0])
                                                            StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                                    }
                                                    previoustime = string.Empty;
                                                    foreach (var collectionTime in StudentTimeCollection)
                                                    {                                                    
                                                        
                                                        selectedcount = collectionTime.studentTime.Count();
                                                        #region add group of students
                                                        if (selectedcount > 1)
                                                        {

                                                            times = (from o in collectionTime.studentTime select o).First().Split(separators, StringSplitOptions.None);
                                                            // startstudentime = DateTime.Parse(times[0]);
                                                            timesEnd = (from o in collectionTime.studentTime select o).Last().Split(separators, StringSplitOptions.None);
                                                            // endstudentime = DateTime.Parse(times[1]);
                                                            if (count == 0)
                                                            {

                                                                InfoStudent.StudentName1 = student.FirstName + " " + student.LastName;
                                                                InfoStudent.StudentName2 = tempstudent.FirstName + " " + tempstudent.LastName;
                                                                InfoStudent.Day = day;
                                                                InfoStudent.StartTime = times[0];
                                                                InfoStudent.EndTime = timesEnd[1];
                                                                InfoStudent.Section = student.Section;
                                                                InfoStudent.Transportation1 = student.Transportation;
                                                                InfoStudent.Transportation2 = tempstudent.Transportation;
                                                                InfoStudent.Email1 = student.Email;
                                                                InfoStudent.Email2 = tempstudent.Email;
                                                                InfoStudent.location = district;

                                                                //  GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                                GroupingStudents.Add(InfoStudent);
                                                                IsGroupNoTranpsportChecked = true;
                                                                count++;

                                                            }
                                                            else if (count == 1)
                                                            {
                                                                GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                                InfoStudent.OtherStartTime1 = times[0];
                                                                InfoStudent.OtherEndTime1 = timesEnd[1];
                                                                InfoStudent.OtherDay1 = day;
                                                                GroupingStudents.Add(InfoStudent);
                                                                count++;
                                                            }
                                                            else if (count == 2)
                                                            {
                                                                GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                                InfoStudent.OtherStartTime2 = times[0];
                                                                InfoStudent.OtherEndTime2 = timesEnd[1];
                                                                InfoStudent.OtherDay2 = day;
                                                                GroupingStudents.Add(InfoStudent);
                                                                count++;
                                                            }
                                                            else if (count == 3)
                                                            {
                                                                GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                                InfoStudent.OtherStartTime3 = times[0];
                                                                InfoStudent.OtherEndTime3 = timesEnd[1];
                                                                InfoStudent.OtherDay3 = day;
                                                                GroupingStudents.Add(InfoStudent);
                                                                count++;
                                                            }
                                                            else if (count == 4)
                                                            {
                                                                GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                                InfoStudent.OtherStartTime4 = times[0];
                                                                InfoStudent.OtherEndTime4 = timesEnd[1];
                                                                InfoStudent.OtherDay4 = day;
                                                                GroupingStudents.Add(InfoStudent);
                                                                count++;
                                                            }
                                                            else if (count == 5)
                                                            {
                                                                IsGroupNoTranpsportChecked = true;
                                                                break;
                                                            }

                                                        }
                                                        #endregion;
                                                    }

                                                }
                                                else if (day == "Tuesday")
                                                {
                                                    string previoustime = null, removedTime = null; List<string> TempselectedTimeStudent = new List<string>(); int getIndex = 0;
                                                    selectedTimeStudent = (from o in student.Schedule where o.Tuesday select o.Time).ToList();
                                                    selectedTimeStudent = (from o in selectedTimeStudent
                                                                           where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                            && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                           select o).ToList();
                                                    selectedTimeTempstudent = (from o in tempstudent.Schedule where o.Tuesday select o.Time).ToList();

                                                    selectedTimeTempstudent = (from o in selectedTimeTempstudent
                                                                               where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                                   && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                               select o).ToList();
                                                    selectedTimeStudent = selectedTimeStudent.Intersect(selectedTimeTempstudent).ToList();
                                                    foreach (var itemTime in selectedTimeStudent)
                                                    {
                                                        times = itemTime.Split(separators, StringSplitOptions.None);
                                                        if (times[0] == selectedTimeStudent.First().Split(separators, StringSplitOptions.None)[0])
                                                            TempselectedTimeStudent.Add(itemTime);
                                                        if (!string.IsNullOrEmpty(previoustime) && (DateTime.Parse(times[0]).Subtract(DateTime.Parse(previoustime)).TotalMinutes == 0))
                                                        {
                                                            TempselectedTimeStudent.Add(itemTime);
                                                        }
                                                        else
                                                        {
                                                            StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                                            TempselectedTimeStudent.Clear();
                                                            TempselectedTimeStudent.Add(itemTime);
                                                        }
                                                        previoustime = times[1];
                                                        if (times[0] == selectedTimeStudent.Last().Split(separators, StringSplitOptions.None)[0])
                                                            StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                                    }
                                                    previoustime = string.Empty;
                                                    foreach (var collectionTime in StudentTimeCollection)
                                                    {

                                                        selectedcount = collectionTime.studentTime.Count();
                                                        #region add group of students
                                                        if (selectedcount > 1)
                                                        {

                                                            times = (from o in collectionTime.studentTime select o).First().Split(separators, StringSplitOptions.None);
                                                            // startstudentime = DateTime.Parse(times[0]);
                                                            timesEnd = (from o in collectionTime.studentTime select o).Last().Split(separators, StringSplitOptions.None);
                                                            // endstudentime = DateTime.Parse(times[1]);
                                                            if (count == 0)
                                                            {

                                                                InfoStudent.StudentName1 = student.FirstName + " " + student.LastName;
                                                                InfoStudent.StudentName2 = tempstudent.FirstName + " " + tempstudent.LastName;
                                                                InfoStudent.Day = day;
                                                                InfoStudent.StartTime = times[0];
                                                                InfoStudent.EndTime = timesEnd[1];
                                                                InfoStudent.Section = student.Section;
                                                                InfoStudent.Transportation1 = student.Transportation;
                                                                InfoStudent.Transportation2 = tempstudent.Transportation;
                                                                InfoStudent.Email1 = student.Email;
                                                                InfoStudent.Email2 = tempstudent.Email;
                                                                InfoStudent.location = district;

                                                                //  GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                                GroupingStudents.Add(InfoStudent);
                                                                IsGroupNoTranpsportChecked = true;
                                                                count++;

                                                            }
                                                            else if (count == 1)
                                                            {
                                                                GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                                InfoStudent.OtherStartTime1 = times[0];
                                                                InfoStudent.OtherEndTime1 = timesEnd[1];
                                                                InfoStudent.OtherDay1 = day;
                                                                GroupingStudents.Add(InfoStudent);
                                                                count++;
                                                            }
                                                            else if (count == 2)
                                                            {
                                                                GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                                InfoStudent.OtherStartTime2 = times[0];
                                                                InfoStudent.OtherEndTime2 = timesEnd[1];
                                                                InfoStudent.OtherDay2 = day;
                                                                GroupingStudents.Add(InfoStudent);
                                                                count++;
                                                            }
                                                            else if (count == 3)
                                                            {
                                                                GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                                InfoStudent.OtherStartTime3 = times[0];
                                                                InfoStudent.OtherEndTime3 = timesEnd[1];
                                                                InfoStudent.OtherDay3 = day;
                                                                GroupingStudents.Add(InfoStudent);
                                                                count++;
                                                            }
                                                            else if (count == 4)
                                                            {
                                                                GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                                InfoStudent.OtherStartTime4 = times[0];
                                                                InfoStudent.OtherEndTime4 = timesEnd[1];
                                                                InfoStudent.OtherDay4 = day;
                                                                GroupingStudents.Add(InfoStudent);
                                                                count++;
                                                            }
                                                            else if (count == 5)
                                                            {
                                                                IsGroupNoTranpsportChecked = true;
                                                                break;
                                                            }

                                                        }
                                                        #endregion;
                                                    }
                                                }
                                                else if (day == "Wednesday")
                                                {
                                                    string previoustime = null, removedTime = null; List<string> TempselectedTimeStudent = new List<string>(); int getIndex = 0;
                                                    selectedTimeStudent = (from o in student.Schedule where o.Wednesday select o.Time).ToList();
                                                    selectedTimeStudent = (from o in selectedTimeStudent
                                                                           where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                            && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                           select o).ToList();
                                                    selectedTimeTempstudent = (from o in tempstudent.Schedule where o.Wednesday select o.Time).ToList();

                                                    selectedTimeTempstudent = (from o in selectedTimeTempstudent
                                                                               where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                                   && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                               select o).ToList();
                                                    selectedTimeStudent = selectedTimeStudent.Intersect(selectedTimeTempstudent).ToList();
                                                    foreach (var itemTime in selectedTimeStudent)
                                                    {
                                                        times = itemTime.Split(separators, StringSplitOptions.None);
                                                        if (times[0] == selectedTimeStudent.First().Split(separators, StringSplitOptions.None)[0])
                                                            TempselectedTimeStudent.Add(itemTime);
                                                        if (!string.IsNullOrEmpty(previoustime) && (DateTime.Parse(times[0]).Subtract(DateTime.Parse(previoustime)).TotalMinutes == 0))
                                                        {
                                                            TempselectedTimeStudent.Add(itemTime);
                                                        }
                                                        else
                                                        {
                                                            StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                                            TempselectedTimeStudent.Clear();
                                                            TempselectedTimeStudent.Add(itemTime);
                                                        }
                                                        previoustime = times[1];
                                                        if (times[0] == selectedTimeStudent.Last().Split(separators, StringSplitOptions.None)[0])
                                                            StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                                    }
                                                    previoustime = string.Empty;
                                                    foreach (var collectionTime in StudentTimeCollection)
                                                    {

                                                        selectedcount = collectionTime.studentTime.Count();
                                                        #region add group of students
                                                        if (selectedcount > 1)
                                                        {

                                                            times = (from o in collectionTime.studentTime select o).First().Split(separators, StringSplitOptions.None);
                                                            // startstudentime = DateTime.Parse(times[0]);
                                                            timesEnd = (from o in collectionTime.studentTime select o).Last().Split(separators, StringSplitOptions.None);
                                                            // endstudentime = DateTime.Parse(times[1]);
                                                            if (count == 0)
                                                            {

                                                                InfoStudent.StudentName1 = student.FirstName + " " + student.LastName;
                                                                InfoStudent.StudentName2 = tempstudent.FirstName + " " + tempstudent.LastName;
                                                                InfoStudent.Day = day;
                                                                InfoStudent.StartTime = times[0];
                                                                InfoStudent.EndTime = timesEnd[1];
                                                                InfoStudent.Section = student.Section;
                                                                InfoStudent.Transportation1 = student.Transportation;
                                                                InfoStudent.Transportation2 = tempstudent.Transportation;
                                                                InfoStudent.Email1 = student.Email;
                                                                InfoStudent.Email2 = tempstudent.Email;
                                                                InfoStudent.location = district;

                                                                //  GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                                GroupingStudents.Add(InfoStudent);
                                                                IsGroupNoTranpsportChecked = true;
                                                                count++;

                                                            }
                                                            else if (count == 1)
                                                            {
                                                                GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                                InfoStudent.OtherStartTime1 = times[0];
                                                                InfoStudent.OtherEndTime1 = timesEnd[1];
                                                                InfoStudent.OtherDay1 = day;
                                                                GroupingStudents.Add(InfoStudent);
                                                                count++;
                                                            }
                                                            else if (count == 2)
                                                            {
                                                                GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                                InfoStudent.OtherStartTime2 = times[0];
                                                                InfoStudent.OtherEndTime2 = timesEnd[1];
                                                                InfoStudent.OtherDay2 = day;
                                                                GroupingStudents.Add(InfoStudent);
                                                                count++;
                                                            }
                                                            else if (count == 3)
                                                            {
                                                                GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                                InfoStudent.OtherStartTime3 = times[0];
                                                                InfoStudent.OtherEndTime3 = timesEnd[1];
                                                                InfoStudent.OtherDay3 = day;
                                                                GroupingStudents.Add(InfoStudent);
                                                                count++;
                                                            }
                                                            else if (count == 4)
                                                            {
                                                                GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                                InfoStudent.OtherStartTime4 = times[0];
                                                                InfoStudent.OtherEndTime4 = timesEnd[1];
                                                                InfoStudent.OtherDay4 = day;
                                                                GroupingStudents.Add(InfoStudent);
                                                                count++;
                                                            }
                                                            else if (count == 5)
                                                            {
                                                                IsGroupNoTranpsportChecked = true;
                                                                break;
                                                            }

                                                        }
                                                        #endregion;
                                                    }
                                                }
                                                else if (day == "Thursday")
                                                {
                                                    string previoustime = null, removedTime = null; List<string> TempselectedTimeStudent = new List<string>(); int getIndex = 0;
                                                    selectedTimeStudent = (from o in student.Schedule where o.Thursday select o.Time).ToList();
                                                    selectedTimeStudent = (from o in selectedTimeStudent
                                                                           where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                            && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                           select o).ToList();
                                                    selectedTimeTempstudent = (from o in tempstudent.Schedule where o.Thursday select o.Time).ToList();

                                                    selectedTimeTempstudent = (from o in selectedTimeTempstudent
                                                                               where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                                   && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                               select o).ToList();
                                                    selectedTimeStudent = selectedTimeStudent.Intersect(selectedTimeTempstudent).ToList();
                                                    foreach (var itemTime in selectedTimeStudent)
                                                    {
                                                        times = itemTime.Split(separators, StringSplitOptions.None);
                                                        if (times[0] == selectedTimeStudent.First().Split(separators, StringSplitOptions.None)[0])
                                                            TempselectedTimeStudent.Add(itemTime);
                                                        if (!string.IsNullOrEmpty(previoustime) && (DateTime.Parse(times[0]).Subtract(DateTime.Parse(previoustime)).TotalMinutes == 0))
                                                        {
                                                            TempselectedTimeStudent.Add(itemTime);
                                                        }
                                                        else
                                                        {
                                                            StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                                            TempselectedTimeStudent.Clear();
                                                            TempselectedTimeStudent.Add(itemTime);
                                                        }
                                                        previoustime = times[1];
                                                        if (times[0] == selectedTimeStudent.Last().Split(separators, StringSplitOptions.None)[0])
                                                            StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                                    }
                                                    previoustime = string.Empty;
                                                    foreach (var collectionTime in StudentTimeCollection)
                                                    {

                                                        selectedcount = collectionTime.studentTime.Count();
                                                        #region add group of students
                                                        if (selectedcount > 1)
                                                        {

                                                            times = (from o in collectionTime.studentTime select o).First().Split(separators, StringSplitOptions.None);
                                                            // startstudentime = DateTime.Parse(times[0]);
                                                            timesEnd = (from o in collectionTime.studentTime select o).Last().Split(separators, StringSplitOptions.None);
                                                            // endstudentime = DateTime.Parse(times[1]);
                                                            if (count == 0)
                                                            {

                                                                InfoStudent.StudentName1 = student.FirstName + " " + student.LastName;
                                                                InfoStudent.StudentName2 = tempstudent.FirstName + " " + tempstudent.LastName;
                                                                InfoStudent.Day = day;
                                                                InfoStudent.StartTime = times[0];
                                                                InfoStudent.EndTime = timesEnd[1];
                                                                InfoStudent.Section = student.Section;
                                                                InfoStudent.Transportation1 = student.Transportation;
                                                                InfoStudent.Transportation2 = tempstudent.Transportation;
                                                                InfoStudent.Email1 = student.Email;
                                                                InfoStudent.Email2 = tempstudent.Email;
                                                                InfoStudent.location = district;

                                                                //  GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                                GroupingStudents.Add(InfoStudent);
                                                                IsGroupNoTranpsportChecked = true;
                                                                count++;

                                                            }
                                                            else if (count == 1)
                                                            {
                                                                GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                                InfoStudent.OtherStartTime1 = times[0];
                                                                InfoStudent.OtherEndTime1 = timesEnd[1];
                                                                InfoStudent.OtherDay1 = day;
                                                                GroupingStudents.Add(InfoStudent);
                                                                count++;
                                                            }
                                                            else if (count == 2)
                                                            {
                                                                GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                                InfoStudent.OtherStartTime2 = times[0];
                                                                InfoStudent.OtherEndTime2 = timesEnd[1];
                                                                InfoStudent.OtherDay2 = day;
                                                                GroupingStudents.Add(InfoStudent);
                                                                count++;
                                                            }
                                                            else if (count == 3)
                                                            {
                                                                GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                                InfoStudent.OtherStartTime3 = times[0];
                                                                InfoStudent.OtherEndTime3 = timesEnd[1];
                                                                InfoStudent.OtherDay3 = day;
                                                                GroupingStudents.Add(InfoStudent);
                                                                count++;
                                                            }
                                                            else if (count == 4)
                                                            {
                                                                GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                                InfoStudent.OtherStartTime4 = times[0];
                                                                InfoStudent.OtherEndTime4 = timesEnd[1];
                                                                InfoStudent.OtherDay4 = day;
                                                                GroupingStudents.Add(InfoStudent);
                                                                count++;
                                                            }
                                                            else if (count == 5)
                                                            {
                                                                IsGroupNoTranpsportChecked = true;
                                                                break;
                                                            }

                                                        }
                                                        #endregion;
                                                    }
                                                }
                                                else if (day == "Friday")
                                                {
                                                    string previoustime = null, removedTime = null; List<string> TempselectedTimeStudent = new List<string>(); int getIndex = 0;
                                                    selectedTimeStudent = (from o in student.Schedule where o.Friday select o.Time).ToList();
                                                    selectedTimeStudent = (from o in selectedTimeStudent
                                                                           where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                            && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                           select o).ToList();
                                                    selectedTimeTempstudent = (from o in tempstudent.Schedule where o.Friday select o.Time).ToList();

                                                    selectedTimeTempstudent = (from o in selectedTimeTempstudent
                                                                               where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                                   && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                               select o).ToList();
                                                    selectedTimeStudent = selectedTimeStudent.Intersect(selectedTimeTempstudent).ToList();
                                                    foreach (var itemTime in selectedTimeStudent)
                                                    {
                                                        times = itemTime.Split(separators, StringSplitOptions.None);
                                                        if (times[0] == selectedTimeStudent.First().Split(separators, StringSplitOptions.None)[0])
                                                            TempselectedTimeStudent.Add(itemTime);
                                                        if (!string.IsNullOrEmpty(previoustime) && (DateTime.Parse(times[0]).Subtract(DateTime.Parse(previoustime)).TotalMinutes == 0))
                                                        {
                                                            TempselectedTimeStudent.Add(itemTime);
                                                        }
                                                        else
                                                        {
                                                            StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                                            TempselectedTimeStudent.Clear();
                                                            TempselectedTimeStudent.Add(itemTime);
                                                        }
                                                        previoustime = times[1];
                                                        if (times[0] == selectedTimeStudent.Last().Split(separators, StringSplitOptions.None)[0])
                                                            StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                                    }
                                                    previoustime = string.Empty;
                                                    foreach (var collectionTime in StudentTimeCollection)
                                                    {

                                                        selectedcount = collectionTime.studentTime.Count();
                                                        #region add group of students
                                                        if (selectedcount > 1)
                                                        {

                                                            times = (from o in collectionTime.studentTime select o).First().Split(separators, StringSplitOptions.None);
                                                            // startstudentime = DateTime.Parse(times[0]);
                                                            timesEnd = (from o in collectionTime.studentTime select o).Last().Split(separators, StringSplitOptions.None);
                                                            // endstudentime = DateTime.Parse(times[1]);
                                                            if (count == 0)
                                                            {

                                                                InfoStudent.StudentName1 = student.FirstName + " " + student.LastName;
                                                                InfoStudent.StudentName2 = tempstudent.FirstName + " " + tempstudent.LastName;
                                                                InfoStudent.Day = day;
                                                                InfoStudent.StartTime = times[0];
                                                                InfoStudent.EndTime = timesEnd[1];
                                                                InfoStudent.Section = student.Section;
                                                                InfoStudent.Transportation1 = student.Transportation;
                                                                InfoStudent.Transportation2 = tempstudent.Transportation;
                                                                InfoStudent.Email1 = student.Email;
                                                                InfoStudent.Email2 = tempstudent.Email;
                                                                InfoStudent.location = district;

                                                                //  GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                                GroupingStudents.Add(InfoStudent);
                                                                IsGroupNoTranpsportChecked = true;
                                                                count++;

                                                            }
                                                            else if (count == 1)
                                                            {
                                                                GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                                InfoStudent.OtherStartTime1 = times[0];
                                                                InfoStudent.OtherEndTime1 = timesEnd[1];
                                                                InfoStudent.OtherDay1 = day;
                                                                GroupingStudents.Add(InfoStudent);
                                                                count++;
                                                            }
                                                            else if (count == 2)
                                                            {
                                                                GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                                InfoStudent.OtherStartTime2 = times[0];
                                                                InfoStudent.OtherEndTime2 = timesEnd[1];
                                                                InfoStudent.OtherDay2 = day;
                                                                GroupingStudents.Add(InfoStudent);
                                                                count++;
                                                            }
                                                            else if (count == 3)
                                                            {
                                                                GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                                InfoStudent.OtherStartTime3 = times[0];
                                                                InfoStudent.OtherEndTime3 = timesEnd[1];
                                                                InfoStudent.OtherDay3 = day;
                                                                GroupingStudents.Add(InfoStudent);
                                                                count++;
                                                            }
                                                            else if (count == 4)
                                                            {
                                                                GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                                InfoStudent.OtherStartTime4 = times[0];
                                                                InfoStudent.OtherEndTime4 = timesEnd[1];
                                                                InfoStudent.OtherDay4 = day;
                                                                GroupingStudents.Add(InfoStudent);
                                                                count++;
                                                            }
                                                            else if (count == 5)
                                                            {
                                                                IsGroupNoTranpsportChecked = true;
                                                                break;
                                                            }

                                                        }
                                                        #endregion;
                                                    }
                                                }
                                                #region unused
                                                /*               if (selectedcount> 1)
                                                {

                                                    times = (from o in selectedTimeStudent select o).First().Split(separators, StringSplitOptions.None);
                                                   // startstudentime = DateTime.Parse(times[0]);
                                                    timesEnd = (from o in selectedTimeStudent select o).Last().Split(separators, StringSplitOptions.None);
                                                   // endstudentime = DateTime.Parse(times[1]);
                                                    if (count == 0)
                                                    {
                                                       
                                                              InfoStudent.StudentName1 = student.FirstName + " " + student.LastName;
                                                             InfoStudent.StudentName2 = tempstudent.FirstName + " " + tempstudent.LastName;
                                                             InfoStudent.Day = day;
                                                             InfoStudent.StartTime = times[0];
                                                             InfoStudent.EndTime = timesEnd[1];
                                                             InfoStudent.Section = student.Section;
                                                             InfoStudent.Transportation1 = student.Transportation;
                                                             InfoStudent.Transportation2 = tempstudent.Transportation;
                                                             InfoStudent.Email1 = student.Email;
                                                             InfoStudent.Email2 = tempstudent.Email;
                                                             InfoStudent.location = district;

                                                           //  GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        GroupingStudents.Add(InfoStudent);
                                                        IsGroupNoTranpsportChecked = true;
                                                        count++;

                                                    }
                                                    else if (count == 1)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents  where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime1=times[0];
                                                        InfoStudent.OtherEndTime1=timesEnd[1];
                                                        InfoStudent.OtherDay1=day;
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 2)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime2 = times[0];
                                                        InfoStudent.OtherEndTime2 = timesEnd[1];
                                                        InfoStudent.OtherDay2 = day;
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 3)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime3 = times[0];
                                                        InfoStudent.OtherEndTime3 = timesEnd[1];
                                                        InfoStudent.OtherDay3 = day;
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 4)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime4 = times[0];
                                                        InfoStudent.OtherEndTime4 = timesEnd[1];
                                                        InfoStudent.OtherDay4 = day;
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 5)
                                                    {
                                                        IsGroupNoTranpsportChecked = true;
                                                        break;
                                                    }

                                                }*/
                                                #endregion;
                                                if (IsGroupNoTranpsportChecked && count==5)
                                                    break;
                                    
                                            }
                                        }
                                    }
                                    if (IsGroupNoTranpsportChecked)
                                    {
                                        //TransportStudentstep1.Remove(tempstudent);
                                        removedStudentPriority = Transportstud;
                                        break;
                                    }
                                }
                                if (IsGroupNoTranpsportChecked)
                                {
                                    //PriorityTransportStudents = (from o in PriorityTransportStudents where o.email != removedStudentPriority.email select o).ToList();
                                    PriorityTransportStudents.Remove(removedStudentPriority);
                                    removedStudentPriority = NoTransportstud;
                                }


                            }
                            #region Rest of Transport Students
                             PriorityTransportStudents = PriorityTransportStudents.OrderBy(o => o.priority).ToList();
                             foreach (var restTransportStudent in PriorityTransportStudents)
                             {
                                 StudentStep1 student = (from o in TransportStudentstep1 where o.Email == restTransportStudent.email select o).FirstOrDefault();
                                 MatchingStudent InfoStudent = new MatchingStudent();
                                 restOfTransportChecked = false;
                                // if (removedStudentPriority.email != restTransportStudent.email)
                                     foreach (var tempRestTransportStudent in PriorityTransportStudents)
                                     {
                                         if((from o in GroupingStudents where (o.Email2==tempRestTransportStudent.email || o.Email2==restTransportStudent.email || o.Email1==restTransportStudent.email || o.Email1==tempRestTransportStudent.email) select o).Count()<=0){
                                         StudentStep1 tempstudent = (from o in TransportStudentstep1 where o.Email == tempRestTransportStudent.email select o).FirstOrDefault();
                                         district = 0;
                                             if (!string.IsNullOrEmpty(student.Email) && !string.IsNullOrEmpty(tempstudent.Email) && student.Email!=tempstudent.Email)
                                         {
                                             if ((tempstudent.DistrictDenton == 1 || tempstudent.DistrictDenton == 2 ||
                                                  tempstudent.DistrictDenton == 3) &&
                                                 (student.DistrictDenton == 1 || student.DistrictDenton == 2 ||
                                                  student.DistrictDenton == 3)
                                                 )
                                             {
                                                 location = true;
                                                 district = 1;
                                             }
                                             if ((tempstudent.DistrictLewisville == 1 || tempstudent.DistrictLewisville == 2 ||
                                                  tempstudent.DistrictLewisville == 3) &&
                                             (student.DistrictLewisville == 1 || student.DistrictLewisville == 2 ||
                                              student.DistrictLewisville == 3))
                                             {
                                                 location = true;
                                                 district = 2;
                                             }
                                             if ((tempstudent.DistrictMckinney == 1 || tempstudent.DistrictMckinney == 2 ||
                                                  tempstudent.DistrictMckinney == 3) &&
                                                 (student.DistrictMckinney == 1 || student.DistrictMckinney == 2 ||
                                                  student.DistrictMckinney == 3)
                                                 )
                                             {
                                                 location = true;
                                                 district = 3;
                                             }
                                             if ((tempstudent.DistrictSanger == 1 || tempstudent.DistrictSanger == 2 ||
                                       tempstudent.DistrictSanger == 3) &&
                                  (student.DistrictSanger == 1 || student.DistrictSanger == 2 ||
                                   student.DistrictSanger == 3))
                                             {
                                                 location = true;
                                                 district = 4;
                                             }
                                             if ((tempstudent.DistrictProsper == 1 || tempstudent.DistrictProsper == 2 ||
                                                  tempstudent.DistrictProsper == 3) &&
                                                 (student.DistrictProsper == 1 || student.DistrictProsper == 2 ||
                                                  student.DistrictProsper == 3)
                                                 )
                                             {
                                                 location = true;
                                                 district = 5;
                                             }
                                          /*   if ((tempstudent.DistrictForthWorth == 1 || tempstudent.DistrictForthWorth == 2 ||
                                                  tempstudent.DistrictForthWorth == 3) &&
                                             (student.DistrictForthWorth == 1 || student.DistrictForthWorth == 2 ||
                                              student.DistrictForthWorth == 3))
                                             {
                                                 location = true;
                                                 district = 4;
                                             }*/
                                          
                                             if (location)
                                             {
                                                 count = 0;
                                                /* DateTime RangeSartTimeStudent=DateTime.Parse(student.Schedule.Select(x=>x.Time).First().Split(separators, StringSplitOptions.None)[0]);
                                                  DateTime RangeEndTimeStudent=DateTime.Parse(tempstudent.Schedule.Select(x=>x.Time).Last().Split(separators, StringSplitOptions.None)[1]);*/
                                                 foreach (string day in Days)
                                                 {
                                                     int selectedcount = 0;
                                                     String[] times, timesEnd;
                                                     List<string> selectedTimeStudent = new List<string>(), selectedTimeTempstudent = new List<string>();
                                                     List<StudentTimeCollection> StudentTimeCollection = new List<StudentTimeCollection>();
                                                     if (day == "Monday")
                                                     {
                                                         //  selectedTimeStudent = (from o in student.Schedule where o.Monday && o.Time != "07:00 AM-07:30 AM" select o.Time).ToList();

                                                         string previoustime = null, removedTime = null; List<string> TempselectedTimeStudent = new List<string>(); int getIndex = 0;
                                                         selectedTimeStudent = (from o in student.Schedule where o.Monday select o.Time).ToList();
                                                         selectedTimeStudent = (from o in selectedTimeStudent
                                                                                where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                                 && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                                select o).ToList();
                                                         selectedTimeTempstudent = (from o in tempstudent.Schedule where o.Monday select o.Time).ToList();

                                                         selectedTimeTempstudent = (from o in selectedTimeTempstudent
                                                                                    where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                                        && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                                    select o).ToList();
                                                         selectedTimeStudent = selectedTimeStudent.Intersect(selectedTimeTempstudent).ToList();
                                                         foreach (var itemTime in selectedTimeStudent)
                                                         {
                                                             times = itemTime.Split(separators, StringSplitOptions.None);
                                                             if (times[0] == selectedTimeStudent.First().Split(separators, StringSplitOptions.None)[0])
                                                                 TempselectedTimeStudent.Add(itemTime);
                                                             if (!string.IsNullOrEmpty(previoustime) && (DateTime.Parse(times[0]).Subtract(DateTime.Parse(previoustime)).TotalMinutes == 0))
                                                             {
                                                                 TempselectedTimeStudent.Add(itemTime);
                                                             }
                                                             else
                                                             {
                                                                 StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                                                 TempselectedTimeStudent.Clear();
                                                                 TempselectedTimeStudent.Add(itemTime);
                                                             }
                                                             previoustime = times[1];
                                                             if (times[0] == selectedTimeStudent.Last().Split(separators, StringSplitOptions.None)[0])
                                                                 StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                                         }
                                                         previoustime = string.Empty;
                                                         foreach (var collectionTime in StudentTimeCollection)
                                                         {

                                                             selectedcount = collectionTime.studentTime.Count();
                                                             #region add group of students
                                                             if (selectedcount > 1)
                                                             {

                                                                 times = (from o in collectionTime.studentTime select o).First().Split(separators, StringSplitOptions.None);
                                                                 // startstudentime = DateTime.Parse(times[0]);
                                                                 timesEnd = (from o in collectionTime.studentTime select o).Last().Split(separators, StringSplitOptions.None);
                                                                 // endstudentime = DateTime.Parse(times[1]);
                                                                 if (count == 0)
                                                                 {

                                                                     InfoStudent.StudentName1 = student.FirstName + " " + student.LastName;
                                                                     InfoStudent.StudentName2 = tempstudent.FirstName + " " + tempstudent.LastName;
                                                                     InfoStudent.Day = day;
                                                                     InfoStudent.StartTime = times[0];
                                                                     InfoStudent.EndTime = timesEnd[1];
                                                                     InfoStudent.Section = student.Section;
                                                                     InfoStudent.Transportation1 = student.Transportation;
                                                                     InfoStudent.Transportation2 = tempstudent.Transportation;
                                                                     InfoStudent.Email1 = student.Email;
                                                                     InfoStudent.Email2 = tempstudent.Email;
                                                                     InfoStudent.location = district;

                                                                     //  GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                                     GroupingStudents.Add(InfoStudent);
                                                                     IsGroupNoTranpsportChecked = true;
                                                                     count++;

                                                                 }
                                                                 else if (count == 1)
                                                                 {
                                                                     GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                                     InfoStudent.OtherStartTime1 = times[0];
                                                                     InfoStudent.OtherEndTime1 = timesEnd[1];
                                                                     InfoStudent.OtherDay1 = day;
                                                                     GroupingStudents.Add(InfoStudent);
                                                                     count++;
                                                                 }
                                                                 else if (count == 2)
                                                                 {
                                                                     GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                                     InfoStudent.OtherStartTime2 = times[0];
                                                                     InfoStudent.OtherEndTime2 = timesEnd[1];
                                                                     InfoStudent.OtherDay2 = day;
                                                                     GroupingStudents.Add(InfoStudent);
                                                                     count++;
                                                                 }
                                                                 else if (count == 3)
                                                                 {
                                                                     GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                                     InfoStudent.OtherStartTime3 = times[0];
                                                                     InfoStudent.OtherEndTime3 = timesEnd[1];
                                                                     InfoStudent.OtherDay3 = day;
                                                                     GroupingStudents.Add(InfoStudent);
                                                                     count++;
                                                                 }
                                                                 else if (count == 4)
                                                                 {
                                                                     GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                                     InfoStudent.OtherStartTime4 = times[0];
                                                                     InfoStudent.OtherEndTime4 = timesEnd[1];
                                                                     InfoStudent.OtherDay4 = day;
                                                                     GroupingStudents.Add(InfoStudent);
                                                                     count++;
                                                                 }
                                                                 else if (count == 5)
                                                                 {
                                                                     IsGroupNoTranpsportChecked = true;
                                                                     break;
                                                                 }

                                                             }
                                                             #endregion;
                                                         }

                                                     }
                                                     else if (day == "Tuesday")
                                                     {
                                                         string previoustime = null, removedTime = null; List<string> TempselectedTimeStudent = new List<string>(); int getIndex = 0;
                                                         selectedTimeStudent = (from o in student.Schedule where o.Tuesday select o.Time).ToList();
                                                         selectedTimeStudent = (from o in selectedTimeStudent
                                                                                where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                                 && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                                select o).ToList();
                                                         selectedTimeTempstudent = (from o in tempstudent.Schedule where o.Tuesday select o.Time).ToList();

                                                         selectedTimeTempstudent = (from o in selectedTimeTempstudent
                                                                                    where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                                        && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                                    select o).ToList();
                                                         selectedTimeStudent = selectedTimeStudent.Intersect(selectedTimeTempstudent).ToList();
                                                         foreach (var itemTime in selectedTimeStudent)
                                                         {
                                                             times = itemTime.Split(separators, StringSplitOptions.None);
                                                             if (times[0] == selectedTimeStudent.First().Split(separators, StringSplitOptions.None)[0])
                                                                 TempselectedTimeStudent.Add(itemTime);
                                                             if (!string.IsNullOrEmpty(previoustime) && (DateTime.Parse(times[0]).Subtract(DateTime.Parse(previoustime)).TotalMinutes == 0))
                                                             {
                                                                 TempselectedTimeStudent.Add(itemTime);
                                                             }
                                                             else
                                                             {
                                                                 StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                                                 TempselectedTimeStudent.Clear();
                                                                 TempselectedTimeStudent.Add(itemTime);
                                                             }
                                                             previoustime = times[1];
                                                             if (times[0] == selectedTimeStudent.Last().Split(separators, StringSplitOptions.None)[0])
                                                                 StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                                         }
                                                         previoustime = string.Empty;
                                                         foreach (var collectionTime in StudentTimeCollection)
                                                         {

                                                             selectedcount = collectionTime.studentTime.Count();
                                                             #region add group of students
                                                             if (selectedcount > 1)
                                                             {

                                                                 times = (from o in collectionTime.studentTime select o).First().Split(separators, StringSplitOptions.None);
                                                                 // startstudentime = DateTime.Parse(times[0]);
                                                                 timesEnd = (from o in collectionTime.studentTime select o).Last().Split(separators, StringSplitOptions.None);
                                                                 // endstudentime = DateTime.Parse(times[1]);
                                                                 if (count == 0)
                                                                 {

                                                                     InfoStudent.StudentName1 = student.FirstName + " " + student.LastName;
                                                                     InfoStudent.StudentName2 = tempstudent.FirstName + " " + tempstudent.LastName;
                                                                     InfoStudent.Day = day;
                                                                     InfoStudent.StartTime = times[0];
                                                                     InfoStudent.EndTime = timesEnd[1];
                                                                     InfoStudent.Section = student.Section;
                                                                     InfoStudent.Transportation1 = student.Transportation;
                                                                     InfoStudent.Transportation2 = tempstudent.Transportation;
                                                                     InfoStudent.Email1 = student.Email;
                                                                     InfoStudent.Email2 = tempstudent.Email;
                                                                     InfoStudent.location = district;

                                                                     //  GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                                     GroupingStudents.Add(InfoStudent);
                                                                     IsGroupNoTranpsportChecked = true;
                                                                     count++;

                                                                 }
                                                                 else if (count == 1)
                                                                 {
                                                                     GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                                     InfoStudent.OtherStartTime1 = times[0];
                                                                     InfoStudent.OtherEndTime1 = timesEnd[1];
                                                                     InfoStudent.OtherDay1 = day;
                                                                     GroupingStudents.Add(InfoStudent);
                                                                     count++;
                                                                 }
                                                                 else if (count == 2)
                                                                 {
                                                                     GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                                     InfoStudent.OtherStartTime2 = times[0];
                                                                     InfoStudent.OtherEndTime2 = timesEnd[1];
                                                                     InfoStudent.OtherDay2 = day;
                                                                     GroupingStudents.Add(InfoStudent);
                                                                     count++;
                                                                 }
                                                                 else if (count == 3)
                                                                 {
                                                                     GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                                     InfoStudent.OtherStartTime3 = times[0];
                                                                     InfoStudent.OtherEndTime3 = timesEnd[1];
                                                                     InfoStudent.OtherDay3 = day;
                                                                     GroupingStudents.Add(InfoStudent);
                                                                     count++;
                                                                 }
                                                                 else if (count == 4)
                                                                 {
                                                                     GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                                     InfoStudent.OtherStartTime4 = times[0];
                                                                     InfoStudent.OtherEndTime4 = timesEnd[1];
                                                                     InfoStudent.OtherDay4 = day;
                                                                     GroupingStudents.Add(InfoStudent);
                                                                     count++;
                                                                 }
                                                                 else if (count == 5)
                                                                 {
                                                                     IsGroupNoTranpsportChecked = true;
                                                                     break;
                                                                 }

                                                             }
                                                             #endregion;
                                                         }
                                                     }
                                                     else if (day == "Wednesday")
                                                     {
                                                         string previoustime = null, removedTime = null; List<string> TempselectedTimeStudent = new List<string>(); int getIndex = 0;
                                                         selectedTimeStudent = (from o in student.Schedule where o.Wednesday select o.Time).ToList();
                                                         selectedTimeStudent = (from o in selectedTimeStudent
                                                                                where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                                 && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                                select o).ToList();
                                                         selectedTimeTempstudent = (from o in tempstudent.Schedule where o.Wednesday select o.Time).ToList();

                                                         selectedTimeTempstudent = (from o in selectedTimeTempstudent
                                                                                    where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                                        && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                                    select o).ToList();
                                                         selectedTimeStudent = selectedTimeStudent.Intersect(selectedTimeTempstudent).ToList();
                                                         foreach (var itemTime in selectedTimeStudent)
                                                         {
                                                             times = itemTime.Split(separators, StringSplitOptions.None);
                                                             if (times[0] == selectedTimeStudent.First().Split(separators, StringSplitOptions.None)[0])
                                                                 TempselectedTimeStudent.Add(itemTime);
                                                             if (!string.IsNullOrEmpty(previoustime) && (DateTime.Parse(times[0]).Subtract(DateTime.Parse(previoustime)).TotalMinutes == 0))
                                                             {
                                                                 TempselectedTimeStudent.Add(itemTime);
                                                             }
                                                             else
                                                             {
                                                                 StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                                                 TempselectedTimeStudent.Clear();
                                                                 TempselectedTimeStudent.Add(itemTime);
                                                             }
                                                             previoustime = times[1];
                                                             if (times[0] == selectedTimeStudent.Last().Split(separators, StringSplitOptions.None)[0])
                                                                 StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                                         }
                                                         previoustime = string.Empty;
                                                         foreach (var collectionTime in StudentTimeCollection)
                                                         {

                                                             selectedcount = collectionTime.studentTime.Count();
                                                             #region add group of students
                                                             if (selectedcount > 1)
                                                             {

                                                                 times = (from o in collectionTime.studentTime select o).First().Split(separators, StringSplitOptions.None);
                                                                 // startstudentime = DateTime.Parse(times[0]);
                                                                 timesEnd = (from o in collectionTime.studentTime select o).Last().Split(separators, StringSplitOptions.None);
                                                                 // endstudentime = DateTime.Parse(times[1]);
                                                                 if (count == 0)
                                                                 {

                                                                     InfoStudent.StudentName1 = student.FirstName + " " + student.LastName;
                                                                     InfoStudent.StudentName2 = tempstudent.FirstName + " " + tempstudent.LastName;
                                                                     InfoStudent.Day = day;
                                                                     InfoStudent.StartTime = times[0];
                                                                     InfoStudent.EndTime = timesEnd[1];
                                                                     InfoStudent.Section = student.Section;
                                                                     InfoStudent.Transportation1 = student.Transportation;
                                                                     InfoStudent.Transportation2 = tempstudent.Transportation;
                                                                     InfoStudent.Email1 = student.Email;
                                                                     InfoStudent.Email2 = tempstudent.Email;
                                                                     InfoStudent.location = district;

                                                                     //  GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                                     GroupingStudents.Add(InfoStudent);
                                                                     IsGroupNoTranpsportChecked = true;
                                                                     count++;

                                                                 }
                                                                 else if (count == 1)
                                                                 {
                                                                     GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                                     InfoStudent.OtherStartTime1 = times[0];
                                                                     InfoStudent.OtherEndTime1 = timesEnd[1];
                                                                     InfoStudent.OtherDay1 = day;
                                                                     GroupingStudents.Add(InfoStudent);
                                                                     count++;
                                                                 }
                                                                 else if (count == 2)
                                                                 {
                                                                     GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                                     InfoStudent.OtherStartTime2 = times[0];
                                                                     InfoStudent.OtherEndTime2 = timesEnd[1];
                                                                     InfoStudent.OtherDay2 = day;
                                                                     GroupingStudents.Add(InfoStudent);
                                                                     count++;
                                                                 }
                                                                 else if (count == 3)
                                                                 {
                                                                     GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                                     InfoStudent.OtherStartTime3 = times[0];
                                                                     InfoStudent.OtherEndTime3 = timesEnd[1];
                                                                     InfoStudent.OtherDay3 = day;
                                                                     GroupingStudents.Add(InfoStudent);
                                                                     count++;
                                                                 }
                                                                 else if (count == 4)
                                                                 {
                                                                     GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                                     InfoStudent.OtherStartTime4 = times[0];
                                                                     InfoStudent.OtherEndTime4 = timesEnd[1];
                                                                     InfoStudent.OtherDay4 = day;
                                                                     GroupingStudents.Add(InfoStudent);
                                                                     count++;
                                                                 }
                                                                 else if (count == 5)
                                                                 {
                                                                     IsGroupNoTranpsportChecked = true;
                                                                     break;
                                                                 }

                                                             }
                                                             #endregion;
                                                         }
                                                     }
                                                     else if (day == "Thursday")
                                                     {
                                                         string previoustime = null, removedTime = null; List<string> TempselectedTimeStudent = new List<string>(); int getIndex = 0;
                                                         selectedTimeStudent = (from o in student.Schedule where o.Thursday select o.Time).ToList();
                                                         selectedTimeStudent = (from o in selectedTimeStudent
                                                                                where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                                 && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                                select o).ToList();
                                                         selectedTimeTempstudent = (from o in tempstudent.Schedule where o.Thursday select o.Time).ToList();

                                                         selectedTimeTempstudent = (from o in selectedTimeTempstudent
                                                                                    where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                                        && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                                    select o).ToList();
                                                         selectedTimeStudent = selectedTimeStudent.Intersect(selectedTimeTempstudent).ToList();
                                                         foreach (var itemTime in selectedTimeStudent)
                                                         {
                                                             times = itemTime.Split(separators, StringSplitOptions.None);
                                                             if (times[0] == selectedTimeStudent.First().Split(separators, StringSplitOptions.None)[0])
                                                                 TempselectedTimeStudent.Add(itemTime);
                                                             if (!string.IsNullOrEmpty(previoustime) && (DateTime.Parse(times[0]).Subtract(DateTime.Parse(previoustime)).TotalMinutes == 0))
                                                             {
                                                                 TempselectedTimeStudent.Add(itemTime);
                                                             }
                                                             else
                                                             {
                                                                 StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                                                 TempselectedTimeStudent.Clear();
                                                                 TempselectedTimeStudent.Add(itemTime);
                                                             }
                                                             previoustime = times[1];
                                                             if (times[0] == selectedTimeStudent.Last().Split(separators, StringSplitOptions.None)[0])
                                                                 StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                                         }
                                                         previoustime = string.Empty;
                                                         foreach (var collectionTime in StudentTimeCollection)
                                                         {

                                                             selectedcount = collectionTime.studentTime.Count();
                                                             #region add group of students
                                                             if (selectedcount > 1)
                                                             {

                                                                 times = (from o in collectionTime.studentTime select o).First().Split(separators, StringSplitOptions.None);
                                                                 // startstudentime = DateTime.Parse(times[0]);
                                                                 timesEnd = (from o in collectionTime.studentTime select o).Last().Split(separators, StringSplitOptions.None);
                                                                 // endstudentime = DateTime.Parse(times[1]);
                                                                 if (count == 0)
                                                                 {

                                                                     InfoStudent.StudentName1 = student.FirstName + " " + student.LastName;
                                                                     InfoStudent.StudentName2 = tempstudent.FirstName + " " + tempstudent.LastName;
                                                                     InfoStudent.Day = day;
                                                                     InfoStudent.StartTime = times[0];
                                                                     InfoStudent.EndTime = timesEnd[1];
                                                                     InfoStudent.Section = student.Section;
                                                                     InfoStudent.Transportation1 = student.Transportation;
                                                                     InfoStudent.Transportation2 = tempstudent.Transportation;
                                                                     InfoStudent.Email1 = student.Email;
                                                                     InfoStudent.Email2 = tempstudent.Email;
                                                                     InfoStudent.location = district;

                                                                     //  GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                                     GroupingStudents.Add(InfoStudent);
                                                                     IsGroupNoTranpsportChecked = true;
                                                                     count++;

                                                                 }
                                                                 else if (count == 1)
                                                                 {
                                                                     GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                                     InfoStudent.OtherStartTime1 = times[0];
                                                                     InfoStudent.OtherEndTime1 = timesEnd[1];
                                                                     InfoStudent.OtherDay1 = day;
                                                                     GroupingStudents.Add(InfoStudent);
                                                                     count++;
                                                                 }
                                                                 else if (count == 2)
                                                                 {
                                                                     GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                                     InfoStudent.OtherStartTime2 = times[0];
                                                                     InfoStudent.OtherEndTime2 = timesEnd[1];
                                                                     InfoStudent.OtherDay2 = day;
                                                                     GroupingStudents.Add(InfoStudent);
                                                                     count++;
                                                                 }
                                                                 else if (count == 3)
                                                                 {
                                                                     GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                                     InfoStudent.OtherStartTime3 = times[0];
                                                                     InfoStudent.OtherEndTime3 = timesEnd[1];
                                                                     InfoStudent.OtherDay3 = day;
                                                                     GroupingStudents.Add(InfoStudent);
                                                                     count++;
                                                                 }
                                                                 else if (count == 4)
                                                                 {
                                                                     GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                                     InfoStudent.OtherStartTime4 = times[0];
                                                                     InfoStudent.OtherEndTime4 = timesEnd[1];
                                                                     InfoStudent.OtherDay4 = day;
                                                                     GroupingStudents.Add(InfoStudent);
                                                                     count++;
                                                                 }
                                                                 else if (count == 5)
                                                                 {
                                                                     IsGroupNoTranpsportChecked = true;
                                                                     break;
                                                                 }

                                                             }
                                                             #endregion;
                                                         }
                                                     }
                                                     else if (day == "Friday")
                                                     {
                                                         string previoustime = null, removedTime = null; List<string> TempselectedTimeStudent = new List<string>(); int getIndex = 0;
                                                         selectedTimeStudent = (from o in student.Schedule where o.Friday select o.Time).ToList();
                                                         selectedTimeStudent = (from o in selectedTimeStudent
                                                                                where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                                 && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                                select o).ToList();
                                                         selectedTimeTempstudent = (from o in tempstudent.Schedule where o.Friday select o.Time).ToList();

                                                         selectedTimeTempstudent = (from o in selectedTimeTempstudent
                                                                                    where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                                        && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                                    select o).ToList();
                                                         selectedTimeStudent = selectedTimeStudent.Intersect(selectedTimeTempstudent).ToList();
                                                         foreach (var itemTime in selectedTimeStudent)
                                                         {
                                                             times = itemTime.Split(separators, StringSplitOptions.None);
                                                             if (times[0] == selectedTimeStudent.First().Split(separators, StringSplitOptions.None)[0])
                                                                 TempselectedTimeStudent.Add(itemTime);
                                                             if (!string.IsNullOrEmpty(previoustime) && (DateTime.Parse(times[0]).Subtract(DateTime.Parse(previoustime)).TotalMinutes == 0))
                                                             {
                                                                 TempselectedTimeStudent.Add(itemTime);
                                                             }
                                                             else
                                                             {
                                                                 StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                                                 TempselectedTimeStudent.Clear();
                                                                 TempselectedTimeStudent.Add(itemTime);
                                                             }
                                                             previoustime = times[1];
                                                             if (times[0] == selectedTimeStudent.Last().Split(separators, StringSplitOptions.None)[0])
                                                                 StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                                         }
                                                         previoustime = string.Empty;
                                                         foreach (var collectionTime in StudentTimeCollection)
                                                         {

                                                             selectedcount = collectionTime.studentTime.Count();
                                                             #region add group of students
                                                             if (selectedcount > 1)
                                                             {

                                                                 times = (from o in collectionTime.studentTime select o).First().Split(separators, StringSplitOptions.None);
                                                                 // startstudentime = DateTime.Parse(times[0]);
                                                                 timesEnd = (from o in collectionTime.studentTime select o).Last().Split(separators, StringSplitOptions.None);
                                                                 // endstudentime = DateTime.Parse(times[1]);
                                                                 if (count == 0)
                                                                 {

                                                                     InfoStudent.StudentName1 = student.FirstName + " " + student.LastName;
                                                                     InfoStudent.StudentName2 = tempstudent.FirstName + " " + tempstudent.LastName;
                                                                     InfoStudent.Day = day;
                                                                     InfoStudent.StartTime = times[0];
                                                                     InfoStudent.EndTime = timesEnd[1];
                                                                     InfoStudent.Section = student.Section;
                                                                     InfoStudent.Transportation1 = student.Transportation;
                                                                     InfoStudent.Transportation2 = tempstudent.Transportation;
                                                                     InfoStudent.Email1 = student.Email;
                                                                     InfoStudent.Email2 = tempstudent.Email;
                                                                     InfoStudent.location = district;

                                                                     //  GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                                     GroupingStudents.Add(InfoStudent);
                                                                     IsGroupNoTranpsportChecked = true;
                                                                     count++;

                                                                 }
                                                                 else if (count == 1)
                                                                 {
                                                                     GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                                     InfoStudent.OtherStartTime1 = times[0];
                                                                     InfoStudent.OtherEndTime1 = timesEnd[1];
                                                                     InfoStudent.OtherDay1 = day;
                                                                     GroupingStudents.Add(InfoStudent);
                                                                     count++;
                                                                 }
                                                                 else if (count == 2)
                                                                 {
                                                                     GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                                     InfoStudent.OtherStartTime2 = times[0];
                                                                     InfoStudent.OtherEndTime2 = timesEnd[1];
                                                                     InfoStudent.OtherDay2 = day;
                                                                     GroupingStudents.Add(InfoStudent);
                                                                     count++;
                                                                 }
                                                                 else if (count == 3)
                                                                 {
                                                                     GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                                     InfoStudent.OtherStartTime3 = times[0];
                                                                     InfoStudent.OtherEndTime3 = timesEnd[1];
                                                                     InfoStudent.OtherDay3 = day;
                                                                     GroupingStudents.Add(InfoStudent);
                                                                     count++;
                                                                 }
                                                                 else if (count == 4)
                                                                 {
                                                                     GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                                     InfoStudent.OtherStartTime4 = times[0];
                                                                     InfoStudent.OtherEndTime4 = timesEnd[1];
                                                                     InfoStudent.OtherDay4 = day;
                                                                     GroupingStudents.Add(InfoStudent);
                                                                     count++;
                                                                 }
                                                                 else if (count == 5)
                                                                 {
                                                                     IsGroupNoTranpsportChecked = true;
                                                                     break;
                                                                 }

                                                             }
                                                             #endregion;
                                                         }
                                                     }

                                                     if ( count == 5)
                                                         break;
                                                 }
                                             }
                                         }
                                     }
                                     }
                             }
                            #endregion;
                        }
                        //Get the rest of non matching students
                        List<string>student1Emails=(from o in GroupingStudents select o.Email1).ToList();
                        List<string>student2Emails=(from o in GroupingStudents select o.Email2).ToList();
                        List<StudentStep1> NoMatchStudents = new List<StudentStep1>();
                        NoMatchStudents = (from o in Studentstep1 where !student1Emails.Contains(o.Email) && !student2Emails.Contains(o.Email) select o).ToList();

            //Match Teachers to Students

                        List<MatchingStudent> TempGroupingStudents = new List<MatchingStudent>();
                        int counter = 1000;
            while (!Open)
                        {
                            Results1.Clear();
                            TempGroupingStudents = GroupingStudents.OrderBy(x=>x.OtherDay4==null).ToList();
                            #region
                            /* Random order of Teachers*/
                            ShuffleTeachStep1(Teacherstep11);
                            #endregion;
                        //Assign Teachers
                        foreach (var teacher in Teacherstep11)
                        {
                            if (teacher.Pair == "Yes")
                            {
                                count = 2;
                            }
                            else
                            {
                                count = 1;
                            }
                        //    DateTime startstudentime, endstudentime, startteachertime, endteachertime;
                     //       TimeSpan differstart, differend;
                          
                            foreach (var schedule  in teacher.Schedule)
                            {
                               
                                bool selectedcount=false;
                                string[] Teachertimes = new string[2]; string[] Studentimes = new string[2];                             
                               MatchingStudent StudentsInfo=new MatchingStudent();
                            
                                                //    if ((from o in teacher.Schedule where o.Days == schedule.Days select o).FirstOrDefault() != null){
                                                        
                                                    Teachertimes[0] = DateTime.Parse(schedule.StartTime).ToString("hh:mm tt");
                                                    Teachertimes[1] = DateTime.Parse(schedule.EndTime).ToString("hh:mm tt");
                                                foreach (var student in TempGroupingStudents)
                                                {
                                                    location = false;
                                                             if (((student.location == 1 || student.location == 2 || student.location == 3 || student.location == 4 || student.location == 5) && teacher.District == "Denton")
                                                                    || ((student.location == 1 || student.location == 2 || student.location == 4) && teacher.District == "Lewisville") ||
                                                                      ((student.location == 1 || student.location == 3 || student.location == 4 || student.location == 5) && teacher.District == "McKinney")
                                                                      || ((student.location == 1 || student.location == 3 || student.location == 4 || student.location == 5) && teacher.District == "Prosper"))
                                                                 location = true;
                                                    if(!string.IsNullOrEmpty(student.Day) && student.Day.Equals(schedule.Days) && location){
		                                            Studentimes[0] = student.StartTime;
                                                    Studentimes[1] = student.EndTime;
                                                     if ((DateTime.Parse(Teachertimes[0]) >= DateTime.Parse(Studentimes[0])) && (DateTime.Parse(Teachertimes[1]) <= DateTime.Parse(Studentimes[1])))
                                                          
                                                     {
                                                        selectedcount = true;
                                                         StudentsInfo=student;
                                                        
                                                         break;
                                                     }
                                                }
                                                    //check if student group has another available day
                                                    if(!string.IsNullOrEmpty(student.OtherDay1) && student.OtherDay1.Equals(schedule.Days) && location){
                                                     Studentimes[0] = student.OtherStartTime1;
                                                     Studentimes[1] = student.OtherEndTime1;
                                                     if ((DateTime.Parse(Teachertimes[0]) >= DateTime.Parse(Studentimes[0])) && (DateTime.Parse(Teachertimes[1]) <= DateTime.Parse(Studentimes[1])))
                                                          
                                                     {
                                                         selectedcount = true;
                                                         StudentsInfo = student;
                                                        
                                                         break;
                                                     }
                                                }
                                                    if (!string.IsNullOrEmpty(student.OtherDay2) && student.OtherDay2.Equals(schedule.Days) && location)
                                                    {
                                                        Studentimes[0] = student.OtherStartTime2;
                                                        Studentimes[1] = student.OtherEndTime2;
                                                        if ((DateTime.Parse(Teachertimes[0]) >= DateTime.Parse(Studentimes[0])) && (DateTime.Parse(Teachertimes[1]) <= DateTime.Parse(Studentimes[1])))
                                                          
                                                        {
                                                            selectedcount = true;
                                                            StudentsInfo = student;
                                                          
                                                            break;
                                                        }
                                                    }
                                                    if (!string.IsNullOrEmpty(student.OtherDay3) && student.OtherDay3.Equals(schedule.Days) && location)
                                                    {
                                                        Studentimes[0] = student.OtherStartTime3;
                                                        Studentimes[1] = student.OtherEndTime3;
                                                        if ((DateTime.Parse(Teachertimes[0]) >= DateTime.Parse(Studentimes[0])) && (DateTime.Parse(Teachertimes[1]) <= DateTime.Parse(Studentimes[1])))
                                                           
                                                        {
                                                            selectedcount = true;
                                                            StudentsInfo = student;

                                                            break;
                                                        }
                                                    }
                                                    if (!string.IsNullOrEmpty(student.OtherDay4) && student.OtherDay4.Equals(schedule.Days) && location)
                                                    {
                                                        Studentimes[0] = student.OtherStartTime4;
                                                        Studentimes[1] = student.OtherEndTime4;
                                                        if ((DateTime.Parse(Teachertimes[0]) >= DateTime.Parse(Studentimes[0])) && (DateTime.Parse(Teachertimes[1]) <= DateTime.Parse(Studentimes[1])))
                                                           
                                                        {
                                                            selectedcount = true;
                                                            StudentsInfo = student;

                                                            break;
                                                        }
                                                    }
	                                                }
                           //    }                                                                                                   
               
                               if (selectedcount && count>0)
                               {
                                   Results1.Add(new TableResult()
                                   {
                                       TeacherName = teacher.FirstName + " " + teacher.LastName,
                                       StudentName =StudentsInfo.StudentName1 ,
                                       Major = "N/A",
                                       Hour = Teachertimes[0] + "-" +Teachertimes[1],
                                       Days = schedule.Days,
                                       School = teacher.School,
                                       Room = teacher.Room,
                                       Transportation = StudentsInfo.Transportation1,
                                       Pair = teacher.Pair,
                                       Location = true,
                                       section = StudentsInfo.Section,
                                       TeacherEmail=teacher.Email

                                   });
                                   Results1.Add(new TableResult()
                                   {
                                       TeacherName = teacher.FirstName + " " + teacher.LastName,
                                       StudentName = StudentsInfo.StudentName2,
                                       Major = "N/A",
                                       Hour = Teachertimes[0] + "-" + Teachertimes[1],
                                       Days = schedule.Days,
                                       School = teacher.School,
                                       Room = teacher.Room,
                                       Transportation = StudentsInfo.Transportation2,
                                       Pair = teacher.Pair,
                                       Location = true,
                                       section = StudentsInfo.Section,
                                       TeacherEmail=teacher.Email

                                   });
                                   TempGroupingStudents.Remove(StudentsInfo);
                                   count--;
                               }
                               if (count == 0)
                                   break;
                            }

                        
                        }
                        if (Results1.Count > Results.Count())
                        {
                            Results = Results1.ToList();
                            NoConditionResult = Results1.ToList();
                        }
                        if (Results1.Count() == 2*GroupingStudents.Count() || counter==0)
                            Open = true;
                        counter--;
                      

                        }
            #region No Matching students & Teachers
           
            foreach (var student in NoMatchStudents)
            {
               // StudentStep1 tempstudent = (from o in TransportStudentstep1 where o.Email == Transportstud.email select o).FirstOrDefault();
               
  MatchingStudent InfoStudent = new MatchingStudent();
                  count=0;

                        foreach (string day in Days)
                        {
                            int selectedcount = 0;
                            String[] times, timesEnd;
                            List<string> selectedTimeStudent = new List<string>(), selectedTimeTempstudent = new List<string>();
                            List<StudentTimeCollection> StudentTimeCollection = new List<StudentTimeCollection>();
                            if (day == "Monday")
                            {
                                //  selectedTimeStudent = (from o in student.Schedule where o.Monday && o.Time != "07:00 AM-07:30 AM" select o.Time).ToList();

                                string previoustime = null, removedTime = null; List<string> TempselectedTimeStudent = new List<string>(); int getIndex = 0;
                                selectedTimeStudent = (from o in student.Schedule where o.Monday select o.Time).ToList();
                                selectedTimeStudent = (from o in selectedTimeStudent
                                                       where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                        && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                       select o).ToList();
                               
                                foreach (var itemTime in selectedTimeStudent)
                                {
                                    times = itemTime.Split(separators, StringSplitOptions.None);
                                    if (times[0] == selectedTimeStudent.First().Split(separators, StringSplitOptions.None)[0])
                                        TempselectedTimeStudent.Add(itemTime);
                                    if (!string.IsNullOrEmpty(previoustime) && (DateTime.Parse(times[0]).Subtract(DateTime.Parse(previoustime)).TotalMinutes == 0))
                                    {
                                        TempselectedTimeStudent.Add(itemTime);
                                    }
                                    else
                                    {
                                        StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                        TempselectedTimeStudent.Clear();
                                        TempselectedTimeStudent.Add(itemTime);
                                    }
                                    previoustime = times[1];
                                    if (times[0] == selectedTimeStudent.Last().Split(separators, StringSplitOptions.None)[0])
                                        StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                }
                                previoustime = string.Empty;
                                foreach (var collectionTime in StudentTimeCollection)
                                {

                                    selectedcount = collectionTime.studentTime.Count();
                                    #region add group of students
                                    if (selectedcount > 1)
                                    {

                                        times = (from o in collectionTime.studentTime select o).First().Split(separators, StringSplitOptions.None);
                                        // startstudentime = DateTime.Parse(times[0]);
                                        timesEnd = (from o in collectionTime.studentTime select o).Last().Split(separators, StringSplitOptions.None);
                                        // endstudentime = DateTime.Parse(times[1]);
                                        if (count == 0)
                                        {

                                            InfoStudent.StudentName1 = student.FirstName + " " + student.LastName;
                                          //  InfoStudent.StudentName2 = tempstudent.FirstName + " " + tempstudent.LastName;
                                            InfoStudent.Day = day;
                                            InfoStudent.StartTime = times[0];
                                            InfoStudent.EndTime = timesEnd[1];
                                            InfoStudent.Section = student.Section;
                                            InfoStudent.Transportation1 = student.Transportation;
                                           // InfoStudent.Transportation2 = tempstudent.Transportation;
                                            InfoStudent.Email1 = student.Email;
                                            //InfoStudent.Email2 = tempstudent.Email;
                                            InfoStudent.location = district;

                                            //  GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                            NoGroupingStudents.Add(InfoStudent);
                                            IsGroupNoTranpsportChecked = true;
                                            count++;

                                        }
                                        else if (count == 1)
                                        {
                                            NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                            InfoStudent.OtherStartTime1 = times[0];
                                            InfoStudent.OtherEndTime1 = timesEnd[1];
                                            InfoStudent.OtherDay1 = day;
                                            NoGroupingStudents.Add(InfoStudent);
                                            count++;
                                        }
                                        else if (count == 2)
                                        {
                                           NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                            InfoStudent.OtherStartTime2 = times[0];
                                            InfoStudent.OtherEndTime2 = timesEnd[1];
                                            InfoStudent.OtherDay2 = day;
                                            NoGroupingStudents.Add(InfoStudent);
                                            count++;
                                        }
                                        else if (count == 3)
                                        {
                                            NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                            InfoStudent.OtherStartTime3 = times[0];
                                            InfoStudent.OtherEndTime3 = timesEnd[1];
                                            InfoStudent.OtherDay3 = day;
                                            NoGroupingStudents.Add(InfoStudent);
                                            count++;
                                        }
                                        else if (count == 4)
                                        {
                                            NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                            InfoStudent.OtherStartTime4 = times[0];
                                            InfoStudent.OtherEndTime4 = timesEnd[1];
                                            InfoStudent.OtherDay4 = day;
                                            NoGroupingStudents.Add(InfoStudent);
                                            count++;
                                        }
                                        else if (count == 5)
                                        {
                                            IsGroupNoTranpsportChecked = true;
                                            break;
                                        }

                                    }
                                    #endregion;
                                }

                            }
                            else if (day == "Tuesday")
                            {
                                string previoustime = null, removedTime = null; List<string> TempselectedTimeStudent = new List<string>(); int getIndex = 0;
                                selectedTimeStudent = (from o in student.Schedule where o.Tuesday select o.Time).ToList();
                                selectedTimeStudent = (from o in selectedTimeStudent
                                                       where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                        && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                       select o).ToList();
                                
                                foreach (var itemTime in selectedTimeStudent)
                                {
                                    times = itemTime.Split(separators, StringSplitOptions.None);
                                    if (times[0] == selectedTimeStudent.First().Split(separators, StringSplitOptions.None)[0])
                                        TempselectedTimeStudent.Add(itemTime);
                                    if (!string.IsNullOrEmpty(previoustime) && (DateTime.Parse(times[0]).Subtract(DateTime.Parse(previoustime)).TotalMinutes == 0))
                                    {
                                        TempselectedTimeStudent.Add(itemTime);
                                    }
                                    else
                                    {
                                        StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                        TempselectedTimeStudent.Clear();
                                        TempselectedTimeStudent.Add(itemTime);
                                    }
                                    previoustime = times[1];
                                    if (times[0] == selectedTimeStudent.Last().Split(separators, StringSplitOptions.None)[0])
                                        StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                }
                                previoustime = string.Empty;
                                foreach (var collectionTime in StudentTimeCollection)
                                {

                                    selectedcount = collectionTime.studentTime.Count();
                                    #region add group of students
                                    if (selectedcount > 1)
                                    {

                                        times = (from o in collectionTime.studentTime select o).First().Split(separators, StringSplitOptions.None);
                                        // startstudentime = DateTime.Parse(times[0]);
                                        timesEnd = (from o in collectionTime.studentTime select o).Last().Split(separators, StringSplitOptions.None);
                                        // endstudentime = DateTime.Parse(times[1]);
                                        if (count == 0)
                                        {

                                            InfoStudent.StudentName1 = student.FirstName + " " + student.LastName;
                                           // InfoStudent.StudentName2 = tempstudent.FirstName + " " + tempstudent.LastName;
                                            InfoStudent.Day = day;
                                            InfoStudent.StartTime = times[0];
                                            InfoStudent.EndTime = timesEnd[1];
                                            InfoStudent.Section = student.Section;
                                            InfoStudent.Transportation1 = student.Transportation;
                                         //   InfoStudent.Transportation2 = tempstudent.Transportation;
                                            InfoStudent.Email1 = student.Email;
                                         //   InfoStudent.Email2 = tempstudent.Email;
                                            InfoStudent.location = district;

                                            //  GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                            NoGroupingStudents.Add(InfoStudent);
                                            IsGroupNoTranpsportChecked = true;
                                            count++;

                                        }
                                        else if (count == 1)
                                        {
                                            NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                            InfoStudent.OtherStartTime1 = times[0];
                                            InfoStudent.OtherEndTime1 = timesEnd[1];
                                            InfoStudent.OtherDay1 = day;
                                            NoGroupingStudents.Add(InfoStudent);
                                            count++;
                                        }
                                        else if (count == 2)
                                        {
                                            NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                            InfoStudent.OtherStartTime2 = times[0];
                                            InfoStudent.OtherEndTime2 = timesEnd[1];
                                            InfoStudent.OtherDay2 = day;
                                            NoGroupingStudents.Add(InfoStudent);
                                            count++;
                                        }
                                        else if (count == 3)
                                        {
                                            NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                            InfoStudent.OtherStartTime3 = times[0];
                                            InfoStudent.OtherEndTime3 = timesEnd[1];
                                            InfoStudent.OtherDay3 = day;
                                            NoGroupingStudents.Add(InfoStudent);
                                            count++;
                                        }
                                        else if (count == 4)
                                        {
                                            NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                            InfoStudent.OtherStartTime4 = times[0];
                                            InfoStudent.OtherEndTime4 = timesEnd[1];
                                            InfoStudent.OtherDay4 = day;
                                            NoGroupingStudents.Add(InfoStudent);
                                            count++;
                                        }
                                        else if (count == 5)
                                        {
                                            IsGroupNoTranpsportChecked = true;
                                            break;
                                        }

                                    }
                                    #endregion;
                                }
                            }
                            else if (day == "Wednesday")
                            {
                                string previoustime = null, removedTime = null; List<string> TempselectedTimeStudent = new List<string>(); int getIndex = 0;
                                selectedTimeStudent = (from o in student.Schedule where o.Wednesday select o.Time).ToList();
                                selectedTimeStudent = (from o in selectedTimeStudent
                                                       where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                        && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                       select o).ToList();
                                
                                foreach (var itemTime in selectedTimeStudent)
                                {
                                    times = itemTime.Split(separators, StringSplitOptions.None);
                                    if (times[0] == selectedTimeStudent.First().Split(separators, StringSplitOptions.None)[0])
                                        TempselectedTimeStudent.Add(itemTime);
                                    if (!string.IsNullOrEmpty(previoustime) && (DateTime.Parse(times[0]).Subtract(DateTime.Parse(previoustime)).TotalMinutes == 0))
                                    {
                                        TempselectedTimeStudent.Add(itemTime);
                                    }
                                    else
                                    {
                                        StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                        TempselectedTimeStudent.Clear();
                                        TempselectedTimeStudent.Add(itemTime);
                                    }
                                    previoustime = times[1];
                                    if (times[0] == selectedTimeStudent.Last().Split(separators, StringSplitOptions.None)[0])
                                        StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                }
                                previoustime = string.Empty;
                                foreach (var collectionTime in StudentTimeCollection)
                                {

                                    selectedcount = collectionTime.studentTime.Count();
                                    #region add group of students
                                    if (selectedcount > 1)
                                    {

                                        times = (from o in collectionTime.studentTime select o).First().Split(separators, StringSplitOptions.None);
                                        // startstudentime = DateTime.Parse(times[0]);
                                        timesEnd = (from o in collectionTime.studentTime select o).Last().Split(separators, StringSplitOptions.None);
                                        // endstudentime = DateTime.Parse(times[1]);
                                        if (count == 0)
                                        {

                                            InfoStudent.StudentName1 = student.FirstName + " " + student.LastName;
                                           // InfoStudent.StudentName2 = tempstudent.FirstName + " " + tempstudent.LastName;
                                            InfoStudent.Day = day;
                                            InfoStudent.StartTime = times[0];
                                            InfoStudent.EndTime = timesEnd[1];
                                            InfoStudent.Section = student.Section;
                                            InfoStudent.Transportation1 = student.Transportation;
                                        //    InfoStudent.Transportation2 = tempstudent.Transportation;
                                            InfoStudent.Email1 = student.Email;
                                       //     InfoStudent.Email2 = tempstudent.Email;
                                            InfoStudent.location = district;

                                            //  GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                            NoGroupingStudents.Add(InfoStudent);
                                            IsGroupNoTranpsportChecked = true;
                                            count++;

                                        }
                                        else if (count == 1)
                                        {
                                            NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                            InfoStudent.OtherStartTime1 = times[0];
                                            InfoStudent.OtherEndTime1 = timesEnd[1];
                                            InfoStudent.OtherDay1 = day;
                                            NoGroupingStudents.Add(InfoStudent);
                                            count++;
                                        }
                                        else if (count == 2)
                                        {
                                            NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                            InfoStudent.OtherStartTime2 = times[0];
                                            InfoStudent.OtherEndTime2 = timesEnd[1];
                                            InfoStudent.OtherDay2 = day;
                                            NoGroupingStudents.Add(InfoStudent);
                                            count++;
                                        }
                                        else if (count == 3)
                                        {
                                            NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                            InfoStudent.OtherStartTime3 = times[0];
                                            InfoStudent.OtherEndTime3 = timesEnd[1];
                                            InfoStudent.OtherDay3 = day;
                                            NoGroupingStudents.Add(InfoStudent);
                                            count++;
                                        }
                                        else if (count == 4)
                                        {
                                            NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                            InfoStudent.OtherStartTime4 = times[0];
                                            InfoStudent.OtherEndTime4 = timesEnd[1];
                                            InfoStudent.OtherDay4 = day;
                                            NoGroupingStudents.Add(InfoStudent);
                                            count++;
                                        }
                                        else if (count == 5)
                                        {
                                            IsGroupNoTranpsportChecked = true;
                                            break;
                                        }

                                    }
                                    #endregion;
                                }
                            }
                            else if (day == "Thursday")
                            {
                                string previoustime = null, removedTime = null; List<string> TempselectedTimeStudent = new List<string>(); int getIndex = 0;
                                selectedTimeStudent = (from o in student.Schedule where o.Thursday select o.Time).ToList();
                                selectedTimeStudent = (from o in selectedTimeStudent
                                                       where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                        && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                       select o).ToList();
                              

                               
                                foreach (var itemTime in selectedTimeStudent)
                                {
                                    times = itemTime.Split(separators, StringSplitOptions.None);
                                    if (times[0] == selectedTimeStudent.First().Split(separators, StringSplitOptions.None)[0])
                                        TempselectedTimeStudent.Add(itemTime);
                                    if (!string.IsNullOrEmpty(previoustime) && (DateTime.Parse(times[0]).Subtract(DateTime.Parse(previoustime)).TotalMinutes == 0))
                                    {
                                        TempselectedTimeStudent.Add(itemTime);
                                    }
                                    else
                                    {
                                        StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                        TempselectedTimeStudent.Clear();
                                        TempselectedTimeStudent.Add(itemTime);
                                    }
                                    previoustime = times[1];
                                    if (times[0] == selectedTimeStudent.Last().Split(separators, StringSplitOptions.None)[0])
                                        StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                }
                                previoustime = string.Empty;
                                foreach (var collectionTime in StudentTimeCollection)
                                {

                                    selectedcount = collectionTime.studentTime.Count();
                                    #region add group of students
                                    if (selectedcount > 1)
                                    {

                                        times = (from o in collectionTime.studentTime select o).First().Split(separators, StringSplitOptions.None);
                                        // startstudentime = DateTime.Parse(times[0]);
                                        timesEnd = (from o in collectionTime.studentTime select o).Last().Split(separators, StringSplitOptions.None);
                                        // endstudentime = DateTime.Parse(times[1]);
                                        if (count == 0)
                                        {

                                            InfoStudent.StudentName1 = student.FirstName + " " + student.LastName;
                                         //   InfoStudent.StudentName2 = tempstudent.FirstName + " " + tempstudent.LastName;
                                            InfoStudent.Day = day;
                                            InfoStudent.StartTime = times[0];
                                            InfoStudent.EndTime = timesEnd[1];
                                            InfoStudent.Section = student.Section;
                                            InfoStudent.Transportation1 = student.Transportation;
                                        //    InfoStudent.Transportation2 = tempstudent.Transportation;
                                            InfoStudent.Email1 = student.Email;
                                       //     InfoStudent.Email2 = tempstudent.Email;
                                            InfoStudent.location = district;

                                            //  GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                            NoGroupingStudents.Add(InfoStudent);
                                            IsGroupNoTranpsportChecked = true;
                                            count++;

                                        }
                                        else if (count == 1)
                                        {
                                            NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                            InfoStudent.OtherStartTime1 = times[0];
                                            InfoStudent.OtherEndTime1 = timesEnd[1];
                                            InfoStudent.OtherDay1 = day;
                                            NoGroupingStudents.Add(InfoStudent);
                                            count++;
                                        }
                                        else if (count == 2)
                                        {
                                            NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                            InfoStudent.OtherStartTime2 = times[0];
                                            InfoStudent.OtherEndTime2 = timesEnd[1];
                                            InfoStudent.OtherDay2 = day;
                                            NoGroupingStudents.Add(InfoStudent);
                                            count++;
                                        }
                                        else if (count == 3)
                                        {
                                            NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                            InfoStudent.OtherStartTime3 = times[0];
                                            InfoStudent.OtherEndTime3 = timesEnd[1];
                                            InfoStudent.OtherDay3 = day;
                                            NoGroupingStudents.Add(InfoStudent);
                                            count++;
                                        }
                                        else if (count == 4)
                                        {
                                            NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                            InfoStudent.OtherStartTime4 = times[0];
                                            InfoStudent.OtherEndTime4 = timesEnd[1];
                                            InfoStudent.OtherDay4 = day;
                                            NoGroupingStudents.Add(InfoStudent);
                                            count++;
                                        }
                                        else if (count == 5)
                                        {
                                            IsGroupNoTranpsportChecked = true;
                                            break;
                                        }

                                    }
                                    #endregion;
                                }
                            }
                            else if (day == "Friday")
                            {
                                string previoustime = null, removedTime = null; List<string> TempselectedTimeStudent = new List<string>(); int getIndex = 0;
                                selectedTimeStudent = (from o in student.Schedule where o.Friday select o.Time).ToList();
                                selectedTimeStudent = (from o in selectedTimeStudent
                                                       where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                        && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                       select o).ToList();
                               
                                foreach (var itemTime in selectedTimeStudent)
                                {
                                    times = itemTime.Split(separators, StringSplitOptions.None);
                                    if (times[0] == selectedTimeStudent.First().Split(separators, StringSplitOptions.None)[0])
                                        TempselectedTimeStudent.Add(itemTime);
                                    if (!string.IsNullOrEmpty(previoustime) && (DateTime.Parse(times[0]).Subtract(DateTime.Parse(previoustime)).TotalMinutes == 0))
                                    {
                                        TempselectedTimeStudent.Add(itemTime);
                                    }
                                    else
                                    {
                                        StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                        TempselectedTimeStudent.Clear();
                                        TempselectedTimeStudent.Add(itemTime);
                                    }
                                    previoustime = times[1];
                                    if (times[0] == selectedTimeStudent.Last().Split(separators, StringSplitOptions.None)[0])
                                        StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                }
                                previoustime = string.Empty;
                                foreach (var collectionTime in StudentTimeCollection)
                                {

                                    selectedcount = collectionTime.studentTime.Count();
                                    #region add group of students
                                    if (selectedcount > 1)
                                    {

                                        times = (from o in collectionTime.studentTime select o).First().Split(separators, StringSplitOptions.None);
                                        // startstudentime = DateTime.Parse(times[0]);
                                        timesEnd = (from o in collectionTime.studentTime select o).Last().Split(separators, StringSplitOptions.None);
                                        // endstudentime = DateTime.Parse(times[1]);
                                        if (count == 0)
                                        {

                                            InfoStudent.StudentName1 = student.FirstName + " " + student.LastName;
                                          //  InfoStudent.StudentName2 = tempstudent.FirstName + " " + tempstudent.LastName;
                                            InfoStudent.Day = day;
                                            InfoStudent.StartTime = times[0];
                                            InfoStudent.EndTime = timesEnd[1];
                                            InfoStudent.Section = student.Section;
                                            InfoStudent.Transportation1 = student.Transportation;
                                          //  InfoStudent.Transportation2 = tempstudent.Transportation;
                                            InfoStudent.Email1 = student.Email;
                                          //  InfoStudent.Email2 = tempstudent.Email;
                                            InfoStudent.location = district;

                                            //  GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                            NoGroupingStudents.Add(InfoStudent);
                                            IsGroupNoTranpsportChecked = true;
                                            count++;

                                        }
                                        else if (count == 1)
                                        {
                                            NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                            InfoStudent.OtherStartTime1 = times[0];
                                            InfoStudent.OtherEndTime1 = timesEnd[1];
                                            InfoStudent.OtherDay1 = day;
                                            NoGroupingStudents.Add(InfoStudent);
                                            count++;
                                        }
                                        else if (count == 2)
                                        {
                                            NoGroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) ) select o).ToList();
                                            InfoStudent.OtherStartTime2 = times[0];
                                            InfoStudent.OtherEndTime2 = timesEnd[1];
                                            InfoStudent.OtherDay2 = day;
                                            NoGroupingStudents.Add(InfoStudent);
                                            count++;
                                        }
                                        else if (count == 3)
                                        {
                                            NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email) ) select o).ToList();
                                            InfoStudent.OtherStartTime3 = times[0];
                                            InfoStudent.OtherEndTime3 = timesEnd[1];
                                            InfoStudent.OtherDay3 = day;
                                            NoGroupingStudents.Add(InfoStudent);
                                            count++;
                                        }
                                        else if (count == 4)
                                        {
                                            NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email) ) select o).ToList();
                                            InfoStudent.OtherStartTime4 = times[0];
                                            InfoStudent.OtherEndTime4 = timesEnd[1];
                                            InfoStudent.OtherDay4 = day;
                                            NoGroupingStudents.Add(InfoStudent);
                                            count++;
                                        }
                                        else if (count == 5)
                                        {
                                            IsGroupNoTranpsportChecked = true;
                                            break;
                                        }

                                    }
                                    #endregion;
                                }
                            }
                }
               
            }
            List<TeacherStep1> RestOfTeachers=new List<TeacherStep1>();
            List<string> selectedTeachersName=(from o in Results select o.TeacherEmail).ToList();
            List<string> teacherName=(from o in Teacherstep11 select o.Email).ToList();
            List<string> restTeacherName=(from o in teacherName where !selectedTeachersName.Contains(o) select o).ToList();
            Open=false;
            RestOfTeachers = (from o in Teacherstep11 where restTeacherName.Contains(o.Email) select o).ToList();
            counter = 100;
            List<string> selectedStudentName=(from o  in Results select o.StudentName).ToList();
            List<MatchingStudent> restStudentName = (from o in GroupingStudents where !selectedStudentName.Contains(o.StudentName1) && !selectedStudentName.Contains(o.StudentName2) select o).ToList();
            NoGroupingStudents.Concat<MatchingStudent>(restStudentName);
            while(!Open){

                NoConditionResult1.Clear();
                TempGroupingStudents = NoGroupingStudents.ToList();
                #region
                /* Random order of Teachers*/
                ShuffleTeachStep1(RestOfTeachers);
                #endregion;
                //Assign Teachers
                foreach (var teacher in RestOfTeachers)
                {
                    if (teacher.Pair == "Yes")
                    {
                        count = 4;
                    }
                    else
                    {
                        count = 2;
                    }
                   

                   foreach (var schedule  in teacher.Schedule)
                            {
                               
                                bool selectedcount=false;
                                string[] Teachertimes = new string[2]; string[] Studentimes = new string[2];                             
                               MatchingStudent StudentsInfo=new MatchingStudent();
                            
                                                //    if ((from o in teacher.Schedule where o.Days == schedule.Days select o).FirstOrDefault() != null){
                                                        
                                                    Teachertimes[0] = DateTime.Parse(schedule.StartTime).ToString("hh:mm tt");
                                                    Teachertimes[1] = DateTime.Parse(schedule.EndTime).ToString("hh:mm tt");
                            foreach (var student in TempGroupingStudents)
                            {
                                location = false;
                                if (((student.location == 1 || student.location == 2 || student.location == 3 || student.location == 4 || student.location == 5) && teacher.District == "Denton")
                                       || ((student.location == 1 || student.location == 2 || student.location == 4) && teacher.District == "Lewisville") ||
                                         ((student.location == 1 || student.location == 3 || student.location == 4 || student.location == 5) && teacher.District == "McKinney")
                                         || ((student.location == 1 || student.location == 3 || student.location == 4 || student.location == 5) && teacher.District == "Prosper"))
                                    location = true;
                                if (!string.IsNullOrEmpty(student.Day) && student.Day.Equals(schedule.Days) && location)
                                {
                                    Studentimes[0] = student.StartTime;
                                    Studentimes[1] = student.EndTime;
                                    if ((DateTime.Parse(Teachertimes[0]) >= DateTime.Parse(Studentimes[0])) && (DateTime.Parse(Teachertimes[1]) <= DateTime.Parse(Studentimes[1])))
                                                       
                                    {
                                        selectedcount = true;
                                        StudentsInfo = student;

                                        break;
                                    }
                                }
                                //check if student group has another available day
                                if (!string.IsNullOrEmpty(student.OtherDay1) && student.OtherDay1.Equals(schedule.Days) && location)
                                {
                                    Studentimes[0] = student.OtherStartTime1;
                                    Studentimes[1] = student.OtherEndTime1;
                                    if ((DateTime.Parse(Teachertimes[0]) >= DateTime.Parse(Studentimes[0])) && (DateTime.Parse(Teachertimes[1]) <= DateTime.Parse(Studentimes[1])))
                                                      
                                    {
                                        selectedcount = true;
                                        StudentsInfo = student;

                                        break;
                                    }
                                }
                                if (!string.IsNullOrEmpty(student.OtherDay2) && student.OtherDay2.Equals(schedule.Days) && location)
                                {
                                    Studentimes[0] = student.OtherStartTime2;
                                    Studentimes[1] = student.OtherEndTime2;
                                    if ((DateTime.Parse(Teachertimes[0]) >= DateTime.Parse(Studentimes[0])) && (DateTime.Parse(Teachertimes[1]) <= DateTime.Parse(Studentimes[1])))
                                                        
                                    {
                                        selectedcount = true;
                                        StudentsInfo = student;

                                        break;
                                    }
                                }
                                if (!string.IsNullOrEmpty(student.OtherDay3) && student.OtherDay3.Equals(schedule.Days) && location)
                                {
                                    Studentimes[0] = student.OtherStartTime3;
                                    Studentimes[1] = student.OtherEndTime3;
                                    if ((DateTime.Parse(Teachertimes[0]) >= DateTime.Parse(Studentimes[0])) && (DateTime.Parse(Teachertimes[1]) <= DateTime.Parse(Studentimes[1])))
                                                        
                                    {
                                        selectedcount = true;
                                        StudentsInfo = student;

                                        break;
                                    }
                                }
                                if (!string.IsNullOrEmpty(student.OtherDay4) && student.OtherDay4.Equals(schedule.Days) && location)
                                {
                                    Studentimes[0] = student.OtherStartTime4;
                                    Studentimes[1] = student.OtherEndTime4;
                                    if ((DateTime.Parse(Teachertimes[0]) >= DateTime.Parse(Studentimes[0])) && (DateTime.Parse(Teachertimes[1]) <= DateTime.Parse(Studentimes[1])))
                                                        
                                    {
                                        selectedcount = true;
                                        StudentsInfo = student;

                                        break;
                                    }
                                }
                            }
                                                                         
                        if (selectedcount && count > 0)
                        {
                            NoConditionResult1.Add(new TableResult()
                            {
                                TeacherName = teacher.FirstName + " " + teacher.LastName,
                                StudentName = StudentsInfo.StudentName1,
                                Major = "N/A",
                                Hour = Teachertimes[0] + "-" + Teachertimes[1],
                                Days = schedule.Days,
                                School = teacher.School,
                                Room = teacher.Room,
                                Transportation = StudentsInfo.Transportation1,
                                Pair = teacher.Pair,
                                Location = true,
                                section = StudentsInfo.Section,
                                TeacherEmail = teacher.Email

                            });
                          
                            TempGroupingStudents.Remove(StudentsInfo);
                            count--;
                        }
                        if (count == 0)
                            break;
                    }


                }
                
                if (NoConditionResult1.Count > NoConditionResult2.Count())
                {                   
                    NoConditionResult2 = NoConditionResult1.ToList();
                }
                if (NoConditionResult2.Count() == 2 * NoGroupingStudents.Count() || counter == 0)
                {
                    Open = true;
                    NoConditionResult = NoConditionResult2.ToList();
                }
                counter--;

            }
            #endregion;
        }
        private void getMatchListStep222()
        {

            Results.Clear();
            NoConditionResult.Clear();
            List<TableResult> Results2 = new List<TableResult>();
            List<TableResult> NoConditionResult1 = new List<TableResult>();
            List<TableResult> NoConditionResult2 = new List<TableResult>();
            // List<TableResult> NoConditionResult1 = new List<TableResult>();
            List<StudentStep2> Studentstep22 = new List<StudentStep2>();
            List<StudentStep2> TransportStudentstep2 = new List<StudentStep2>();
            List<StudentStep2> NoTransportStudentstep2 = new List<StudentStep2>();
            List<string> Sections = Studentstep2.Select(x => x.Section).Distinct().ToList();
            List<TeacherStep2> Teacherstep22 = Teacherstep2.ToList();
            List<MatchingStudent> GroupingStudents = new List<MatchingStudent>();
            List<MatchingStudent> NoGroupingStudents = new List<MatchingStudent>();
            List<Avail> teachschedule = new List<Avail>();
            List<string> Days = new List<string>();
            List<string> TwoDaysClassBack=new List<string>();
            TwoDaysClassBack.Add("Monday-Tuesday");TwoDaysClassBack.Add("Monday-Wednesday");TwoDaysClassBack.Add("Tuesday-Wednesday");TwoDaysClassBack.Add("Tuesday-Thursday");
            TwoDaysClassBack.Add("Wednesday-Thursday");TwoDaysClassBack.Add("Wednesday-Friday");TwoDaysClassBack.Add("Thursday-Friday");
            Days.Add("Monday"); Days.Add("Tuesday"); Days.Add("Wednesday"); Days.Add("Thursday"); Days.Add("Friday");
         
            //Get Min and Max Range for teacher time
            DateTime RangeMinTime = (from o in Teacherstep22 where o.Schedule.Count() > 0 select (o.Schedule.Select(x => DateTime.Parse(x.StartTime)).Min())).Min();
            DateTime RangeMaxTime = (from o in Teacherstep22 where o.Schedule.Count() > 0 select (o.Schedule.Select(x => DateTime.Parse(x.EndTime)).Max())).Max();
            
            int count = 0, district = 0, counter=0;
            bool Open = false, noCheck;
            //     bool timer = false;
            bool location = false, major=false, backToback,backtwodays,subject=false;
            bool IsGroupNoTranpsportChecked, restOfTransportChecked;




            foreach (string section in Sections)
            {
                Studentstep22 = Studentstep2.Where(x => x.Section.Equals(section)).ToList();
                TransportStudentstep2 = (Studentstep22.Where(x => x.Transportation.Equals("Yes"))).ToList();
                NoTransportStudentstep2 = Studentstep22.Where(x => x.Transportation.Equals("No")).ToList();
                // Classify student in each list of transport yes or no
                List<studentPriorityQueue> PriorityTransportStudents = new List<studentPriorityQueue>();
                List<studentPriorityQueue> PriorityNoTransportStudents = new List<studentPriorityQueue>();
                int PriorityTransportStudent, PriorityNoTransportStudent;
                foreach (var studentTransport in TransportStudentstep2)
                {
                    PriorityTransportStudent = 0;
                    foreach (var day in Days)
                    {

                        if (day == "Monday")
                            PriorityTransportStudent += (from o in studentTransport.Schedule where o.Monday select o.Time).Count();
                        else if (day == "Tuesday")
                            PriorityTransportStudent += (from o in studentTransport.Schedule where o.Tuesday select o.Time).Count();
                        else if (day == "Wednesday")
                            PriorityTransportStudent += (from o in studentTransport.Schedule where o.Wednesday select o.Time).Count();
                        else if (day == "Thursday")
                            PriorityTransportStudent += (from o in studentTransport.Schedule where o.Thursday select o.Time).Count();
                        else if (day == "Friday")
                            PriorityTransportStudent += (from o in studentTransport.Schedule where o.Friday select o.Time).Count();
                    }
                    PriorityTransportStudents.Add(new studentPriorityQueue() { priority = PriorityTransportStudent, FirstName = studentTransport.FirstName, LastName = studentTransport.LastName, email = studentTransport.Email });

                }
                foreach (var studentNoTransport in NoTransportStudentstep2)
                {
                    PriorityNoTransportStudent = 0;
                    foreach (var day in Days)
                    {

                        if (day == "Monday")
                            PriorityNoTransportStudent += (from o in studentNoTransport.Schedule where o.Monday select o.Time).Count();
                        else if (day == "Tuesday")
                            PriorityNoTransportStudent += (from o in studentNoTransport.Schedule where o.Tuesday select o.Time).Count();
                        else if (day == "Wednesday")
                            PriorityNoTransportStudent += (from o in studentNoTransport.Schedule where o.Wednesday select o.Time).Count();
                        else if (day == "Thursday")
                            PriorityNoTransportStudent += (from o in studentNoTransport.Schedule where o.Thursday select o.Time).Count();
                        else if (day == "Friday")
                            PriorityNoTransportStudent += (from o in studentNoTransport.Schedule where o.Friday select o.Time).Count();
                    }
                    PriorityNoTransportStudents.Add(new studentPriorityQueue() { priority = PriorityNoTransportStudent, FirstName = studentNoTransport.FirstName, LastName = studentNoTransport.LastName, email = studentNoTransport.Email });

                }
                PriorityTransportStudents = PriorityTransportStudents.OrderBy(o => o.priority).ToList();
                PriorityNoTransportStudents = PriorityNoTransportStudents.OrderBy(o => o.priority).ToList();
                studentPriorityQueue removedStudentPriority = new studentPriorityQueue();
                foreach (var NoTransportstud in PriorityNoTransportStudents)
                {
                    StudentStep2 student = (from o in NoTransportStudentstep2 where o.Email == NoTransportstud.email select o).FirstOrDefault();
                    noCheck = true;
                    MatchingStudent InfoStudent = new MatchingStudent();
                    IsGroupNoTranpsportChecked = false;
                    
                    if (removedStudentPriority.email != NoTransportstud.email)
                        foreach (var Transportstud in PriorityTransportStudents)
                        {
                     
                            StudentStep2 tempstudent = (from o in TransportStudentstep2 where o.Email == Transportstud.email select o).FirstOrDefault();
                            //added Saturday on running match
                            // Enforce CI students to have back to back on 2 days (timing frame will be at least two)
                       /*     if (section == "ESDE 4000.001, Monday/Wednesday @ 3:30-4:50" || section == "ESDE 4000.002, Tuesday/Thursday @ 12:30-1:50")
                            {
                                major = false;
                                if ((student.Major == "Mathematics" || student.Major == "4-8 Math CI Students Only") && (tempstudent.Major == "Mathematics" || tempstudent.Major == "4-8 Math CI Students Only"))
                                    major = true;
                                if ((student.Major == "Science" || student.Major == "4-8 Science CI Students Only") && (tempstudent.Major == "Science" || tempstudent.Major == "4-8 Science CI Students Only"))
                                    major = true;
                                if (major)
                                {

                                }
                            }*/
                            district = 0;
                            if (!string.IsNullOrEmpty(student.Email) && !string.IsNullOrEmpty(tempstudent.Email) && !IsGroupNoTranpsportChecked)
                            {
                                if ((tempstudent.DistrictDenton == 1 || tempstudent.DistrictDenton == 2 ||
                                     tempstudent.DistrictDenton == 3) &&
                                    (student.DistrictDenton == 1 || student.DistrictDenton == 2 ||
                                     student.DistrictDenton == 3)
                                    )
                                {
                                    location = true;
                                    district = 1;
                                }
                                if ((tempstudent.DistrictLewisville == 1 || tempstudent.DistrictLewisville == 2 ||
                                     tempstudent.DistrictLewisville == 3) &&
                                (student.DistrictLewisville == 1 || student.DistrictLewisville == 2 ||
                                 student.DistrictLewisville == 3))
                                {
                                    location = true;
                                    district = 2;
                                }
                                if ((tempstudent.DistrictMckinney == 1 || tempstudent.DistrictMckinney == 2 ||
                                     tempstudent.DistrictMckinney == 3) &&
                                    (student.DistrictMckinney == 1 || student.DistrictMckinney == 2 ||
                                     student.DistrictMckinney == 3)
                                    )
                                {
                                    location = true;
                                    district = 3;
                                }
                                if ((tempstudent.DistrictSanger == 1 || tempstudent.DistrictSanger == 2 ||
                                           tempstudent.DistrictSanger == 3) &&
                                      (student.DistrictSanger == 1 || student.DistrictSanger == 2 ||
                                       student.DistrictSanger == 3))
                                {
                                    location = true;
                                    district = 4;
                                }
                                if ((tempstudent.DistrictProsper == 1 || tempstudent.DistrictProsper == 2 ||
                                     tempstudent.DistrictProsper == 3) &&
                                    (student.DistrictProsper == 1 || student.DistrictProsper == 2 ||
                                     student.DistrictProsper == 3)
                                    )
                                {
                                    location = true;
                                    district = 5;
                                }
                            /*    if ((tempstudent.DistrictForthWorth == 1 || tempstudent.DistrictForthWorth == 2 ||
                                     tempstudent.DistrictForthWorth == 3) &&
                                (student.DistrictForthWorth == 1 || student.DistrictForthWorth == 2 ||
                                 student.DistrictForthWorth == 3))
                                {
                                    location = true;
                                    district = 4;
                                }*/
                                major = false;
                                if ((student.Major == "Mathematics" || student.Major == "4-8 Math CI Students Only") && (tempstudent.Major == "Mathematics" || tempstudent.Major == "4-8 Math CI Students Only"))
                                    major = true;
                                if ((student.Major == "Science" || student.Major == "4-8 Science CI Students Only") && (tempstudent.Major == "Science" || tempstudent.Major == "4-8 Science CI Students Only"))
                                    major = true;                  
                               /* if (student.Major == tempstudent.Major)
                                    major = true;
                                else major = false;*/
                                if (section== "ESDE 4000.001, Monday/Wednesday @ 3:30-4:50" || section== "ESDE 4000.002, Tuesday/Thursday @ 12:30-1:50"
                                    || section == "TXTX 1300.001, Tuesday/Thursday @ 2:00-3:20")
                                    backToback=true;
                                else backToback=false;

                                // Enforce CI students to have back to back on 2 days (timing frame will be at least two)
                                if (section == "ESDE 4000.001, Monday/Wednesday @ 3:30-4:50" || section == "ESDE 4000.002, Tuesday/Thursday @ 12:30-1:50")
                                { counter = 2; backtwodays = true; }
                                else { counter = 1; backtwodays = false; }
                                 

                                if (location && major)
                                {
                                    count = 0;
                                    foreach (string day in Days)
                                    {
                                        int selectedcount = 0;
                                        String[] times, timesEnd;
                                        List<string> selectedTimeStudent = new List<string>(), selectedTimeTempstudent = new List<string>();
                                        List<StudentTimeCollection> StudentTimeCollection = new List<StudentTimeCollection>();
                                        if (day == "Monday")
                                        {
                                            string previoustime = null, removedTime = null; List<string> TempselectedTimeStudent = new List<string>();
                                            selectedTimeStudent = (from o in student.Schedule where o.Monday select o.Time).ToList();
                                            selectedTimeStudent = (from o in selectedTimeStudent
                                                                   where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                    && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                   select o).ToList();
                                            selectedTimeTempstudent = (from o in tempstudent.Schedule where o.Monday select o.Time).ToList();

                                            selectedTimeTempstudent = (from o in selectedTimeTempstudent
                                                                       where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                           && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                       select o).ToList();
                                            selectedTimeStudent = selectedTimeStudent.Intersect(selectedTimeTempstudent).ToList();
                                            foreach (var itemTime in selectedTimeStudent)
                                            {
                                                times = itemTime.Split(separators, StringSplitOptions.None);
                                                if (times[0] == selectedTimeStudent.First().Split(separators, StringSplitOptions.None)[0])
                                                    TempselectedTimeStudent.Add(itemTime);
                                                if (!string.IsNullOrEmpty(previoustime) && (DateTime.Parse(times[0]).Subtract(DateTime.Parse(previoustime)).TotalMinutes == 0))
                                                {
                                                    TempselectedTimeStudent.Add(itemTime);
                                                }
                                                else
                                                {
                                                    StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                                    TempselectedTimeStudent.Clear();
                                                    TempselectedTimeStudent.Add(itemTime);
                                                }
                                                previoustime = times[1];
                                                if (times[0] == selectedTimeStudent.Last().Split(separators, StringSplitOptions.None)[0])
                                                    StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                            }
                                            previoustime = string.Empty;
                                            foreach (var collectionTime in StudentTimeCollection)
                                            {

                                                selectedcount = collectionTime.studentTime.Count();
                                                if(backToback && counter==1)
                                                    if (selectedcount < 3)
                                                        selectedcount = 0;
                                                #region add group of students
                                                if (selectedcount > 1)
                                                {

                                                    times = (from o in collectionTime.studentTime select o).First().Split(separators, StringSplitOptions.None);
                                                    // startstudentime = DateTime.Parse(times[0]);
                                                    timesEnd = (from o in collectionTime.studentTime select o).Last().Split(separators, StringSplitOptions.None);
                                                    // endstudentime = DateTime.Parse(times[1]);
                                                    if (count == 0)
                                                    {

                                                        InfoStudent.StudentName1 = student.FirstName + " " + student.LastName;
                                                        InfoStudent.StudentName2 = tempstudent.FirstName + " " + tempstudent.LastName;
                                                        InfoStudent.Day = day;
                                                        InfoStudent.StartTime = times[0];
                                                        InfoStudent.EndTime = timesEnd[1];
                                                        InfoStudent.Section = student.Section;
                                                        InfoStudent.Transportation1 = student.Transportation;
                                                        InfoStudent.Transportation2 = tempstudent.Transportation;
                                                        InfoStudent.Email1 = student.Email;
                                                        InfoStudent.Email2 = tempstudent.Email;
                                                        InfoStudent.Major1 = student.Major;
                                                        InfoStudent.Major2 = tempstudent.Major;
                                                        InfoStudent.location = district;
                                                        InfoStudent.IstwoDaysback=backtwodays;
                                                        InfoStudent.IsbackToback = backToback;
                                                        //  GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        GroupingStudents.Add(InfoStudent);
                                                        IsGroupNoTranpsportChecked = true;
                                                        count++;

                                                    }
                                                    else if (count == 1)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime1 = times[0];
                                                        InfoStudent.OtherEndTime1 = timesEnd[1];
                                                        InfoStudent.OtherDay1 = day;
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 2)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime2 = times[0];
                                                        InfoStudent.OtherEndTime2 = timesEnd[1];
                                                        InfoStudent.OtherDay2 = day;
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 3)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime3 = times[0];
                                                        InfoStudent.OtherEndTime3 = timesEnd[1];
                                                        InfoStudent.OtherDay3 = day;
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 4)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime4 = times[0];
                                                        InfoStudent.OtherEndTime4 = timesEnd[1];
                                                        InfoStudent.OtherDay4 = day;
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 5)
                                                    {
                                                        IsGroupNoTranpsportChecked = true;
                                                        break;
                                                    }

                                                }
                                                #endregion;
                                            }
                                            //remove CI non enforcing two days back to back
                                            if (counter==2)
                                            {
                                                if (count >= counter)
                                                {
                                                    if ((!string.IsNullOrEmpty(InfoStudent.Day) != !string.IsNullOrEmpty(InfoStudent.OtherDay1)) || (!string.IsNullOrEmpty(InfoStudent.Day) != !string.IsNullOrEmpty(InfoStudent.OtherDay2))
                                                        || (!string.IsNullOrEmpty(InfoStudent.OtherDay1) != !string.IsNullOrEmpty(InfoStudent.OtherDay2)))
                                                        IsGroupNoTranpsportChecked = true;
                                                    else
                                                    {
                                                        selectedcount = 0;
                                                        IsGroupNoTranpsportChecked = false;
                                                    }
                                                 //   else { GroupingStudents.Remove(InfoStudent); count = 0; }
                                                  /*  if ((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().Day
                                                        == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().OtherDay1)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        selectedcount = 0;
                                                        IsGroupNoTranpsportChecked = false;

                                                    }
                                                    else if (((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().Day
                                                       == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay1) ||
                                                        ((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay2
                                                       == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay3))
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        selectedcount = 0;
                                                        IsGroupNoTranpsportChecked = false;
                                                    }*/
                                                }
                                                else
                                                {
                                                  //  GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                    selectedcount = 0;
                                                    IsGroupNoTranpsportChecked = false;
                                                }

                                            }
                                        }
                                        else if (day == "Tuesday")
                                        {
                                            string previoustime = null, removedTime = null; List<string> TempselectedTimeStudent = new List<string>();
                                            selectedTimeStudent = (from o in student.Schedule where o.Tuesday select o.Time).ToList();
                                            selectedTimeStudent = (from o in selectedTimeStudent
                                                                   where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                    && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                   select o).ToList();
                                            selectedTimeTempstudent = (from o in tempstudent.Schedule where o.Tuesday select o.Time).ToList();

                                            selectedTimeTempstudent = (from o in selectedTimeTempstudent
                                                                       where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                           && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                       select o).ToList();
                                            selectedTimeStudent = selectedTimeStudent.Intersect(selectedTimeTempstudent).ToList();
                                            foreach (var itemTime in selectedTimeStudent)
                                            {
                                                times = itemTime.Split(separators, StringSplitOptions.None);
                                                if (times[0] == selectedTimeStudent.First().Split(separators, StringSplitOptions.None)[0])
                                                    TempselectedTimeStudent.Add(itemTime);
                                                if (!string.IsNullOrEmpty(previoustime) && (DateTime.Parse(times[0]).Subtract(DateTime.Parse(previoustime)).TotalMinutes == 0))
                                                {
                                                    TempselectedTimeStudent.Add(itemTime);
                                                }
                                                else
                                                {
                                                    StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                                    TempselectedTimeStudent.Clear();
                                                    TempselectedTimeStudent.Add(itemTime);
                                                }
                                                previoustime = times[1];
                                                if (times[0] == selectedTimeStudent.Last().Split(separators, StringSplitOptions.None)[0])
                                                    StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                            }
                                            previoustime = string.Empty;
                                            foreach (var collectionTime in StudentTimeCollection)
                                            {

                                                selectedcount = collectionTime.studentTime.Count();
                                                if (backToback && counter == 1)
                                                    if (selectedcount < 3)
                                                        selectedcount = 0;
                                                #region add group of students
                                                if (selectedcount > 1)
                                                {

                                                    times = (from o in collectionTime.studentTime select o).First().Split(separators, StringSplitOptions.None);
                                                    // startstudentime = DateTime.Parse(times[0]);
                                                    timesEnd = (from o in collectionTime.studentTime select o).Last().Split(separators, StringSplitOptions.None);
                                                    // endstudentime = DateTime.Parse(times[1]);
                                                    if (count == 0)
                                                    {

                                                        InfoStudent.StudentName1 = student.FirstName + " " + student.LastName;
                                                        InfoStudent.StudentName2 = tempstudent.FirstName + " " + tempstudent.LastName;
                                                        InfoStudent.Day = day;
                                                        InfoStudent.StartTime = times[0];
                                                        InfoStudent.EndTime = timesEnd[1];
                                                        InfoStudent.Section = student.Section;
                                                        InfoStudent.Transportation1 = student.Transportation;
                                                        InfoStudent.Transportation2 = tempstudent.Transportation;
                                                        InfoStudent.Email1 = student.Email;
                                                        InfoStudent.Email2 = tempstudent.Email;
                                                        InfoStudent.Major1 = student.Major;
                                                        InfoStudent.Major2 = tempstudent.Major;
                                                        InfoStudent.location = district;
                                                        InfoStudent.IstwoDaysback = backtwodays;
                                                        InfoStudent.IsbackToback = backToback;
                                                        //  GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        GroupingStudents.Add(InfoStudent);
                                                        IsGroupNoTranpsportChecked = true;
                                                        count++;

                                                    }
                                                    else if (count == 1)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime1 = times[0];
                                                        InfoStudent.OtherEndTime1 = timesEnd[1];
                                                        InfoStudent.OtherDay1 = day;
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 2)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime2 = times[0];
                                                        InfoStudent.OtherEndTime2 = timesEnd[1];
                                                        InfoStudent.OtherDay2 = day;
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 3)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime3 = times[0];
                                                        InfoStudent.OtherEndTime3 = timesEnd[1];
                                                        InfoStudent.OtherDay3 = day;
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 4)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime4 = times[0];
                                                        InfoStudent.OtherEndTime4 = timesEnd[1];
                                                        InfoStudent.OtherDay4 = day;
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 5)
                                                    {
                                                        IsGroupNoTranpsportChecked = true;
                                                        break;
                                                    }

                                                }
                                                #endregion;
                                            }
                                            //removed CI non enforcing two day backToBack
                                            if (counter==2)
                                            {
                                                if (count >= counter)
                                                {
                                                    if ((!string.IsNullOrEmpty(InfoStudent.Day) != !string.IsNullOrEmpty(InfoStudent.OtherDay1)) || (!string.IsNullOrEmpty(InfoStudent.Day) != !string.IsNullOrEmpty(InfoStudent.OtherDay2))
                                                        || (!string.IsNullOrEmpty(InfoStudent.OtherDay1) != !string.IsNullOrEmpty(InfoStudent.OtherDay2)))
                                                        IsGroupNoTranpsportChecked = true;
                                                    else
                                                    {
                                                        selectedcount = 0;
                                                        IsGroupNoTranpsportChecked = false;
                                                    }
                                                  //  else { GroupingStudents.Remove(InfoStudent); count = 0; }
                                                  /*  if ((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().Day
                                                        == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().OtherDay1)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        selectedcount = 0;
                                                        IsGroupNoTranpsportChecked = false;

                                                    }
                                                    else if (((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().Day
                                                       == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay1) ||
                                                        ((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay2
                                                       == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay3))
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        selectedcount = 0;
                                                        IsGroupNoTranpsportChecked = false;
                                                    }*/
                                                }
                                                else
                                                {
                                                  //  GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                    selectedcount = 0;
                                                    IsGroupNoTranpsportChecked = false;
                                                }

                                            }
                                        }
                                        else if (day == "Wednesday")
                                        {
                                            string previoustime = null, removedTime = null; List<string> TempselectedTimeStudent = new List<string>(); 
                                            selectedTimeStudent = (from o in student.Schedule where o.Wednesday select o.Time).ToList();
                                            selectedTimeStudent = (from o in selectedTimeStudent
                                                                   where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                    && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                   select o).ToList();
                                            selectedTimeTempstudent = (from o in tempstudent.Schedule where o.Wednesday select o.Time).ToList();

                                            selectedTimeTempstudent = (from o in selectedTimeTempstudent
                                                                       where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                           && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                       select o).ToList();
                                            selectedTimeStudent = selectedTimeStudent.Intersect(selectedTimeTempstudent).ToList();
                                            foreach (var itemTime in selectedTimeStudent)
                                            {
                                                times = itemTime.Split(separators, StringSplitOptions.None);
                                                if (times[0] == selectedTimeStudent.First().Split(separators, StringSplitOptions.None)[0])
                                                    TempselectedTimeStudent.Add(itemTime);
                                                if (!string.IsNullOrEmpty(previoustime) && (DateTime.Parse(times[0]).Subtract(DateTime.Parse(previoustime)).TotalMinutes == 0))
                                                {
                                                    TempselectedTimeStudent.Add(itemTime);
                                                }
                                                else
                                                {
                                                    StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                                    TempselectedTimeStudent.Clear();
                                                    TempselectedTimeStudent.Add(itemTime);
                                                }
                                                previoustime = times[1];
                                                if (times[0] == selectedTimeStudent.Last().Split(separators, StringSplitOptions.None)[0])
                                                    StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                            }
                                            previoustime = string.Empty;
                                            foreach (var collectionTime in StudentTimeCollection)
                                            {

                                                selectedcount = collectionTime.studentTime.Count();
                                                if (backToback && counter == 1)
                                                    if (selectedcount < 3)
                                                        selectedcount = 0;
                                                #region add group of students
                                                if (selectedcount > 1)
                                                {

                                                    times = (from o in collectionTime.studentTime select o).First().Split(separators, StringSplitOptions.None);
                                                    // startstudentime = DateTime.Parse(times[0]);
                                                    timesEnd = (from o in collectionTime.studentTime select o).Last().Split(separators, StringSplitOptions.None);
                                                    // endstudentime = DateTime.Parse(times[1]);
                                                    if (count == 0)
                                                    {

                                                        InfoStudent.StudentName1 = student.FirstName + " " + student.LastName;
                                                        InfoStudent.StudentName2 = tempstudent.FirstName + " " + tempstudent.LastName;
                                                        InfoStudent.Day = day;
                                                        InfoStudent.StartTime = times[0];
                                                        InfoStudent.EndTime = timesEnd[1];
                                                        InfoStudent.Section = student.Section;
                                                        InfoStudent.Transportation1 = student.Transportation;
                                                        InfoStudent.Transportation2 = tempstudent.Transportation;
                                                        InfoStudent.Email1 = student.Email;
                                                        InfoStudent.Email2 = tempstudent.Email;
                                                        InfoStudent.Major1 = student.Major;
                                                        InfoStudent.Major2 = tempstudent.Major;
                                                        InfoStudent.location = district;
                                                        InfoStudent.IstwoDaysback = backtwodays;
                                                        InfoStudent.IsbackToback = backToback;
                                                        //  GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        GroupingStudents.Add(InfoStudent);
                                                        IsGroupNoTranpsportChecked = true;
                                                        count++;

                                                    }
                                                    else if (count == 1)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime1 = times[0];
                                                        InfoStudent.OtherEndTime1 = timesEnd[1];
                                                        InfoStudent.OtherDay1 = day;
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 2)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime2 = times[0];
                                                        InfoStudent.OtherEndTime2 = timesEnd[1];
                                                        InfoStudent.OtherDay2 = day;
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 3)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime3 = times[0];
                                                        InfoStudent.OtherEndTime3 = timesEnd[1];
                                                        InfoStudent.OtherDay3 = day;
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 4)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime4 = times[0];
                                                        InfoStudent.OtherEndTime4 = timesEnd[1];
                                                        InfoStudent.OtherDay4 = day;
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 5)
                                                    {
                                                        IsGroupNoTranpsportChecked = true;
                                                        break;
                                                    }

                                                }
                                                #endregion;
                                            }
                                            //remove Ci non enforcing two days backtoback
                                            if (counter==2)
                                            {
                                                if (count >= counter)
                                                {
                                                    if ((!string.IsNullOrEmpty(InfoStudent.Day) != !string.IsNullOrEmpty(InfoStudent.OtherDay1)) || (!string.IsNullOrEmpty(InfoStudent.Day) != !string.IsNullOrEmpty(InfoStudent.OtherDay2))
                                                        || (!string.IsNullOrEmpty(InfoStudent.OtherDay1) != !string.IsNullOrEmpty(InfoStudent.OtherDay2)))
                                                        IsGroupNoTranpsportChecked = true;
                                                    else
                                                    {
                                                        selectedcount = 0;
                                                        IsGroupNoTranpsportChecked = false;
                                                    }
                                                  //  else { GroupingStudents.Remove(InfoStudent); count = 0; }
                                                  /*  if ((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().Day
                                                        == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().OtherDay1)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        selectedcount = 0;
                                                        IsGroupNoTranpsportChecked = false;

                                                    }
                                                    else if (((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().Day
                                                       == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay1) ||
                                                        ((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay2
                                                       == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay3))
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        selectedcount = 0;
                                                        IsGroupNoTranpsportChecked = false;
                                                    }*/
                                                }
                                                else
                                                {
                                                //   GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                    selectedcount = 0;
                                                    IsGroupNoTranpsportChecked = false;
                                                }

                                            }
                                        }
                                        else if (day == "Thursday")
                                        {
                                            string previoustime = null, removedTime = null; List<string> TempselectedTimeStudent = new List<string>();
                                            selectedTimeStudent = (from o in student.Schedule where o.Thursday select o.Time).ToList();
                                            selectedTimeStudent = (from o in selectedTimeStudent
                                                                   where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                    && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                   select o).ToList();
                                            selectedTimeTempstudent = (from o in tempstudent.Schedule where o.Thursday select o.Time).ToList();

                                            selectedTimeTempstudent = (from o in selectedTimeTempstudent
                                                                       where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                           && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                       select o).ToList();
                                            selectedTimeStudent = selectedTimeStudent.Intersect(selectedTimeTempstudent).ToList();
                                            foreach (var itemTime in selectedTimeStudent)
                                            {
                                                times = itemTime.Split(separators, StringSplitOptions.None);
                                                if (times[0] == selectedTimeStudent.First().Split(separators, StringSplitOptions.None)[0])
                                                    TempselectedTimeStudent.Add(itemTime);
                                                if (!string.IsNullOrEmpty(previoustime) && (DateTime.Parse(times[0]).Subtract(DateTime.Parse(previoustime)).TotalMinutes == 0))
                                                {
                                                    TempselectedTimeStudent.Add(itemTime);
                                                }
                                                else
                                                {
                                                    StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                                    TempselectedTimeStudent.Clear();
                                                    TempselectedTimeStudent.Add(itemTime);
                                                }
                                                previoustime = times[1];
                                                if (times[0] == selectedTimeStudent.Last().Split(separators, StringSplitOptions.None)[0])
                                                    StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                            }
                                            previoustime = string.Empty;
                                            foreach (var collectionTime in StudentTimeCollection)
                                            {

                                                selectedcount = collectionTime.studentTime.Count();
                                                if (backToback && counter == 1)
                                                    if (selectedcount < 3)
                                                        selectedcount = 0;
                                                #region add group of students
                                                if (selectedcount > 1)
                                                {

                                                    times = (from o in collectionTime.studentTime select o).First().Split(separators, StringSplitOptions.None);
                                                    // startstudentime = DateTime.Parse(times[0]);
                                                    timesEnd = (from o in collectionTime.studentTime select o).Last().Split(separators, StringSplitOptions.None);
                                                    // endstudentime = DateTime.Parse(times[1]);
                                                    if (count == 0)
                                                    {

                                                        InfoStudent.StudentName1 = student.FirstName + " " + student.LastName;
                                                        InfoStudent.StudentName2 = tempstudent.FirstName + " " + tempstudent.LastName;
                                                        InfoStudent.Day = day;
                                                        InfoStudent.StartTime = times[0];
                                                        InfoStudent.EndTime = timesEnd[1];
                                                        InfoStudent.Section = student.Section;
                                                        InfoStudent.Transportation1 = student.Transportation;
                                                        InfoStudent.Transportation2 = tempstudent.Transportation;
                                                        InfoStudent.Email1 = student.Email;
                                                        InfoStudent.Email2 = tempstudent.Email;
                                                        InfoStudent.Major1 = student.Major;
                                                        InfoStudent.Major2 = tempstudent.Major;
                                                        InfoStudent.location = district;
                                                        InfoStudent.IstwoDaysback = backtwodays;
                                                        InfoStudent.IsbackToback = backToback;
                                                        //  GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        GroupingStudents.Add(InfoStudent);
                                                        IsGroupNoTranpsportChecked = true;
                                                        count++;

                                                    }
                                                    else if (count == 1)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime1 = times[0];
                                                        InfoStudent.OtherEndTime1 = timesEnd[1];
                                                        InfoStudent.OtherDay1 = day;
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 2)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime2 = times[0];
                                                        InfoStudent.OtherEndTime2 = timesEnd[1];
                                                        InfoStudent.OtherDay2 = day;
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 3)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime3 = times[0];
                                                        InfoStudent.OtherEndTime3 = timesEnd[1];
                                                        InfoStudent.OtherDay3 = day;
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 4)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime4 = times[0];
                                                        InfoStudent.OtherEndTime4 = timesEnd[1];
                                                        InfoStudent.OtherDay4 = day;
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 5)
                                                    {
                                                        IsGroupNoTranpsportChecked = true;
                                                        break;
                                                    }

                                                }
                                                #endregion;
                                            }
                                            //remove CI non enforcing two days backToback
                                            if (counter==2)
                                            {
                                                if (count >= counter)
                                                {
                                                    if ((!string.IsNullOrEmpty(InfoStudent.Day) != !string.IsNullOrEmpty(InfoStudent.OtherDay1)) || (!string.IsNullOrEmpty(InfoStudent.Day) != !string.IsNullOrEmpty(InfoStudent.OtherDay2))
                                                           || (!string.IsNullOrEmpty(InfoStudent.OtherDay1) != !string.IsNullOrEmpty(InfoStudent.OtherDay2)))
                                                        IsGroupNoTranpsportChecked = true;
                                                    else
                                                    {
                                                        selectedcount = 0;
                                                        IsGroupNoTranpsportChecked = false;
                                                    }
                                                   // else { GroupingStudents.Remove(InfoStudent); count = 0; }
                                                   /* if ((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().Day
                                                        == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().OtherDay1)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        selectedcount = 0;
                                                        IsGroupNoTranpsportChecked = false;
                                                    }
                                                    else if (((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().Day
                                                       == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay1) ||
                                                        ((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay2
                                                       == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay3))
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        selectedcount = 0;
                                                        IsGroupNoTranpsportChecked = false;
                                                    }*/
                                                }
                                                else
                                                {
                                               //     GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                    selectedcount = 0;
                                                    IsGroupNoTranpsportChecked = false;
                                                }

                                            }
                                        }
                                        else if (day == "Friday")
                                        {
                                            string previoustime = null, removedTime = null; List<string> TempselectedTimeStudent = new List<string>(); int getIndex = 0;
                                            selectedTimeStudent = (from o in student.Schedule where o.Friday select o.Time).ToList();
                                            selectedTimeStudent = (from o in selectedTimeStudent
                                                                   where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                    && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                   select o).ToList();
                                            selectedTimeTempstudent = (from o in tempstudent.Schedule where o.Friday select o.Time).ToList();

                                            selectedTimeTempstudent = (from o in selectedTimeTempstudent
                                                                       where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                           && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                       select o).ToList();
                                            selectedTimeStudent = selectedTimeStudent.Intersect(selectedTimeTempstudent).ToList();
                                            foreach (var itemTime in selectedTimeStudent)
                                            {
                                                times = itemTime.Split(separators, StringSplitOptions.None);
                                                if (times[0] == selectedTimeStudent.First().Split(separators, StringSplitOptions.None)[0])
                                                    TempselectedTimeStudent.Add(itemTime);
                                                if (!string.IsNullOrEmpty(previoustime) && (DateTime.Parse(times[0]).Subtract(DateTime.Parse(previoustime)).TotalMinutes == 0))
                                                {
                                                    TempselectedTimeStudent.Add(itemTime);
                                                }
                                                else
                                                {
                                                    StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                                    TempselectedTimeStudent.Clear();
                                                    TempselectedTimeStudent.Add(itemTime);
                                                }
                                                previoustime = times[1];
                                                if (times[0] == selectedTimeStudent.Last().Split(separators, StringSplitOptions.None)[0])
                                                    StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                            }
                                            previoustime = string.Empty;
                                            foreach (var collectionTime in StudentTimeCollection)
                                            {

                                                selectedcount = collectionTime.studentTime.Count();
                                                if (backToback && counter == 1)
                                                    if (selectedcount < 3)
                                                        selectedcount = 0;
                                                #region add group of students
                                                if (selectedcount > 1)
                                                {

                                                    times = (from o in collectionTime.studentTime select o).First().Split(separators, StringSplitOptions.None);
                                                    // startstudentime = DateTime.Parse(times[0]);
                                                    timesEnd = (from o in collectionTime.studentTime select o).Last().Split(separators, StringSplitOptions.None);
                                                    // endstudentime = DateTime.Parse(times[1]);
                                                    if (count == 0)
                                                    {

                                                        InfoStudent.StudentName1 = student.FirstName + " " + student.LastName;
                                                        InfoStudent.StudentName2 = tempstudent.FirstName + " " + tempstudent.LastName;
                                                        InfoStudent.Day = day;
                                                        InfoStudent.StartTime = times[0];
                                                        InfoStudent.EndTime = timesEnd[1];
                                                        InfoStudent.Section = student.Section;
                                                        InfoStudent.Transportation1 = student.Transportation;
                                                        InfoStudent.Transportation2 = tempstudent.Transportation;
                                                        InfoStudent.Email1 = student.Email;
                                                        InfoStudent.Email2 = tempstudent.Email;
                                                        InfoStudent.Major1 = student.Major;
                                                        InfoStudent.Major2 = tempstudent.Major;
                                                        InfoStudent.location = district;
                                                        InfoStudent.IstwoDaysback = backtwodays;
                                                        InfoStudent.IsbackToback = backToback;
                                                        //  GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        GroupingStudents.Add(InfoStudent);
                                                        IsGroupNoTranpsportChecked = true;
                                                        count++;

                                                    }
                                                    else if (count == 1)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime1 = times[0];
                                                        InfoStudent.OtherEndTime1 = timesEnd[1];
                                                        InfoStudent.OtherDay1 = day;
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 2)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime2 = times[0];
                                                        InfoStudent.OtherEndTime2 = timesEnd[1];
                                                        InfoStudent.OtherDay2 = day;
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 3)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime3 = times[0];
                                                        InfoStudent.OtherEndTime3 = timesEnd[1];
                                                        InfoStudent.OtherDay3 = day;
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 4)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime4 = times[0];
                                                        InfoStudent.OtherEndTime4 = timesEnd[1];
                                                        InfoStudent.OtherDay4 = day;
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 5)
                                                    {
                                                        IsGroupNoTranpsportChecked = true;
                                                        break;
                                                    }

                                                }
                                                #endregion;
                                            }
                                            //remove CI students non enforcing two days back To back
                                            if (counter==2)
                                            {
                                                if (count >= counter)
                                                {
                                                    if ((!string.IsNullOrEmpty(InfoStudent.Day) != !string.IsNullOrEmpty(InfoStudent.OtherDay1)) || (!string.IsNullOrEmpty(InfoStudent.Day) != !string.IsNullOrEmpty(InfoStudent.OtherDay2))
                                                        || (!string.IsNullOrEmpty(InfoStudent.OtherDay1) != !string.IsNullOrEmpty(InfoStudent.OtherDay2)))
                                                        IsGroupNoTranpsportChecked = true;
                                                    else
                                                    {
                                                        selectedcount = 0;
                                                        IsGroupNoTranpsportChecked = false;
                                                    }
                                                 //   else { GroupingStudents.Remove(InfoStudent); count = 0; }
                                                   /* if ((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().Day
                                                        == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().OtherDay1)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        selectedcount = 0;
                                                        IsGroupNoTranpsportChecked = false;

                                                    }
                                                    else if (((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().Day
                                                       == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay1) ||
                                                        ((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay2
                                                       == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay3))
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        selectedcount = 0;
                                                        IsGroupNoTranpsportChecked = false;
                                                    }*/
                                                }
                                                else
                                                {
                                          //          GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                    selectedcount = 0;
                                                    IsGroupNoTranpsportChecked = false;
                                                }

                                            }

                                        }
                                        #region old unused
                                        /*
                                        if (selectedcount > 2)
                                        {

                                            times = (from o in selectedTimeStudent select o).First().Split(separators, StringSplitOptions.None);
                                            // startstudentime = DateTime.Parse(times[0]);
                                            timesEnd = (from o in selectedTimeStudent select o).Last().Split(separators, StringSplitOptions.None);
                                            // endstudentime = DateTime.Parse(times[1]);
                                            if (count == 0)
                                            {

                                                InfoStudent.StudentName1 = student.FirstName + " " + student.LastName;
                                                InfoStudent.StudentName2 = tempstudent.FirstName + " " + tempstudent.LastName;
                                                InfoStudent.Day = day;
                                                InfoStudent.StartTime = times[0];
                                                InfoStudent.EndTime = timesEnd[1];
                                                InfoStudent.Section = student.Section;
                                                InfoStudent.Transportation1 = student.Transportation;
                                                InfoStudent.Transportation2 = tempstudent.Transportation;
                                                InfoStudent.Email1 = student.Email;
                                                InfoStudent.Email2 = tempstudent.Email;
                                                InfoStudent.location = district;
                                                InfoStudent.Major1 = student.Major;
                                                InfoStudent.Major2 = tempstudent.Major;
                                                InfoStudent.IsbackToback=backToback;                                             

                                                //  GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                GroupingStudents.Add(InfoStudent);
                                                IsGroupNoTranpsportChecked = true;
                                                count++;

                                            }
                                            else if (count == 1)
                                            {
                                                GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                InfoStudent.OtherStartTime1 = times[0];
                                                InfoStudent.OtherEndTime1 = timesEnd[1];
                                                InfoStudent.OtherDay1 = day;
                                                GroupingStudents.Add(InfoStudent);
                                                count++;
                                            }
                                            else if (count == 2)
                                            {
                                                GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                InfoStudent.OtherStartTime2 = times[0];
                                                InfoStudent.OtherEndTime2 = timesEnd[1];
                                                InfoStudent.OtherDay2 = day;
                                                GroupingStudents.Add(InfoStudent);
                                                count++;
                                            }
                                            else if (count == 3)
                                            {
                                                GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                InfoStudent.OtherStartTime3 = times[0];
                                                InfoStudent.OtherEndTime3 = timesEnd[1];
                                                InfoStudent.OtherDay3 = day;
                                                GroupingStudents.Add(InfoStudent);
                                                count++;
                                            }
                                            else if (count == 4)
                                            {
                                                GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                InfoStudent.OtherStartTime4 = times[0];
                                                InfoStudent.OtherEndTime4 = timesEnd[1];
                                                InfoStudent.OtherDay4 = day;
                                                GroupingStudents.Add(InfoStudent);
                                                count++;
                                            }
                                            else if (count == 5)
                                            {
                                                IsGroupNoTranpsportChecked = true;
                                                break;
                                            }

                                        }
                                         * */
#endregion;
                                        if (IsGroupNoTranpsportChecked && count == 5)
                                            break;
                                    }
                                }
                            }
                            if (IsGroupNoTranpsportChecked)
                            {
                                //TransportStudentstep1.Remove(tempstudent);
                                removedStudentPriority = Transportstud;
                                break;
                            }
                        }
                    if (IsGroupNoTranpsportChecked)
                    {
                        //PriorityTransportStudents = (from o in PriorityTransportStudents where o.email != removedStudentPriority.email select o).ToList();
                        PriorityTransportStudents.Remove(removedStudentPriority);
                        removedStudentPriority = NoTransportstud;
                    }


                }
                #region Rest of Transport Students
                PriorityTransportStudents = PriorityTransportStudents.OrderBy(o => o.priority).ToList();
                foreach (var restTransportStudent in PriorityTransportStudents)
                {
                    StudentStep2 student = (from o in TransportStudentstep2 where o.Email == restTransportStudent.email select o).FirstOrDefault();
                    MatchingStudent InfoStudent = new MatchingStudent();
                    restOfTransportChecked = false;
                    // if (removedStudentPriority.email != restTransportStudent.email)
                    foreach (var tempRestTransportStudent in PriorityTransportStudents)
                    {
                        if ((from o in GroupingStudents where (o.Email2 == tempRestTransportStudent.email || o.Email2 == restTransportStudent.email || o.Email1 == restTransportStudent.email || o.Email1 == tempRestTransportStudent.email) select o).Count() <= 0)
                        {
                            StudentStep2 tempstudent = (from o in TransportStudentstep2 where o.Email == tempRestTransportStudent.email select o).FirstOrDefault();
                            district = 0;
                            if (!string.IsNullOrEmpty(student.Email) && !string.IsNullOrEmpty(tempstudent.Email) && student.Email != tempstudent.Email)
                            {
                                if ((tempstudent.DistrictDenton == 1 || tempstudent.DistrictDenton == 2 ||
                                     tempstudent.DistrictDenton == 3) &&
                                    (student.DistrictDenton == 1 || student.DistrictDenton == 2 ||
                                     student.DistrictDenton == 3)
                                    )
                                {
                                    location = true;
                                    district = 1;
                                }
                                if ((tempstudent.DistrictLewisville == 1 || tempstudent.DistrictLewisville == 2 ||
                                     tempstudent.DistrictLewisville == 3) &&
                                (student.DistrictLewisville == 1 || student.DistrictLewisville == 2 ||
                                 student.DistrictLewisville == 3))
                                {
                                    location = true;
                                    district = 2;
                                }
                                if ((tempstudent.DistrictMckinney == 1 || tempstudent.DistrictMckinney == 2 ||
                                     tempstudent.DistrictMckinney == 3) &&
                                    (student.DistrictMckinney == 1 || student.DistrictMckinney == 2 ||
                                     student.DistrictMckinney == 3)
                                    )
                                {
                                    location = true;
                                    district = 3;
                                }
                                if ((tempstudent.DistrictSanger == 1 || tempstudent.DistrictSanger == 2 ||
                                          tempstudent.DistrictSanger == 3) &&
                                     (student.DistrictSanger == 1 || student.DistrictSanger == 2 ||
                                      student.DistrictSanger == 3))
                                {
                                    location = true;
                                    district = 4;
                                }
                                if ((tempstudent.DistrictProsper == 1 || tempstudent.DistrictProsper == 2 ||
                                     tempstudent.DistrictProsper == 3) &&
                                    (student.DistrictProsper == 1 || student.DistrictProsper == 2 ||
                                     student.DistrictProsper == 3)
                                    )
                                {
                                    location = true;
                                    district = 5;
                                }
                          /*      if ((tempstudent.DistrictForthWorth == 1 || tempstudent.DistrictForthWorth == 2 ||
                                     tempstudent.DistrictForthWorth == 3) &&
                                (student.DistrictForthWorth == 1 || student.DistrictForthWorth == 2 ||
                                 student.DistrictForthWorth == 3))
                                {
                                    location = true;
                                    district = 4;
                                }*/
                             /*   if (student.Major == tempstudent.Major)
                                    major = true;
                                else major = false;*/
                                major = false;
                                if ((student.Major == "Mathematics" || student.Major == "4-8 Math CI Students Only") && (tempstudent.Major == "Mathematics" || tempstudent.Major == "4-8 Math CI Students Only"))
                                    major = true;
                                if ((student.Major == "Science" || student.Major == "4-8 Science CI Students Only") && (tempstudent.Major == "Science" || tempstudent.Major == "4-8 Science CI Students Only"))
                                    major = true;  
                                if (section == "ESDE 4000.001, Monday/Wednesday @ 3:30-4:50" || section == "ESDE 4000.002, Tuesday/Thursday @ 12:30-1:50"
                                    || section == "TXTX 1300.001, Tuesday/Thursday @ 2:00-3:20")
                                    backToback = true;
                                else backToback = false;

                                // Enforce CI students to have back to back on 2 days (timing frame will be at least two)
                                if (section == "ESDE 4000.001, Monday/Wednesday @ 3:30-4:50" || section == "ESDE 4000.002, Tuesday/Thursday @ 12:30-1:50")
                                { counter = 2; backtwodays = true; }
                                else { counter = 1; backtwodays = false; }

                                if (location && major)
                                {
                                    count = 0;
                                    foreach (string day in Days)
                                    {
                                        int selectedcount = 0;
                                        String[] times, timesEnd;
                                        List<string> selectedTimeStudent = new List<string>(), selectedTimeTempstudent = new List<string>();
                                        List<StudentTimeCollection> StudentTimeCollection = new List<StudentTimeCollection>();
                                        if (day == "Monday")
                                        {
                                            string previoustime = null, removedTime = null; List<string> TempselectedTimeStudent = new List<string>();
                                            selectedTimeStudent = (from o in student.Schedule where o.Monday select o.Time).ToList();
                                            selectedTimeStudent = (from o in selectedTimeStudent
                                                                   where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                    && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                   select o).ToList();
                                            selectedTimeTempstudent = (from o in tempstudent.Schedule where o.Monday select o.Time).ToList();

                                            selectedTimeTempstudent = (from o in selectedTimeTempstudent
                                                                       where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                           && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                       select o).ToList();
                                            selectedTimeStudent = selectedTimeStudent.Intersect(selectedTimeTempstudent).ToList();
                                            foreach (var itemTime in selectedTimeStudent)
                                            {
                                                times = itemTime.Split(separators, StringSplitOptions.None);
                                                if (times[0] == selectedTimeStudent.First().Split(separators, StringSplitOptions.None)[0])
                                                    TempselectedTimeStudent.Add(itemTime);
                                                if (!string.IsNullOrEmpty(previoustime) && (DateTime.Parse(times[0]).Subtract(DateTime.Parse(previoustime)).TotalMinutes == 0))
                                                {
                                                    TempselectedTimeStudent.Add(itemTime);
                                                }
                                                else
                                                {
                                                    StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                                    TempselectedTimeStudent.Clear();
                                                    TempselectedTimeStudent.Add(itemTime);
                                                }
                                                previoustime = times[1];
                                                if (times[0] == selectedTimeStudent.Last().Split(separators, StringSplitOptions.None)[0])
                                                    StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                            }
                                            previoustime = string.Empty;
                                            foreach (var collectionTime in StudentTimeCollection)
                                            {

                                                selectedcount = collectionTime.studentTime.Count();
                                                if (backToback && counter == 1)
                                                    if (selectedcount < 3)
                                                        selectedcount = 0;
                                                #region add group of students
                                                if (selectedcount > 1)
                                                {

                                                    times = (from o in collectionTime.studentTime select o).First().Split(separators, StringSplitOptions.None);
                                                    // startstudentime = DateTime.Parse(times[0]);
                                                    timesEnd = (from o in collectionTime.studentTime select o).Last().Split(separators, StringSplitOptions.None);
                                                    // endstudentime = DateTime.Parse(times[1]);
                                                    if (count == 0)
                                                    {

                                                        InfoStudent.StudentName1 = student.FirstName + " " + student.LastName;
                                                        InfoStudent.StudentName2 = tempstudent.FirstName + " " + tempstudent.LastName;
                                                        InfoStudent.Day = day;
                                                        InfoStudent.StartTime = times[0];
                                                        InfoStudent.EndTime = timesEnd[1];
                                                        InfoStudent.Section = student.Section;
                                                        InfoStudent.Transportation1 = student.Transportation;
                                                        InfoStudent.Transportation2 = tempstudent.Transportation;
                                                        InfoStudent.Email1 = student.Email;
                                                        InfoStudent.Email2 = tempstudent.Email;
                                                        InfoStudent.Major1 = student.Major;
                                                        InfoStudent.Major2 = tempstudent.Major;
                                                        InfoStudent.location = district;
                                                        InfoStudent.IstwoDaysback = backtwodays;
                                                        InfoStudent.IsbackToback = backToback;
                                                        //  GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        GroupingStudents.Add(InfoStudent);
                                                        IsGroupNoTranpsportChecked = true;
                                                        count++;

                                                    }
                                                    else if (count == 1)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime1 = times[0];
                                                        InfoStudent.OtherEndTime1 = timesEnd[1];
                                                        InfoStudent.OtherDay1 = day;
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 2)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime2 = times[0];
                                                        InfoStudent.OtherEndTime2 = timesEnd[1];
                                                        InfoStudent.OtherDay2 = day;
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 3)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime3 = times[0];
                                                        InfoStudent.OtherEndTime3 = timesEnd[1];
                                                        InfoStudent.OtherDay3 = day;
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 4)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime4 = times[0];
                                                        InfoStudent.OtherEndTime4 = timesEnd[1];
                                                        InfoStudent.OtherDay4 = day;
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 5)
                                                    {
                                                        IsGroupNoTranpsportChecked = true;
                                                        break;
                                                    }

                                                }
                                                #endregion;
                                            }
                                            if (counter==2)
                                            {
                                                if (count >= counter)
                                                {
                                                    if ((!string.IsNullOrEmpty(InfoStudent.Day) != !string.IsNullOrEmpty(InfoStudent.OtherDay1)) || (!string.IsNullOrEmpty(InfoStudent.Day) != !string.IsNullOrEmpty(InfoStudent.OtherDay2))
                                                        || (!string.IsNullOrEmpty(InfoStudent.OtherDay1) != !string.IsNullOrEmpty(InfoStudent.OtherDay2)))
                                                        IsGroupNoTranpsportChecked = true;
                                                    else
                                                    {
                                                        selectedcount = 0;
                                                        count = 0;
                                                    }
                                                  //  else { GroupingStudents.Remove(InfoStudent); count = 0; }
                                                /*    if ((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().Day
                                                        == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().OtherDay1)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        selectedcount = 0;
                                                        count = 0;
                                                    }
                                                    else if (((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().Day
                                                       == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay1) ||
                                                        ((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay2
                                                       == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay3))
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        selectedcount = 0;
                                                        count = 0;
                                                    }*/
                                                }
                                                else
                                                {
                                             //       GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                    selectedcount = 0;
                                                    count = 0;
                                                }

                                            }


                                        }
                                        else if (day == "Tuesday")
                                        {
                                            string previoustime = null, removedTime = null; List<string> TempselectedTimeStudent = new List<string>(); int getIndex = 0;
                                            selectedTimeStudent = (from o in student.Schedule where o.Tuesday select o.Time).ToList();
                                            selectedTimeStudent = (from o in selectedTimeStudent
                                                                   where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                    && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                   select o).ToList();
                                            selectedTimeTempstudent = (from o in tempstudent.Schedule where o.Tuesday select o.Time).ToList();

                                            selectedTimeTempstudent = (from o in selectedTimeTempstudent
                                                                       where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                           && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                       select o).ToList();
                                            selectedTimeStudent = selectedTimeStudent.Intersect(selectedTimeTempstudent).ToList();
                                            foreach (var itemTime in selectedTimeStudent)
                                            {
                                                times = itemTime.Split(separators, StringSplitOptions.None);
                                                if (times[0] == selectedTimeStudent.First().Split(separators, StringSplitOptions.None)[0])
                                                    TempselectedTimeStudent.Add(itemTime);
                                                if (!string.IsNullOrEmpty(previoustime) && (DateTime.Parse(times[0]).Subtract(DateTime.Parse(previoustime)).TotalMinutes == 0))
                                                {
                                                    TempselectedTimeStudent.Add(itemTime);
                                                }
                                                else
                                                {
                                                    StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                                    TempselectedTimeStudent.Clear();
                                                    TempselectedTimeStudent.Add(itemTime);
                                                }
                                                previoustime = times[1];
                                                if (times[0] == selectedTimeStudent.Last().Split(separators, StringSplitOptions.None)[0])
                                                    StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                            }
                                            previoustime = string.Empty;
                                            foreach (var collectionTime in StudentTimeCollection)
                                            {

                                                selectedcount = collectionTime.studentTime.Count();
                                                if (backToback && counter == 1)
                                                    if (selectedcount < 3)
                                                        selectedcount = 0;
                                                #region add group of students
                                                if (selectedcount > 1)
                                                {

                                                    times = (from o in collectionTime.studentTime select o).First().Split(separators, StringSplitOptions.None);
                                                    // startstudentime = DateTime.Parse(times[0]);
                                                    timesEnd = (from o in collectionTime.studentTime select o).Last().Split(separators, StringSplitOptions.None);
                                                    // endstudentime = DateTime.Parse(times[1]);
                                                    if (count == 0)
                                                    {

                                                        InfoStudent.StudentName1 = student.FirstName + " " + student.LastName;
                                                        InfoStudent.StudentName2 = tempstudent.FirstName + " " + tempstudent.LastName;
                                                        InfoStudent.Day = day;
                                                        InfoStudent.StartTime = times[0];
                                                        InfoStudent.EndTime = timesEnd[1];
                                                        InfoStudent.Section = student.Section;
                                                        InfoStudent.Transportation1 = student.Transportation;
                                                        InfoStudent.Transportation2 = tempstudent.Transportation;
                                                        InfoStudent.Email1 = student.Email;
                                                        InfoStudent.Email2 = tempstudent.Email;
                                                        InfoStudent.Major1 = student.Major;
                                                        InfoStudent.Major2 = tempstudent.Major;
                                                        InfoStudent.location = district;
                                                        InfoStudent.IstwoDaysback = backtwodays;
                                                        InfoStudent.IsbackToback = backToback;
                                                        //  GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        GroupingStudents.Add(InfoStudent);
                                                        IsGroupNoTranpsportChecked = true;
                                                        count++;

                                                    }
                                                    else if (count == 1)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime1 = times[0];
                                                        InfoStudent.OtherEndTime1 = timesEnd[1];
                                                        InfoStudent.OtherDay1 = day;
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 2)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime2 = times[0];
                                                        InfoStudent.OtherEndTime2 = timesEnd[1];
                                                        InfoStudent.OtherDay2 = day;
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 3)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime3 = times[0];
                                                        InfoStudent.OtherEndTime3 = timesEnd[1];
                                                        InfoStudent.OtherDay3 = day;
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 4)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime4 = times[0];
                                                        InfoStudent.OtherEndTime4 = timesEnd[1];
                                                        InfoStudent.OtherDay4 = day;
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 5)
                                                    {
                                                        IsGroupNoTranpsportChecked = true;
                                                        break;
                                                    }

                                                }
                                                #endregion;
                                            }
                                            if (counter==2)
                                            {
                                                if (count >= counter)
                                                {
                                                    if ((!string.IsNullOrEmpty(InfoStudent.Day) != !string.IsNullOrEmpty(InfoStudent.OtherDay1)) || (!string.IsNullOrEmpty(InfoStudent.Day) != !string.IsNullOrEmpty(InfoStudent.OtherDay2))
                                                        || (!string.IsNullOrEmpty(InfoStudent.OtherDay1) != !string.IsNullOrEmpty(InfoStudent.OtherDay2)))
                                                        IsGroupNoTranpsportChecked = true;
                                                    else
                                                    {
                                                        selectedcount = 0;
                                                        count = 0;
                                                    }
                                                //    else { GroupingStudents.Remove(InfoStudent); count = 0; }
                                                  /*  if ((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().Day
                                                        == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().OtherDay1)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        selectedcount = 0;
                                                        count = 0;
                                                    }
                                                    else if (((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().Day
                                                       == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay1) ||
                                                        ((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay2
                                                       == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay3))
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        selectedcount = 0;
                                                        count = 0;
                                                    }*/
                                                }
                                                else
                                                {
                                             //       GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                    selectedcount = 0;
                                                    count = 0;
                                                }

                                            }

                                        }
                                        else if (day == "Wednesday")
                                        {
                                            string previoustime = null, removedTime = null; List<string> TempselectedTimeStudent = new List<string>();
                                            selectedTimeStudent = (from o in student.Schedule where o.Wednesday select o.Time).ToList();
                                            selectedTimeStudent = (from o in selectedTimeStudent
                                                                   where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                    && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                   select o).ToList();
                                            selectedTimeTempstudent = (from o in tempstudent.Schedule where o.Wednesday select o.Time).ToList();

                                            selectedTimeTempstudent = (from o in selectedTimeTempstudent
                                                                       where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                           && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                       select o).ToList();
                                            selectedTimeStudent = selectedTimeStudent.Intersect(selectedTimeTempstudent).ToList();
                                            foreach (var itemTime in selectedTimeStudent)
                                            {
                                                times = itemTime.Split(separators, StringSplitOptions.None);
                                                if (times[0] == selectedTimeStudent.First().Split(separators, StringSplitOptions.None)[0])
                                                    TempselectedTimeStudent.Add(itemTime);
                                                if (!string.IsNullOrEmpty(previoustime) && (DateTime.Parse(times[0]).Subtract(DateTime.Parse(previoustime)).TotalMinutes == 0))
                                                {
                                                    TempselectedTimeStudent.Add(itemTime);
                                                }
                                                else
                                                {
                                                    StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                                    TempselectedTimeStudent.Clear();
                                                    TempselectedTimeStudent.Add(itemTime);
                                                }
                                                previoustime = times[1];
                                                if (times[0] == selectedTimeStudent.Last().Split(separators, StringSplitOptions.None)[0])
                                                    StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                            }
                                            previoustime = string.Empty;
                                            foreach (var collectionTime in StudentTimeCollection)
                                            {

                                                selectedcount = collectionTime.studentTime.Count();
                                                if (backToback && counter == 1)
                                                    if (selectedcount < 3)
                                                        selectedcount = 0;
                                                #region add group of students
                                                if (selectedcount > 1)
                                                {

                                                    times = (from o in collectionTime.studentTime select o).First().Split(separators, StringSplitOptions.None);
                                                    // startstudentime = DateTime.Parse(times[0]);
                                                    timesEnd = (from o in collectionTime.studentTime select o).Last().Split(separators, StringSplitOptions.None);
                                                    // endstudentime = DateTime.Parse(times[1]);
                                                    if (count == 0)
                                                    {

                                                        InfoStudent.StudentName1 = student.FirstName + " " + student.LastName;
                                                        InfoStudent.StudentName2 = tempstudent.FirstName + " " + tempstudent.LastName;
                                                        InfoStudent.Day = day;
                                                        InfoStudent.StartTime = times[0];
                                                        InfoStudent.EndTime = timesEnd[1];
                                                        InfoStudent.Section = student.Section;
                                                        InfoStudent.Transportation1 = student.Transportation;
                                                        InfoStudent.Transportation2 = tempstudent.Transportation;
                                                        InfoStudent.Email1 = student.Email;
                                                        InfoStudent.Email2 = tempstudent.Email;
                                                        InfoStudent.Major1 = student.Major;
                                                        InfoStudent.Major2 = tempstudent.Major;
                                                        InfoStudent.location = district;
                                                        InfoStudent.IstwoDaysback = backtwodays;
                                                        InfoStudent.IsbackToback = backToback;
                                                        //  GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        GroupingStudents.Add(InfoStudent);
                                                        IsGroupNoTranpsportChecked = true;
                                                        count++;

                                                    }
                                                    else if (count == 1)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime1 = times[0];
                                                        InfoStudent.OtherEndTime1 = timesEnd[1];
                                                        InfoStudent.OtherDay1 = day;
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 2)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime2 = times[0];
                                                        InfoStudent.OtherEndTime2 = timesEnd[1];
                                                        InfoStudent.OtherDay2 = day;
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 3)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime3 = times[0];
                                                        InfoStudent.OtherEndTime3 = timesEnd[1];
                                                        InfoStudent.OtherDay3 = day;
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 4)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime4 = times[0];
                                                        InfoStudent.OtherEndTime4 = timesEnd[1];
                                                        InfoStudent.OtherDay4 = day;
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 5)
                                                    {
                                                        IsGroupNoTranpsportChecked = true;
                                                        break;
                                                    }

                                                }
                                                #endregion;
                                            }
                                            if (counter==2)
                                            {
                                                if (count >= counter)
                                                {
                                                    if ((!string.IsNullOrEmpty(InfoStudent.Day) != !string.IsNullOrEmpty(InfoStudent.OtherDay1)) || (!string.IsNullOrEmpty(InfoStudent.Day) != !string.IsNullOrEmpty(InfoStudent.OtherDay2))
                                                        || (!string.IsNullOrEmpty(InfoStudent.OtherDay1) != !string.IsNullOrEmpty(InfoStudent.OtherDay2)))
                                                        IsGroupNoTranpsportChecked = true;
                                                    else
                                                    {
                                                        selectedcount = 0;
                                                        count = 0;
                                                    }
                                                //    else { GroupingStudents.Remove(InfoStudent); count = 0; }
                                                 /*   if ((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().Day
                                                        == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().OtherDay1)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        selectedcount = 0;
                                                        count = 0;
                                                    }
                                                    else if (((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().Day
                                                       == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay1) ||
                                                        ((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay2
                                                       == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay3))
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        selectedcount = 0;
                                                        count = 0;
                                                    }*/
                                                }
                                                else
                                                {
                                               //     GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                    selectedcount = 0;
                                                    count = 0;
                                                }

                                            }

                                        }
                                        else if (day == "Thursday")
                                        {
                                            string previoustime = null, removedTime = null; List<string> TempselectedTimeStudent = new List<string>();
                                            selectedTimeStudent = (from o in student.Schedule where o.Thursday select o.Time).ToList();
                                            selectedTimeStudent = (from o in selectedTimeStudent
                                                                   where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                    && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                   select o).ToList();
                                            selectedTimeTempstudent = (from o in tempstudent.Schedule where o.Thursday select o.Time).ToList();

                                            selectedTimeTempstudent = (from o in selectedTimeTempstudent
                                                                       where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                           && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                       select o).ToList();
                                            selectedTimeStudent = selectedTimeStudent.Intersect(selectedTimeTempstudent).ToList();
                                            foreach (var itemTime in selectedTimeStudent)
                                            {
                                                times = itemTime.Split(separators, StringSplitOptions.None);
                                                if (times[0] == selectedTimeStudent.First().Split(separators, StringSplitOptions.None)[0])
                                                    TempselectedTimeStudent.Add(itemTime);
                                                if (!string.IsNullOrEmpty(previoustime) && (DateTime.Parse(times[0]).Subtract(DateTime.Parse(previoustime)).TotalMinutes == 0))
                                                {
                                                    TempselectedTimeStudent.Add(itemTime);
                                                }
                                                else
                                                {
                                                    StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                                    TempselectedTimeStudent.Clear();
                                                    TempselectedTimeStudent.Add(itemTime);
                                                }
                                                previoustime = times[1];
                                                if (times[0] == selectedTimeStudent.Last().Split(separators, StringSplitOptions.None)[0])
                                                    StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                            }
                                            previoustime = string.Empty;
                                            foreach (var collectionTime in StudentTimeCollection)
                                            {

                                                selectedcount = collectionTime.studentTime.Count();
                                                if (backToback && counter == 1)
                                                    if (selectedcount < 3)
                                                        selectedcount = 0;
                                                #region add group of students
                                                if (selectedcount > 1)
                                                {

                                                    times = (from o in collectionTime.studentTime select o).First().Split(separators, StringSplitOptions.None);
                                                    // startstudentime = DateTime.Parse(times[0]);
                                                    timesEnd = (from o in collectionTime.studentTime select o).Last().Split(separators, StringSplitOptions.None);
                                                    // endstudentime = DateTime.Parse(times[1]);
                                                    if (count == 0)
                                                    {

                                                        InfoStudent.StudentName1 = student.FirstName + " " + student.LastName;
                                                        InfoStudent.StudentName2 = tempstudent.FirstName + " " + tempstudent.LastName;
                                                        InfoStudent.Day = day;
                                                        InfoStudent.StartTime = times[0];
                                                        InfoStudent.EndTime = timesEnd[1];
                                                        InfoStudent.Section = student.Section;
                                                        InfoStudent.Transportation1 = student.Transportation;
                                                        InfoStudent.Transportation2 = tempstudent.Transportation;
                                                        InfoStudent.Email1 = student.Email;
                                                        InfoStudent.Email2 = tempstudent.Email;
                                                        InfoStudent.Major1 = student.Major;
                                                        InfoStudent.Major2 = tempstudent.Major;
                                                        InfoStudent.location = district;
                                                        InfoStudent.IstwoDaysback = backtwodays;
                                                        InfoStudent.IsbackToback = backToback;
                                                        //  GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        GroupingStudents.Add(InfoStudent);
                                                        IsGroupNoTranpsportChecked = true;
                                                        count++;

                                                    }
                                                    else if (count == 1)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime1 = times[0];
                                                        InfoStudent.OtherEndTime1 = timesEnd[1];
                                                        InfoStudent.OtherDay1 = day;
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 2)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime2 = times[0];
                                                        InfoStudent.OtherEndTime2 = timesEnd[1];
                                                        InfoStudent.OtherDay2 = day;
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 3)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime3 = times[0];
                                                        InfoStudent.OtherEndTime3 = timesEnd[1];
                                                        InfoStudent.OtherDay3 = day;
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 4)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime4 = times[0];
                                                        InfoStudent.OtherEndTime4 = timesEnd[1];
                                                        InfoStudent.OtherDay4 = day;
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 5)
                                                    {
                                                        IsGroupNoTranpsportChecked = true;
                                                        break;
                                                    }

                                                }
                                                #endregion;
                                            }
                                            if (counter==2)
                                            {
                                                if (count >= counter)
                                                {
                                                    if ((!string.IsNullOrEmpty(InfoStudent.Day) != !string.IsNullOrEmpty(InfoStudent.OtherDay1)) || (!string.IsNullOrEmpty(InfoStudent.Day) != !string.IsNullOrEmpty(InfoStudent.OtherDay2))
                                                        || (!string.IsNullOrEmpty(InfoStudent.OtherDay1) != !string.IsNullOrEmpty(InfoStudent.OtherDay2)))
                                                        IsGroupNoTranpsportChecked = true;
                                                    else
                                                    {
                                                        selectedcount = 0;
                                                        count = 0;
                                                    }
                                                //    else { GroupingStudents.Remove(InfoStudent); count = 0; }
                                                   /* if ((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().Day
                                                        == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().OtherDay1)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        selectedcount = 0;
                                                        count = 0;
                                                    }
                                                    else if (((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().Day
                                                       == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay1) ||
                                                        ((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay2
                                                       == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay3))
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        selectedcount = 0;
                                                        count = 0;
                                                    }*/
                                                }
                                                else
                                                {
                                            //        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                    selectedcount = 0;
                                                    count = 0;
                                                }

                                            }

                                        }
                                        else if (day == "Friday")
                                        {
                                            string previoustime = null, removedTime = null; List<string> TempselectedTimeStudent = new List<string>(); int getIndex = 0;
                                            selectedTimeStudent = (from o in student.Schedule where o.Friday select o.Time).ToList();
                                            selectedTimeStudent = (from o in selectedTimeStudent
                                                                   where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                    && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                   select o).ToList();
                                            selectedTimeTempstudent = (from o in tempstudent.Schedule where o.Friday select o.Time).ToList();

                                            selectedTimeTempstudent = (from o in selectedTimeTempstudent
                                                                       where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                           && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                       select o).ToList();
                                            selectedTimeStudent = selectedTimeStudent.Intersect(selectedTimeTempstudent).ToList();
                                            foreach (var itemTime in selectedTimeStudent)
                                            {
                                                times = itemTime.Split(separators, StringSplitOptions.None);
                                                if (times[0] == selectedTimeStudent.First().Split(separators, StringSplitOptions.None)[0])
                                                    TempselectedTimeStudent.Add(itemTime);
                                                if (!string.IsNullOrEmpty(previoustime) && (DateTime.Parse(times[0]).Subtract(DateTime.Parse(previoustime)).TotalMinutes == 0))
                                                {
                                                    TempselectedTimeStudent.Add(itemTime);
                                                }
                                                else
                                                {
                                                    StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                                    TempselectedTimeStudent.Clear();
                                                    TempselectedTimeStudent.Add(itemTime);
                                                }
                                                previoustime = times[1];
                                                if (times[0] == selectedTimeStudent.Last().Split(separators, StringSplitOptions.None)[0])
                                                    StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                            }

                                            previoustime = string.Empty;
                                           
                                            foreach (var collectionTime in StudentTimeCollection)
                                            {

                                                selectedcount = collectionTime.studentTime.Count();
                                                if (backToback && counter == 1)
                                                    if (selectedcount < 3)
                                                        selectedcount = 0;
                                                
                                                #region add group of students
                                                if (selectedcount > 1)
                                                {

                                                    times = (from o in collectionTime.studentTime select o).First().Split(separators, StringSplitOptions.None);
                                                    // startstudentime = DateTime.Parse(times[0]);
                                                    timesEnd = (from o in collectionTime.studentTime select o).Last().Split(separators, StringSplitOptions.None);
                                                    // endstudentime = DateTime.Parse(times[1]);
                                                    if (count == 0)
                                                    {

                                                        InfoStudent.StudentName1 = student.FirstName + " " + student.LastName;
                                                        InfoStudent.StudentName2 = tempstudent.FirstName + " " + tempstudent.LastName;
                                                        InfoStudent.Day = day;
                                                        InfoStudent.StartTime = times[0];
                                                        InfoStudent.EndTime = timesEnd[1];
                                                        InfoStudent.Section = student.Section;
                                                        InfoStudent.Transportation1 = student.Transportation;
                                                        InfoStudent.Transportation2 = tempstudent.Transportation;
                                                        InfoStudent.Email1 = student.Email;
                                                        InfoStudent.Email2 = tempstudent.Email;
                                                        InfoStudent.Major1 = student.Major;
                                                        InfoStudent.Major2 = tempstudent.Major;
                                                        InfoStudent.location = district;
                                                        InfoStudent.IstwoDaysback = backtwodays;
                                                        InfoStudent.IsbackToback = backToback;
                                                        //  GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        GroupingStudents.Add(InfoStudent);
                                                        IsGroupNoTranpsportChecked = true;
                                                        count++;

                                                    }
                                                    else if (count == 1)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime1 = times[0];
                                                        InfoStudent.OtherEndTime1 = timesEnd[1];
                                                        InfoStudent.OtherDay1 = day;
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 2)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime2 = times[0];
                                                        InfoStudent.OtherEndTime2 = timesEnd[1];
                                                        InfoStudent.OtherDay2 = day;
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 3)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime3 = times[0];
                                                        InfoStudent.OtherEndTime3 = timesEnd[1];
                                                        InfoStudent.OtherDay3 = day;
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 4)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime4 = times[0];
                                                        InfoStudent.OtherEndTime4 = timesEnd[1];
                                                        InfoStudent.OtherDay4 = day;
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 5)
                                                    {
                                                        IsGroupNoTranpsportChecked = true;
                                                        break;
                                                    }

                                                }
                                                #endregion;
                                            }
                                            //Remove CI students non enforcing back to back two days                                             
                                            if (counter==2)
                                   
                                            {
                                                if (count >= counter)
                                                {
                                                    if ((!string.IsNullOrEmpty(InfoStudent.Day) != !string.IsNullOrEmpty(InfoStudent.OtherDay1)) || (!string.IsNullOrEmpty(InfoStudent.Day) != !string.IsNullOrEmpty(InfoStudent.OtherDay2))
                                                        || (!string.IsNullOrEmpty(InfoStudent.OtherDay1) != !string.IsNullOrEmpty(InfoStudent.OtherDay2)))
                                                        IsGroupNoTranpsportChecked = true;
                                                    else
                                                    {
                                                        selectedcount = 0;
                                                        count = 0;
                                                    }
                                                //    else { GroupingStudents.Remove(InfoStudent); count = 0; }
                                                  /*  if ((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email)&&String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().Day
                                                        == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().OtherDay1)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        selectedcount = 0;
                                                        count = 0;
                                                    }
                                                    else if (((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().Day
                                                       == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay1)||
                                                        ((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay2
                                                       == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay3))

                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        selectedcount = 0;
                                                        count = 0;
                                                    }*/
                                                }
                                                else
                                                {
                                                //    GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                    selectedcount = 0;
                                                    count = 0;
                                                }
                                               
                                            }
                                          


                                           
                                        }

                                        if (count == 5)
                                            break;                                           
                                        
                                    }
                                }
                            }
                        }
                    }
                }
                #endregion;
            }
            //Get the rest of non matching students
            List<string> student1Emails = (from o in GroupingStudents select o.Email1).ToList();
            List<string> student2Emails = (from o in GroupingStudents select o.Email2).ToList();
            List<StudentStep2> NoMatchStudents = new List<StudentStep2>();
            NoMatchStudents = (from o in Studentstep2 where !student1Emails.Contains(o.Email) && !student2Emails.Contains(o.Email) select o).ToList();

            //Match Teachers to Students ( 3 LEVEL to consider)

            List<MatchingStudent> TempGroupingStudents = new List<MatchingStudent>();
            //ordering first Students  requiring back to back then 1300 last no back to back
            
            int compter = 1000;
            noCheck = false;
            while (!Open)
            {
                Results2.Clear();
                TempGroupingStudents = GroupingStudents.ToList();
                #region
                /* Random order of Teachers*/
                ShuffleTeachStep2(Teacherstep22);                               
                #endregion;
                //Assign Teachers
                foreach (var teacher in Teacherstep22)
                {
                  
                    if (teacher.Pair == "Yes")
                    {
                        count = 2;
                    }
                    else
                    {
                        count = 1;
                    }
                    //    DateTime startstudentime, endstudentime, startteachertime, endteachertime;
                    //       TimeSpan differstart, differend;
                   
                    string day = string.Empty;
                  //  TimeSpan is90;// removed because 90 min or 45 min always back to back for specific CI & 1300 section students
                    bool checkbackToback,checktwoDaysback;
                    int compteur = 0;
                   // noCheck = false;
                    foreach (var schedule in teacher.Schedule)
                    {
                        checkbackToback=false;checktwoDaysback=false;
                        
                       // is90 = DateTime.Parse(schedule.EndTime).Subtract(DateTime.Parse(schedule.StartTime));
                      //  if (is90.TotalMinutes >= 90)
                        //register other Day &times for this back to back 
                         List<BackDay>backtwoDaystimes=new List<BackDay>();List<BackDay>backsameDaytimes=new List<BackDay>();
                       // Avail backschedule=new Avail();
                        if (teacher.TypeOfSchedule == "1" || teacher.TypeOfSchedule == "2")
                        { 
                            if ((from o in teacher.Schedule where (o.Subject == schedule.Subject && o.StartTime != schedule.StartTime && o.Days == schedule.Days) select o).Count() > 0)
                            {
                                //backschedule = (from o in teacher.Schedule where (o.Days == schedule.Days && o.StartTime != schedule.StartTime && o.Subject == schedule.Subject) select o).First();
                                //backsameDaytimes[0] = DateTime.Parse(backschedule.StartTime).ToString("hh:mm tt");
                                //backsameDaytimes[1] = DateTime.Parse(backschedule.EndTime).ToString("hh:mm tt");
                                backsameDaytimes = (from o in teacher.Schedule where (o.Days == schedule.Days && o.StartTime != schedule.StartTime && o.Subject == schedule.Subject) select new BackDay() { Day=o.Days,StartTime=o.StartTime,EndTime=o.EndTime }).ToList();
                                checkbackToback = true;
                            }

                            if ((from o in teacher.Schedule where (o.Days != schedule.Days && o.Subject == schedule.Subject) select o.Days).Distinct().Count() > 0)
                            {
                                //backschedule = (from o in teacher.Schedule where (o.Days != schedule.Days && o.Subject == schedule.Subject) select o).First();
                                //backtwoDaystimes[0] = DateTime.Parse(backschedule.StartTime).ToString("hh:mm tt");
                                //backtwoDaystimes[1] = DateTime.Parse(backschedule.EndTime).ToString("hh:mm tt");
                                //backtwoDay = backschedule.Days;
                                backtwoDaystimes = (from o in teacher.Schedule where (o.Days != schedule.Days && o.Subject == schedule.Subject) select new BackDay() { Day = o.Days, StartTime = o.StartTime, EndTime = o.EndTime }).ToList();
                                checktwoDaysback = true;
                            }
                        }
                        //if(checkbackToback && checktwoDaysback)
                          if (checktwoDaysback)
                          {
                              TempGroupingStudents = TempGroupingStudents.OrderBy(x => x.IstwoDaysback == true).ToList();
                          }else 
                          if (checkbackToback)
                          {
                              TempGroupingStudents = TempGroupingStudents.OrderBy(x => x.IsbackToback == true).ToList();
                          }
                         if (teacher.TypeOfSchedule == "3")                        
                          {
                              if (teacher.IsBackToBack=="1")
                              {
                                  if ((from o in teacher.BackDays where o.Subject == schedule.Subject && o.Day!=schedule.Days select o.Day).Distinct().Count() > 0)
                                  {
                                      //backschedule = (from o in teacher.Schedule where (o.Days != schedule.Days && o.Subject == schedule.Subject) select o).First();
                                      //backtwoDaystimes[0] = DateTime.Parse(backschedule.StartTime).ToString("hh:mm tt");
                                      //backtwoDaystimes[1] = DateTime.Parse(backschedule.EndTime).ToString("hh:mm tt");
                                      //backtwoDay = backschedule.Days;
                                      backtwoDaystimes = (from o in teacher.Schedule where (o.Days != schedule.Days && o.Subject == schedule.Subject) select new BackDay() { Day = o.Days, StartTime = o.StartTime, EndTime = o.EndTime }).ToList();                              
                                      checktwoDaysback = true;
                                    //  TempGroupingStudents = TempGroupingStudents.OrderBy(x => x.IstwoDaysback == true).ToList();
                                  }
                                  if ((from o in teacher.BackDays where o.Subject == schedule.Subject && o.Day == schedule.Days select o.Day).Count() > 0)
                                  {
                                      if ((from o in teacher.Schedule where (o.Subject == schedule.Subject && o.StartTime != schedule.StartTime && o.Days == schedule.Days) select o).Count() > 0)
                                      {
                                          //backschedule = (from o in teacher.Schedule where (o.Days == schedule.Days && o.StartTime != schedule.StartTime && o.Subject == schedule.Subject) select o).First();
                                          //backsameDaytimes[0] = DateTime.Parse(backschedule.StartTime).ToString("hh:mm tt");
                                          //backsameDaytimes[1] = DateTime.Parse(backschedule.EndTime).ToString("hh:mm tt");
                                          backsameDaytimes = (from o in teacher.Schedule where (o.Days == schedule.Days && o.StartTime != schedule.StartTime && o.Subject == schedule.Subject) select new BackDay() { Day = o.Days, StartTime = o.StartTime, EndTime = o.EndTime }).ToList();                              
                                          // TempGroupingStudents = TempGroupingStudents.OrderBy(x => x.IsbackToback == true).ToList();
                                          checkbackToback = true;
                                      }
                                      else TempGroupingStudents = TempGroupingStudents.OrderBy(x => x.IsbackToback == false).ToList();
                                  }
                                   if (checktwoDaysback)                                
                                       TempGroupingStudents = TempGroupingStudents.OrderBy(x => x.IstwoDaysback == true).ToList();
                                   else if (checkbackToback)                                                                        
                                           TempGroupingStudents = TempGroupingStudents.OrderBy(x => x.IsbackToback == true).ToList();
                                    
                              }
                              else TempGroupingStudents = TempGroupingStudents.OrderBy(x => x.IsbackToback == false).ToList();
                          }
                      
                         

                        string[] Teachertimes = new string[2]; string[] Studentimes = new string[2];
                       string teachSubject=schedule.Subject;
                        Teachertimes[0] = DateTime.Parse(schedule.StartTime).ToString("hh:mm tt");
                        Teachertimes[1] = DateTime.Parse(schedule.EndTime).ToString("hh:mm tt");

                        bool selectedcount = false;
                        
                        MatchingStudent StudentsInfo = new MatchingStudent();
                        BackDay BackInfo=new BackDay();
                        //    if ((from o in teacher.Schedule where o.Days == schedule.Days select o).FirstOrDefault() != null){
                       
                        if (schedule.Days == "Monday" || schedule.Days == "A Monday" || schedule.Days == "B Monday")
                            day = "Monday";
                        else if (schedule.Days == "Tuesday" || schedule.Days == "A Tuesday" || schedule.Days == "B Tuesday")
                            day = "Tuesday";
                        else if (schedule.Days == "Wednesday" || schedule.Days == "A Wednesday" || schedule.Days == "B Wednesday")
                            day = "Wednesday";
                        else if (schedule.Days == "Thursday" || schedule.Days == "A Thursday" || schedule.Days == "B Thursday")
                            day = "Thursday";
                        else if (schedule.Days == "Friday" || schedule.Days == "A Friday" || schedule.Days == "B Friday")
                            day = "Friday";
                         /*shift groupstudents order*/
                        ShuffleGroupStudents(TempGroupingStudents);
                        foreach (var student in TempGroupingStudents)
                        {
                            counter = 0;
                            subject = false; location = false;
                            if ((schedule.Subject == "Math" || schedule.Subject == "Algebra 1" || schedule.Subject == "Pre-AP Math" || schedule.Subject == "Math Others") && (student.Major1 == "Mathematics"|| student.Major1=="4-8 Math CI students Only"))
                                subject = true;
                            else if ((schedule.Subject == "AP Bio" || schedule.Subject == "Biology" ||  schedule.Subject == "Science" || schedule.Subject == "Pre-AP Science" || schedule.Subject == "Science Others") && (student.Major1 == "Science"|| student.Major1=="4-8 Science CI Students Only"))
                                subject = true;
                            else if ((schedule.Subject == "Chemistry" || schedule.Subject == "AP Chemistry" || schedule.Subject == "Pre-AP Chemistry") && (student.Major1 == "Science" || student.Major1 == "4-8 Science CI Students Only"))
                                subject =true;

                            if (((student.location == 1 || student.location == 2 || student.location == 3 || student.location == 4 || student.location == 5) && teacher.District == "Denton")
                                                           || ((student.location == 1 || student.location == 2 || student.location == 4) && teacher.District == "Lewisville") ||
                                                             ((student.location == 1 || student.location == 3 || student.location == 4 || student.location == 5) && teacher.District == "McKinney")
                                                             || ((student.location == 1 || student.location == 3 || student.location == 4 || student.location == 5) && teacher.District == "Prosper"))
                                location = true;

                            if (!string.IsNullOrEmpty(student.Day) && student.Day.Equals(day) && subject && location)
                            {
                                Studentimes[0] = student.StartTime;
                                Studentimes[1] = student.EndTime;
                                
                                if ((DateTime.Parse(Teachertimes[0]) >= DateTime.Parse(Studentimes[0])) && (DateTime.Parse(Teachertimes[1]) <= DateTime.Parse(Studentimes[1])))
                                {
                                    if (student.IstwoDaysback && checktwoDaysback)
                                    {
                                        if ((from o in backtwoDaystimes where DateTime.Parse(o.StartTime) >= DateTime.Parse(Studentimes[0]) && DateTime.Parse(o.EndTime) <= DateTime.Parse(Studentimes[1]) select o).Count() > 0)
                                        {
                                            BackInfo = (from o in backtwoDaystimes where DateTime.Parse(o.StartTime) >= DateTime.Parse(Studentimes[0]) && DateTime.Parse(o.EndTime) <= DateTime.Parse(Studentimes[1]) select o).First();
                                       
                                          if(TwoDaysClassBack.Contains(BackInfo.Day + "-" + student.Day) || TwoDaysClassBack.Contains(student.Day + "-" + BackInfo.Day))
                                            {
                                                selectedcount = true;
                                                StudentsInfo = student;
                                                break;
                                            }
                                        //    else counter++;
                                        }
                                    }
                                    else if (student.IsbackToback && checkbackToback)
                                    {
                                        if ((from o in backsameDaytimes where DateTime.Parse(o.StartTime) >= DateTime.Parse(Studentimes[0]) && DateTime.Parse(o.EndTime) <= DateTime.Parse(Studentimes[1]) select o).Count() > 0)
                                        {
                                            BackInfo = (from o in backsameDaytimes where DateTime.Parse(o.StartTime) >= DateTime.Parse(Studentimes[0]) && DateTime.Parse(o.EndTime) <= DateTime.Parse(Studentimes[1]) select o).First();                                         
                                         //   if (counter > 0)
                                        //    {
                                                selectedcount = true;
                                                StudentsInfo = student; break;
                                         //   }
                                          //  else counter++;
                                        }
                                    }
                                    else if (!student.IsbackToback)
                                    {
                                        selectedcount = true;
                                        StudentsInfo = student;
                                        break;
                                    }                                                                                             
                                }
                            }
                            //check if student group has another available day
                            if (!string.IsNullOrEmpty(student.OtherDay1) && student.OtherDay1.Equals(day)&& subject && location)
                            {
                                Studentimes[0] = student.OtherStartTime1;
                                Studentimes[1] = student.OtherEndTime1;
                                if ((DateTime.Parse(Teachertimes[0]) >= DateTime.Parse(Studentimes[0])) && (DateTime.Parse(Teachertimes[1]) <= DateTime.Parse(Studentimes[1])))
                                                          
                                {
                                    if (student.IstwoDaysback && checktwoDaysback)
                                    { 
                                        if((from o in backtwoDaystimes where DateTime.Parse(o.StartTime)>=DateTime.Parse(Studentimes[0]) &&  DateTime.Parse(o.EndTime)<=DateTime.Parse(Studentimes[1]) select o).Count()>0){
                                            BackInfo = (from o in backtwoDaystimes where DateTime.Parse(o.StartTime) >= DateTime.Parse(Studentimes[0]) && DateTime.Parse(o.EndTime) <= DateTime.Parse(Studentimes[1]) select o).First();
                                        //if((DateTime.Parse(backtwoDaystimes[0]) >= DateTime.Parse(Studentimes[0])) && (DateTime.Parse(backtwoDaystimes[1]) <= DateTime.Parse(Studentimes[1]))){
                                            if (TwoDaysClassBack.Contains(BackInfo.Day + "-" + student.OtherDay1) || TwoDaysClassBack.Contains(student.OtherDay1 + "-" + BackInfo.Day))
                                            {
                                        selectedcount = true;
                                        StudentsInfo = student;                                      
                                        break;}
                                       //     else counter++;
                                        }
                                    }else if(student.IsbackToback && checkbackToback){
                                         if((from o in backsameDaytimes where DateTime.Parse(o.StartTime)>=DateTime.Parse(Studentimes[0]) &&  DateTime.Parse(o.EndTime)<=DateTime.Parse(Studentimes[1]) select o).Count()>0){
                                             BackInfo = (from o in backsameDaytimes where DateTime.Parse(o.StartTime) >= DateTime.Parse(Studentimes[0]) && DateTime.Parse(o.EndTime) <= DateTime.Parse(Studentimes[1]) select o).First();
                                         // if((DateTime.Parse(backsameDaytimes[0]) >= DateTime.Parse(Studentimes[0])) && (DateTime.Parse(backsameDaytimes[1]) <= DateTime.Parse(Studentimes[1]))){
                                     //         if(counter>0){
                                        selectedcount = true;
                                        StudentsInfo = student;break;}
                                     //         else counter++;                                       
                                         // }  
                                    }else if(!student.IsbackToback){
                                                 selectedcount = true;
                                        StudentsInfo = student;
                                        break;
                                          }
                                   
                                }
                            }
                            if (!string.IsNullOrEmpty(student.OtherDay2) && student.OtherDay2.Equals(day) && subject && location)
                            {
                                Studentimes[0] = student.OtherStartTime2;
                                Studentimes[1] = student.OtherEndTime2;
                                if ((DateTime.Parse(Teachertimes[0]) >= DateTime.Parse(Studentimes[0])) && (DateTime.Parse(Teachertimes[1]) <= DateTime.Parse(Studentimes[1])))
                                                          
                                {
                                    if (student.IstwoDaysback && checktwoDaysback)
                                    {
                                        if ((from o in backtwoDaystimes where DateTime.Parse(o.StartTime) >= DateTime.Parse(Studentimes[0]) && DateTime.Parse(o.EndTime) <= DateTime.Parse(Studentimes[1]) select o).Count() > 0)
                                        {
                                            BackInfo = (from o in backtwoDaystimes where DateTime.Parse(o.StartTime) >= DateTime.Parse(Studentimes[0]) && DateTime.Parse(o.EndTime) <= DateTime.Parse(Studentimes[1]) select o).First();
                                            if (TwoDaysClassBack.Contains(BackInfo.Day + "-" + student.OtherDay2) || TwoDaysClassBack.Contains(student.OtherDay2 + "-" + BackInfo.Day))
                                            {
                                        selectedcount = true;
                                        StudentsInfo = student;                                      
                                        break;}
                                    //        else counter++;
                                        }
                                    }
                                    else if (student.IsbackToback && checkbackToback)
                                    {
                                        if ((from o in backsameDaytimes where DateTime.Parse(o.StartTime) >= DateTime.Parse(Studentimes[0]) && DateTime.Parse(o.EndTime) <= DateTime.Parse(Studentimes[1]) select o).Count() > 0)
                                        {
                                            BackInfo = (from o in backsameDaytimes where DateTime.Parse(o.StartTime) >= DateTime.Parse(Studentimes[0]) && DateTime.Parse(o.EndTime) <= DateTime.Parse(Studentimes[1]) select o).First();
                                   //           if(counter>0){
                                        selectedcount = true;
                                        StudentsInfo = student;break;}
                                    //          else counter++;                                       
                                     //     }  
                                    }else if(!student.IsbackToback){
                                                 selectedcount = true;
                                        StudentsInfo = student;
                                        break;
                                          }
                                }
                            }
                            if (!string.IsNullOrEmpty(student.OtherDay3) && student.OtherDay3.Equals(day) && subject && location)
                            {
                                Studentimes[0] = student.OtherStartTime3;
                                Studentimes[1] = student.OtherEndTime3;
                                if ((DateTime.Parse(Teachertimes[0]) >= DateTime.Parse(Studentimes[0])) && (DateTime.Parse(Teachertimes[1]) <= DateTime.Parse(Studentimes[1])))
                                                           
                                {
                                    if (student.IstwoDaysback && checktwoDaysback)
                                    {
                                        if ((from o in backtwoDaystimes where DateTime.Parse(o.StartTime) >= DateTime.Parse(Studentimes[0]) && DateTime.Parse(o.EndTime) <= DateTime.Parse(Studentimes[1]) select o).Count() > 0)
                                        {
                                            BackInfo = (from o in backtwoDaystimes where DateTime.Parse(o.StartTime) >= DateTime.Parse(Studentimes[0]) && DateTime.Parse(o.EndTime) <= DateTime.Parse(Studentimes[1]) select o).First();
                                            if (TwoDaysClassBack.Contains(BackInfo.Day + "-" + student.OtherDay3) || TwoDaysClassBack.Contains(student.OtherDay3 + "-" + BackInfo.Day))
                                            {
                                        selectedcount = true;
                                        StudentsInfo = student;                                      
                                        break;}
                                     //       else counter++;
                                        }
                                    }
                                     else if (student.IsbackToback && checkbackToback)
                                     {
                                         if ((from o in backsameDaytimes where DateTime.Parse(o.StartTime) >= DateTime.Parse(Studentimes[0]) && DateTime.Parse(o.EndTime) <= DateTime.Parse(Studentimes[1]) select o).Count() > 0)
                                         {
                                             BackInfo = (from o in backsameDaytimes where DateTime.Parse(o.StartTime) >= DateTime.Parse(Studentimes[0]) && DateTime.Parse(o.EndTime) <= DateTime.Parse(Studentimes[1]) select o).First();
                                       //       if(counter>0 ){
                                        selectedcount = true;
                                        StudentsInfo = student;break;}
                                     //         else counter++;                                       
                                       //   }  
                                    }else if(!student.IsbackToback){
                                                 selectedcount = true;
                                        StudentsInfo = student;
                                        break;
                                          }
                                }
                            }
                            if (!string.IsNullOrEmpty(student.OtherDay4) && student.OtherDay4.Equals(day) && subject && location)
                            {
                                Studentimes[0] = student.OtherStartTime4;
                                Studentimes[1] = student.OtherEndTime4;
                                if ((DateTime.Parse(Teachertimes[0]) >= DateTime.Parse(Studentimes[0])) && (DateTime.Parse(Teachertimes[1]) <= DateTime.Parse(Studentimes[1])))
                                                            
                                {
                                    if (student.IstwoDaysback && checktwoDaysback)
                                    {
                                        if ((from o in backtwoDaystimes where DateTime.Parse(o.StartTime) >= DateTime.Parse(Studentimes[0]) && DateTime.Parse(o.EndTime) <= DateTime.Parse(Studentimes[1]) select o).Count() > 0)
                                        {
                                            BackInfo = (from o in backtwoDaystimes where DateTime.Parse(o.StartTime) >= DateTime.Parse(Studentimes[0]) && DateTime.Parse(o.EndTime) <= DateTime.Parse(Studentimes[1]) select o).First();
                                             if (TwoDaysClassBack.Contains(BackInfo.Day + "-" + student.OtherDay4) || TwoDaysClassBack.Contains(student.OtherDay4 + "-" + BackInfo.Day))
                                            {
                                        selectedcount = true;
                                        StudentsInfo = student;                                      
                                        break;}
                                    //        else counter++;
                                        }
                                    }
                                     else if (student.IsbackToback && checkbackToback)
                                     {
                                         if ((from o in backsameDaytimes where DateTime.Parse(o.StartTime) >= DateTime.Parse(Studentimes[0]) && DateTime.Parse(o.EndTime) <= DateTime.Parse(Studentimes[1]) select o).Count() > 0)
                                         {
                                             BackInfo = (from o in backsameDaytimes where DateTime.Parse(o.StartTime) >= DateTime.Parse(Studentimes[0]) && DateTime.Parse(o.EndTime) <= DateTime.Parse(Studentimes[1]) select o).First();
                                      //        if(counter>0){
                                        selectedcount = true;
                                        StudentsInfo = student;break;}
                                    //          else counter++;                                       
                                    //      }  
                                    }else if(!student.IsbackToback){
                                                 selectedcount = true;
                                        StudentsInfo = student;
                                        break;
                                          }
                                }
                            }
                       //    if(!noCheck){
                            if (string.IsNullOrEmpty(student.OtherStartTime1))
                                student.OtherStartTime1 = string.Empty;
                            if (string.IsNullOrEmpty(student.OtherEndTime1))
                                student.OtherEndTime1 = string.Empty;
                            if (string.IsNullOrEmpty(student.OtherDay1))
                                student.OtherDay1 = string.Empty;
                                Results2.Add(new TableResult()
                                {
                                    TeacherName ="N/A",
                                    StudentName = student.StudentName1,
                                    Major = "N/A",
                                    Hour = (student.IsbackToback || student.IstwoDaysback) ? ((student.IstwoDaysback) ? student.StartTime + "-" + student.EndTime + " / " + student.OtherStartTime1.ToString() + "-" + student.OtherEndTime1.ToString()
                                 : student.StartTime + "-" + student.EndTime + " / " + student.OtherStartTime1.ToString() + "-" + student.OtherEndTime1.ToString()) : student.StartTime + "-" + student.EndTime,
                                    Days = (student.IsbackToback || student.IstwoDaysback) ? ((student.IstwoDaysback) ? student.Day + " / " + student.OtherDay1.ToString() : student.Day) : student.Day,
                                    School ="N/A",
                                    Room = "N/A",
                                    Transportation = student.Transportation1,
                                    Pair = teacher.Pair,
                                    Location = true,
                                    section = student.Section,
                                    TeacherEmail ="N/A"

                                });
                                Results2.Add(new TableResult()
                                {
                                    TeacherName = "N/A",
                                    StudentName = student.StudentName2,
                                    Major = "N/A",
                                    Hour = (student.IsbackToback || student.IstwoDaysback) ? ((student.IstwoDaysback) ? student.StartTime + "-" + student.EndTime + " / " + student.OtherStartTime1.ToString() + "-" + student.OtherEndTime1.ToString()
                                   : student.StartTime + "-" + student.EndTime + " / " + student.OtherStartTime1.ToString() + "-" + student.OtherEndTime1.ToString()) : student.StartTime + "-" + student.EndTime,
                                    Days = (student.IsbackToback || student.IstwoDaysback) ? ((student.IstwoDaysback) ? student.Day + " / " + student.OtherDay1.ToString() : student.Day) : student.Day,
                                    School = "N/A",
                                    Room = "N/A",
                                    Transportation = student.Transportation2,
                                    Pair = teacher.Pair,
                                    Location = true,
                                    section = student.Section,
                                    TeacherEmail = "N/A"

                                });
                          
                      //  }
                            }                                                                                                   

                        if (selectedcount && count > 0)
                        {
                            Results2.Add(new TableResult()
                            {
                                TeacherName = teacher.FirstName + " " + teacher.LastName,
                                StudentName = StudentsInfo.StudentName1,
                                Major =teachSubject ,
                                Hour = (StudentsInfo.IsbackToback || StudentsInfo.IstwoDaysback)?((StudentsInfo.IstwoDaysback)?Teachertimes[0] + "-" + Teachertimes[1]+" / "+BackInfo.StartTime+"-"+BackInfo.EndTime
                                : Teachertimes[0] + "-" + Teachertimes[1] + " / " + BackInfo.StartTime + "-" + BackInfo.EndTime) : Teachertimes[0] + "-" + Teachertimes[1],
                                Days = (StudentsInfo.IsbackToback || StudentsInfo.IstwoDaysback)?((StudentsInfo.IstwoDaysback)?schedule.Days+" / "+BackInfo.Day:schedule.Days):schedule.Days,
                                School = teacher.School,
                                Room = teacher.Room,
                                Transportation = StudentsInfo.Transportation1,
                                Pair = teacher.Pair,
                                Location = true,
                                section = StudentsInfo.Section,
                                TeacherEmail = teacher.Email

                            });
                            Results2.Add(new TableResult()
                            {
                                TeacherName = teacher.FirstName + " " + teacher.LastName,
                                StudentName = StudentsInfo.StudentName2,
                                Major = teachSubject,
                                Hour = (StudentsInfo.IsbackToback || StudentsInfo.IstwoDaysback) ? ((StudentsInfo.IstwoDaysback ) ? Teachertimes[0] + "-" + Teachertimes[1] + " / " + BackInfo.StartTime + "-" + BackInfo.EndTime
                                : Teachertimes[0] + "-" + Teachertimes[1] + " / " + BackInfo.StartTime + "-" + BackInfo.EndTime) : Teachertimes[0] + "-" + Teachertimes[1],
                                Days = (StudentsInfo.IsbackToback || StudentsInfo.IstwoDaysback) ? ((StudentsInfo.IstwoDaysback) ? schedule.Days + " / " + BackInfo.Day : schedule.Days) : schedule.Days,
                                School = teacher.School,
                                Room = teacher.Room,
                                Transportation = StudentsInfo.Transportation2,
                                Pair = teacher.Pair,
                                Location = true,
                                section = StudentsInfo.Section,
                                TeacherEmail = teacher.Email

                            });
                            TempGroupingStudents.Remove(StudentsInfo);
                            StudentsInfo = null;
                            count--;
                            selectedcount = false;
                        }
                        if (count == 0)
                            break;
                    }


                }
                if (Results2.Count > Results.Count())
                {
                    Results = Results2.Distinct<TableResult>().ToList();
                  //  NoConditionResult = Results2.ToList();
                }
                if (Results2.Count() == 2 * GroupingStudents.Count() || compter==0)
                    Open = true;

                compter--;
            }
            #region commented
            /*
            #region No Matching students & Teachers

            foreach (var student in NoMatchStudents)
            {
                // StudentStep1 tempstudent = (from o in TransportStudentstep1 where o.Email == Transportstud.email select o).FirstOrDefault();

                MatchingStudent InfoStudent = new MatchingStudent();
                count = 0;
              
                if (student.Section == "ESDE 4000.001, Monday/Wednesday @ 3:30-4:50" || section == "EDSE 4000.002, Tuesday/Thursday @ 12:30-1:50"
                                   || section == "TXTX 1300.001, Tuesday/Thursday @ 2:00-3:20")
                    backToback = true;
                else backToback = false;
                // Enforce CI students to have back to back on 2 days (timing frame will be at least two)
                if (section == "ESDE 4000.001, Monday/Wednesday @ 3:30-4:50" || section == "EDSE 4000.002, Tuesday/Thursday @ 12:30-1:50")
                { counter = 2; }
                else { counter = 1; }

                foreach (string day in Days)
                {
                    int selectedcount = 0;
                    String[] times, timesEnd;
                    List<string> selectedTimeStudent = new List<string>();
                    List<StudentTimeCollection> StudentTimeCollection = new List<StudentTimeCollection>();
                    if (day == "Monday")
                    {
                        string previoustime = null, removedTime = null; List<string> TempselectedTimeStudent = new List<string>();
                        selectedTimeStudent = (from o in student.Schedule where o.Monday select o.Time).ToList();
                        selectedTimeStudent = (from o in selectedTimeStudent
                                               where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                               select o).ToList();
                       
                        foreach (var itemTime in selectedTimeStudent)
                        {
                            times = itemTime.Split(separators, StringSplitOptions.None);
                            if (times[0] == selectedTimeStudent.First().Split(separators, StringSplitOptions.None)[0])
                                TempselectedTimeStudent.Add(itemTime);
                            if (!string.IsNullOrEmpty(previoustime) && (DateTime.Parse(times[0]).Subtract(DateTime.Parse(previoustime)).TotalMinutes == 0))
                            {
                                TempselectedTimeStudent.Add(itemTime);
                            }
                            else
                            {
                                StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                TempselectedTimeStudent.Clear();
                                TempselectedTimeStudent.Add(itemTime);
                            }
                            previoustime = times[1];
                            if (times[0] == selectedTimeStudent.Last().Split(separators, StringSplitOptions.None)[0])
                                StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                        }
                        previoustime = string.Empty;
                        foreach (var collectionTime in StudentTimeCollection)
                        {

                            selectedcount = collectionTime.studentTime.Count();
                            if (backToback && counter == 1)
                                if (selectedcount < 3)
                                    selectedcount = 0;
                            #region add group of students
                            if (selectedcount > 1)
                            {

                                times = (from o in collectionTime.studentTime select o).First().Split(separators, StringSplitOptions.None);
                                // startstudentime = DateTime.Parse(times[0]);
                                timesEnd = (from o in collectionTime.studentTime select o).Last().Split(separators, StringSplitOptions.None);
                                // endstudentime = DateTime.Parse(times[1]);
                                if (count == 0)
                                {

                                    InfoStudent.StudentName1 = student.FirstName + " " + student.LastName;
                                 //   InfoStudent.StudentName2 = tempstudent.FirstName + " " + tempstudent.LastName;
                                    InfoStudent.Day = day;
                                    InfoStudent.StartTime = times[0];
                                    InfoStudent.EndTime = timesEnd[1];
                                    InfoStudent.Section = student.Section;
                                    InfoStudent.Transportation1 = student.Transportation;
                                 //   InfoStudent.Transportation2 = tempstudent.Transportation;
                                    InfoStudent.Email1 = student.Email;
                                 //   InfoStudent.Email2 = tempstudent.Email;
                                    InfoStudent.location = district;
                                    InfoStudent.IstwoDaysback = (counter == 2 ? true : false);
                                    InfoStudent.IsbackToback = backToback;
                                    //  NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                    NoGroupingStudents.Add(InfoStudent);
                                    IsGroupNoTranpsportChecked = true;
                                    count++;

                                }
                                else if (count == 1)
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email) ) select o).ToList();
                                    InfoStudent.OtherStartTime1 = times[0];
                                    InfoStudent.OtherEndTime1 = timesEnd[1];
                                    InfoStudent.OtherDay1 = day;
                                    NoGroupingStudents.Add(InfoStudent);
                                    count++;
                                }
                                else if (count == 2)
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                    InfoStudent.OtherStartTime2 = times[0];
                                    InfoStudent.OtherEndTime2 = timesEnd[1];
                                    InfoStudent.OtherDay2 = day;
                                    NoGroupingStudents.Add(InfoStudent);
                                    count++;
                                }
                                else if (count == 3)
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                    InfoStudent.OtherStartTime3 = times[0];
                                    InfoStudent.OtherEndTime3 = timesEnd[1];
                                    InfoStudent.OtherDay3 = day;
                                    NoGroupingStudents.Add(InfoStudent);
                                    count++;
                                }
                                else if (count == 4)
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                    InfoStudent.OtherStartTime4 = times[0];
                                    InfoStudent.OtherEndTime4 = timesEnd[1];
                                    InfoStudent.OtherDay4 = day;
                                    NoGroupingStudents.Add(InfoStudent);
                                    count++;
                                }
                                else if (count == 5)
                                {
                                    IsGroupNoTranpsportChecked = true;
                                    break;
                                }

                            }
                            #endregion;
                        }
                        if (counter == 2)
                        {
                            if (count >= counter)
                            {
                                if ((from o in NoGroupingStudents where ((o.Email1 == student.Email)  && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().Day
                                    == (from o in NoGroupingStudents where ((o.Email1 == student.Email)  && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().OtherDay1)
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email) ) select o).ToList();
                                    selectedcount = 0;
                                    count = 0;
                                }
                                else if (((from o in NoGroupingStudents where ((o.Email1 == student.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().Day
                                   == (from o in NoGroupingStudents where ((o.Email1 == student.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay1) ||
                                    ((from o in NoGroupingStudents where ((o.Email1 == student.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay2
                                   == (from o in NoGroupingStudents where ((o.Email1 == student.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay3))
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email) ) select o).ToList();
                                    selectedcount = 0;
                                    count = 0;
                                }
                            }
                            else
                            {
                                NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                selectedcount = 0;
                                count = 0;
                            }

                        }


                    }
                    else if (day == "Tuesday")
                    {
                        string previoustime = null, removedTime = null; List<string> TempselectedTimeStudent = new List<string>(); int getIndex = 0;
                        selectedTimeStudent = (from o in student.Schedule where o.Tuesday select o.Time).ToList();
                        selectedTimeStudent = (from o in selectedTimeStudent
                                               where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                               select o).ToList();
                        
                        foreach (var itemTime in selectedTimeStudent)
                        {
                            times = itemTime.Split(separators, StringSplitOptions.None);
                            if (times[0] == selectedTimeStudent.First().Split(separators, StringSplitOptions.None)[0])
                                TempselectedTimeStudent.Add(itemTime);
                            if (!string.IsNullOrEmpty(previoustime) && (DateTime.Parse(times[0]).Subtract(DateTime.Parse(previoustime)).TotalMinutes == 0))
                            {
                                TempselectedTimeStudent.Add(itemTime);
                            }
                            else
                            {
                                StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                TempselectedTimeStudent.Clear();
                                TempselectedTimeStudent.Add(itemTime);
                            }
                            previoustime = times[1];
                            if (times[0] == selectedTimeStudent.Last().Split(separators, StringSplitOptions.None)[0])
                                StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                        }
                        previoustime = string.Empty;
                        foreach (var collectionTime in StudentTimeCollection)
                        {

                            selectedcount = collectionTime.studentTime.Count();
                            if (backToback && counter == 1)
                                if (selectedcount < 3)
                                    selectedcount = 0;
                            #region add group of students
                            if (selectedcount > 1)
                            {

                                times = (from o in collectionTime.studentTime select o).First().Split(separators, StringSplitOptions.None);
                                // startstudentime = DateTime.Parse(times[0]);
                                timesEnd = (from o in collectionTime.studentTime select o).Last().Split(separators, StringSplitOptions.None);
                                // endstudentime = DateTime.Parse(times[1]);
                                if (count == 0)
                                {

                                    InfoStudent.StudentName1 = student.FirstName + " " + student.LastName;
                                   // InfoStudent.StudentName2 = tempstudent.FirstName + " " + tempstudent.LastName;
                                    InfoStudent.Day = day;
                                    InfoStudent.StartTime = times[0];
                                    InfoStudent.EndTime = timesEnd[1];
                                    InfoStudent.Section = student.Section;
                                    InfoStudent.Transportation1 = student.Transportation;
                                    //InfoStudent.Transportation2 = tempstudent.Transportation;
                                    InfoStudent.Email1 = student.Email;
                                   // InfoStudent.Email2 = tempstudent.Email;
                                    InfoStudent.location = district;
                                    InfoStudent.IstwoDaysback = (counter == 2 ? true : false);
                                    InfoStudent.IsbackToback = backToback;
                                    //  NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                    NoGroupingStudents.Add(InfoStudent);
                                    IsGroupNoTranpsportChecked = true;
                                    count++;

                                }
                                else if (count == 1)
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                    InfoStudent.OtherStartTime1 = times[0];
                                    InfoStudent.OtherEndTime1 = timesEnd[1];
                                    InfoStudent.OtherDay1 = day;
                                    NoGroupingStudents.Add(InfoStudent);
                                    count++;
                                }
                                else if (count == 2)
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                    InfoStudent.OtherStartTime2 = times[0];
                                    InfoStudent.OtherEndTime2 = timesEnd[1];
                                    InfoStudent.OtherDay2 = day;
                                    NoGroupingStudents.Add(InfoStudent);
                                    count++;
                                }
                                else if (count == 3)
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                    InfoStudent.OtherStartTime3 = times[0];
                                    InfoStudent.OtherEndTime3 = timesEnd[1];
                                    InfoStudent.OtherDay3 = day;
                                    NoGroupingStudents.Add(InfoStudent);
                                    count++;
                                }
                                else if (count == 4)
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                    InfoStudent.OtherStartTime4 = times[0];
                                    InfoStudent.OtherEndTime4 = timesEnd[1];
                                    InfoStudent.OtherDay4 = day;
                                    NoGroupingStudents.Add(InfoStudent);
                                    count++;
                                }
                                else if (count == 5)
                                {
                                    IsGroupNoTranpsportChecked = true;
                                    break;
                                }

                            }
                            #endregion;
                        }
                        if (counter == 2)
                        {
                            if (count >= counter)
                            {
                                if ((from o in NoGroupingStudents where ((o.Email1 == student.Email)  && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().Day
                                    == (from o in NoGroupingStudents where ((o.Email1 == student.Email)  && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().OtherDay1)
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                    selectedcount = 0;
                                    count = 0;
                                }
                                else if (((from o in NoGroupingStudents where ((o.Email1 == student.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().Day
                                   == (from o in NoGroupingStudents where ((o.Email1 == student.Email)  && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay1) ||
                                    ((from o in NoGroupingStudents where ((o.Email1 == student.Email)  && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay2
                                   == (from o in NoGroupingStudents where ((o.Email1 == student.Email)  && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay3))
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                    selectedcount = 0;
                                    count = 0;
                                }
                            }
                            else
                            {
                                NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                selectedcount = 0;
                                count = 0;
                            }

                        }

                    }
                    else if (day == "Wednesday")
                    {
                        string previoustime = null, removedTime = null; List<string> TempselectedTimeStudent = new List<string>();
                        selectedTimeStudent = (from o in student.Schedule where o.Wednesday select o.Time).ToList();
                        selectedTimeStudent = (from o in selectedTimeStudent
                                               where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                               select o).ToList();
                       
                        foreach (var itemTime in selectedTimeStudent)
                        {
                            times = itemTime.Split(separators, StringSplitOptions.None);
                            if (times[0] == selectedTimeStudent.First().Split(separators, StringSplitOptions.None)[0])
                                TempselectedTimeStudent.Add(itemTime);
                            if (!string.IsNullOrEmpty(previoustime) && (DateTime.Parse(times[0]).Subtract(DateTime.Parse(previoustime)).TotalMinutes == 0))
                            {
                                TempselectedTimeStudent.Add(itemTime);
                            }
                            else
                            {
                                StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                TempselectedTimeStudent.Clear();
                                TempselectedTimeStudent.Add(itemTime);
                            }
                            previoustime = times[1];
                            if (times[0] == selectedTimeStudent.Last().Split(separators, StringSplitOptions.None)[0])
                                StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                        }
                        previoustime = string.Empty;
                        foreach (var collectionTime in StudentTimeCollection)
                        {

                            selectedcount = collectionTime.studentTime.Count();
                            if (backToback && counter == 1)
                                if (selectedcount < 3)
                                    selectedcount = 0;
                            #region add group of students
                            if (selectedcount > 1)
                            {

                                times = (from o in collectionTime.studentTime select o).First().Split(separators, StringSplitOptions.None);
                                // startstudentime = DateTime.Parse(times[0]);
                                timesEnd = (from o in collectionTime.studentTime select o).Last().Split(separators, StringSplitOptions.None);
                                // endstudentime = DateTime.Parse(times[1]);
                                if (count == 0)
                                {

                                    InfoStudent.StudentName1 = student.FirstName + " " + student.LastName;
                                 //   InfoStudent.StudentName2 = tempstudent.FirstName + " " + tempstudent.LastName;
                                    InfoStudent.Day = day;
                                    InfoStudent.StartTime = times[0];
                                    InfoStudent.EndTime = timesEnd[1];
                                    InfoStudent.Section = student.Section;
                                    InfoStudent.Transportation1 = student.Transportation;
                                 //   InfoStudent.Transportation2 = tempstudent.Transportation;
                                    InfoStudent.Email1 = student.Email;
                                 //   InfoStudent.Email2 = tempstudent.Email;
                                    InfoStudent.location = district;
                                    InfoStudent.IstwoDaysback = (counter == 2 ? true : false);
                                    InfoStudent.IsbackToback = backToback;
                                    //  NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                    NoGroupingStudents.Add(InfoStudent);
                                    IsGroupNoTranpsportChecked = true;
                                    count++;

                                }
                                else if (count == 1)
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                    InfoStudent.OtherStartTime1 = times[0];
                                    InfoStudent.OtherEndTime1 = timesEnd[1];
                                    InfoStudent.OtherDay1 = day;
                                    NoGroupingStudents.Add(InfoStudent);
                                    count++;
                                }
                                else if (count == 2)
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                    InfoStudent.OtherStartTime2 = times[0];
                                    InfoStudent.OtherEndTime2 = timesEnd[1];
                                    InfoStudent.OtherDay2 = day;
                                    NoGroupingStudents.Add(InfoStudent);
                                    count++;
                                }
                                else if (count == 3)
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                    InfoStudent.OtherStartTime3 = times[0];
                                    InfoStudent.OtherEndTime3 = timesEnd[1];
                                    InfoStudent.OtherDay3 = day;
                                    NoGroupingStudents.Add(InfoStudent);
                                    count++;
                                }
                                else if (count == 4)
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                    InfoStudent.OtherStartTime4 = times[0];
                                    InfoStudent.OtherEndTime4 = timesEnd[1];
                                    InfoStudent.OtherDay4 = day;
                                    NoGroupingStudents.Add(InfoStudent);
                                    count++;
                                }
                                else if (count == 5)
                                {
                                    IsGroupNoTranpsportChecked = true;
                                    break;
                                }

                            }
                            #endregion;
                        }
                        if (counter == 2)
                        {
                            if (count >= counter)
                            {
                                if ((from o in NoGroupingStudents where ((o.Email1 == student.Email) && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().Day
                                    == (from o in NoGroupingStudents where ((o.Email1 == student.Email)  && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().OtherDay1)
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email) ) select o).ToList();
                                    selectedcount = 0;
                                    count = 0;
                                }
                                else if (((from o in NoGroupingStudents where ((o.Email1 == student.Email)  && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().Day
                                   == (from o in NoGroupingStudents where ((o.Email1 == student.Email)  && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay1) ||
                                    ((from o in NoGroupingStudents where ((o.Email1 == student.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay2
                                   == (from o in NoGroupingStudents where ((o.Email1 == student.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay3))
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email) ) select o).ToList();
                                    selectedcount = 0;
                                    count = 0;
                                }
                            }
                            else
                            {
                                NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email) ) select o).ToList();
                                selectedcount = 0;
                                count = 0;
                            }

                        }

                    }
                    else if (day == "Thursday")
                    {
                        string previoustime = null, removedTime = null; List<string> TempselectedTimeStudent = new List<string>();
                        selectedTimeStudent = (from o in student.Schedule where o.Thursday select o.Time).ToList();
                        selectedTimeStudent = (from o in selectedTimeStudent
                                               where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                               select o).ToList();
                       
                        foreach (var itemTime in selectedTimeStudent)
                        {
                            times = itemTime.Split(separators, StringSplitOptions.None);
                            if (times[0] == selectedTimeStudent.First().Split(separators, StringSplitOptions.None)[0])
                                TempselectedTimeStudent.Add(itemTime);
                            if (!string.IsNullOrEmpty(previoustime) && (DateTime.Parse(times[0]).Subtract(DateTime.Parse(previoustime)).TotalMinutes == 0))
                            {
                                TempselectedTimeStudent.Add(itemTime);
                            }
                            else
                            {
                                StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                TempselectedTimeStudent.Clear();
                                TempselectedTimeStudent.Add(itemTime);
                            }
                            previoustime = times[1];
                            if (times[0] == selectedTimeStudent.Last().Split(separators, StringSplitOptions.None)[0])
                                StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                        }
                        previoustime = string.Empty;
                        foreach (var collectionTime in StudentTimeCollection)
                        {

                            selectedcount = collectionTime.studentTime.Count();
                            if (backToback && counter == 1)
                                if (selectedcount < 3)
                                    selectedcount = 0;
                            #region add group of students
                            if (selectedcount > 1)
                            {

                                times = (from o in collectionTime.studentTime select o).First().Split(separators, StringSplitOptions.None);
                                // startstudentime = DateTime.Parse(times[0]);
                                timesEnd = (from o in collectionTime.studentTime select o).Last().Split(separators, StringSplitOptions.None);
                                // endstudentime = DateTime.Parse(times[1]);
                                if (count == 0)
                                {

                                    InfoStudent.StudentName1 = student.FirstName + " " + student.LastName;
                                  //  InfoStudent.StudentName2 = tempstudent.FirstName + " " + tempstudent.LastName;
                                    InfoStudent.Day = day;
                                    InfoStudent.StartTime = times[0];
                                    InfoStudent.EndTime = timesEnd[1];
                                    InfoStudent.Section = student.Section;
                                    InfoStudent.Transportation1 = student.Transportation;
                                 //   InfoStudent.Transportation2 = tempstudent.Transportation;
                                    InfoStudent.Email1 = student.Email;
                                 //   InfoStudent.Email2 = tempstudent.Email;
                                    InfoStudent.location = district;
                                    InfoStudent.IstwoDaysback = (counter == 2 ? true : false);
                                    InfoStudent.IsbackToback = backToback;
                                    //  NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                    NoGroupingStudents.Add(InfoStudent);
                                    IsGroupNoTranpsportChecked = true;
                                    count++;

                                }
                                else if (count == 1)
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email) ) select o).ToList();
                                    InfoStudent.OtherStartTime1 = times[0];
                                    InfoStudent.OtherEndTime1 = timesEnd[1];
                                    InfoStudent.OtherDay1 = day;
                                    NoGroupingStudents.Add(InfoStudent);
                                    count++;
                                }
                                else if (count == 2)
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email) ) select o).ToList();
                                    InfoStudent.OtherStartTime2 = times[0];
                                    InfoStudent.OtherEndTime2 = timesEnd[1];
                                    InfoStudent.OtherDay2 = day;
                                    NoGroupingStudents.Add(InfoStudent);
                                    count++;
                                }
                                else if (count == 3)
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email) ) select o).ToList();
                                    InfoStudent.OtherStartTime3 = times[0];
                                    InfoStudent.OtherEndTime3 = timesEnd[1];
                                    InfoStudent.OtherDay3 = day;
                                    NoGroupingStudents.Add(InfoStudent);
                                    count++;
                                }
                                else if (count == 4)
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                    InfoStudent.OtherStartTime4 = times[0];
                                    InfoStudent.OtherEndTime4 = timesEnd[1];
                                    InfoStudent.OtherDay4 = day;
                                    NoGroupingStudents.Add(InfoStudent);
                                    count++;
                                }
                                else if (count == 5)
                                {
                                    IsGroupNoTranpsportChecked = true;
                                    break;
                                }

                            }
                            #endregion;
                        }
                        if (counter == 2)
                        {
                            if (count >= counter)
                            {
                                if ((from o in NoGroupingStudents where ((o.Email1 == student.Email)  && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().Day
                                    == (from o in NoGroupingStudents where ((o.Email1 == student.Email)  && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().OtherDay1)
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email) ) select o).ToList();
                                    selectedcount = 0;
                                    count = 0;
                                }
                                else if (((from o in NoGroupingStudents where ((o.Email1 == student.Email)  && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().Day
                                   == (from o in NoGroupingStudents where ((o.Email1 == student.Email)  && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay1) ||
                                    ((from o in NoGroupingStudents where ((o.Email1 == student.Email)  && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay2
                                   == (from o in NoGroupingStudents where ((o.Email1 == student.Email)  && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay3))
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                    selectedcount = 0;
                                    count = 0;
                                }
                            }
                            else
                            {
                                NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email) ) select o).ToList();
                                selectedcount = 0;
                                count = 0;
                            }

                        }

                    }
                    else if (day == "Friday")
                    {
                        string previoustime = null, removedTime = null; List<string> TempselectedTimeStudent = new List<string>(); int getIndex = 0;
                        selectedTimeStudent = (from o in student.Schedule where o.Friday select o.Time).ToList();
                        selectedTimeStudent = (from o in selectedTimeStudent
                                               where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                               select o).ToList();
                        
                        foreach (var itemTime in selectedTimeStudent)
                        {
                            times = itemTime.Split(separators, StringSplitOptions.None);
                            if (times[0] == selectedTimeStudent.First().Split(separators, StringSplitOptions.None)[0])
                                TempselectedTimeStudent.Add(itemTime);
                            if (!string.IsNullOrEmpty(previoustime) && (DateTime.Parse(times[0]).Subtract(DateTime.Parse(previoustime)).TotalMinutes == 0))
                            {
                                TempselectedTimeStudent.Add(itemTime);
                            }
                            else
                            {
                                StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                TempselectedTimeStudent.Clear();
                                TempselectedTimeStudent.Add(itemTime);
                            }
                            previoustime = times[1];
                            if (times[0] == selectedTimeStudent.Last().Split(separators, StringSplitOptions.None)[0])
                                StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                        }

                        previoustime = string.Empty;

                        foreach (var collectionTime in StudentTimeCollection)
                        {

                            selectedcount = collectionTime.studentTime.Count();
                            if (backToback && counter == 1)
                                if (selectedcount < 3)
                                    selectedcount = 0;

                            #region add group of students
                            if (selectedcount > 1)
                            {

                                times = (from o in collectionTime.studentTime select o).First().Split(separators, StringSplitOptions.None);
                                // startstudentime = DateTime.Parse(times[0]);
                                timesEnd = (from o in collectionTime.studentTime select o).Last().Split(separators, StringSplitOptions.None);
                                // endstudentime = DateTime.Parse(times[1]);
                                if (count == 0)
                                {

                                    InfoStudent.StudentName1 = student.FirstName + " " + student.LastName;
                                   // InfoStudent.StudentName2 = tempstudent.FirstName + " " + tempstudent.LastName;
                                    InfoStudent.Day = day;
                                    InfoStudent.StartTime = times[0];
                                    InfoStudent.EndTime = timesEnd[1];
                                    InfoStudent.Section = student.Section;
                                    InfoStudent.Transportation1 = student.Transportation;
                                   // InfoStudent.Transportation2 = tempstudent.Transportation;
                                    InfoStudent.Email1 = student.Email;
                                   // InfoStudent.Email2 = tempstudent.Email;
                                    InfoStudent.location = district;
                                    InfoStudent.IstwoDaysback = (counter == 2 ? true : false);
                                    InfoStudent.IsbackToback = backToback;
                                    //  NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                    NoGroupingStudents.Add(InfoStudent);
                                    IsGroupNoTranpsportChecked = true;
                                    count++;

                                }
                                else if (count == 1)
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                    InfoStudent.OtherStartTime1 = times[0];
                                    InfoStudent.OtherEndTime1 = timesEnd[1];
                                    InfoStudent.OtherDay1 = day;
                                    NoGroupingStudents.Add(InfoStudent);
                                    count++;
                                }
                                else if (count == 2)
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                    InfoStudent.OtherStartTime2 = times[0];
                                    InfoStudent.OtherEndTime2 = timesEnd[1];
                                    InfoStudent.OtherDay2 = day;
                                    NoGroupingStudents.Add(InfoStudent);
                                    count++;
                                }
                                else if (count == 3)
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                    InfoStudent.OtherStartTime3 = times[0];
                                    InfoStudent.OtherEndTime3 = timesEnd[1];
                                    InfoStudent.OtherDay3 = day;
                                    NoGroupingStudents.Add(InfoStudent);
                                    count++;
                                }
                                else if (count == 4)
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                    InfoStudent.OtherStartTime4 = times[0];
                                    InfoStudent.OtherEndTime4 = timesEnd[1];
                                    InfoStudent.OtherDay4 = day;
                                    NoGroupingStudents.Add(InfoStudent);
                                    count++;
                                }
                                else if (count == 5)
                                {
                                    IsGroupNoTranpsportChecked = true;
                                    break;
                                }

                            }
                            #endregion;
                        }
                        //Remove CI students non enforcing back to back two days                                             
                        if (counter == 2)
                        {
                            if (count >= counter)
                            {
                                if ((from o in NoGroupingStudents where ((o.Email1 == student.Email)  && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().Day
                                    == (from o in NoGroupingStudents where ((o.Email1 == student.Email)  && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().OtherDay1)
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                    selectedcount = 0;
                                    count = 0;
                                }
                                else if (((from o in NoGroupingStudents where ((o.Email1 == student.Email)  && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().Day
                                   == (from o in NoGroupingStudents where ((o.Email1 == student.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay1) ||
                                    ((from o in NoGroupingStudents where ((o.Email1 == student.Email)  && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay2
                                   == (from o in NoGroupingStudents where ((o.Email1 == student.Email)  && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay3))
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                    selectedcount = 0;
                                    count = 0;
                                }
                            }
                            else
                            {
                                NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                selectedcount = 0;
                                count = 0;
                            }

                        }




                    }

                    if (count == 5)
                        break;

                }

            }
            List<TeacherStep2> RestOfTeachers = new List<TeacherStep2>();
            List<string> selectedTeachersName = (from o in Results select o.TeacherEmail).ToList();
            List<string> teacherName = (from o in Teacherstep22 select o.Email).ToList();
            List<string> restTeacherName = (from o in teacherName where !selectedTeachersName.Contains(o) select o).ToList();
            Open = false;
            RestOfTeachers = (from o in Teacherstep22 where restTeacherName.Contains(o.Email) select o).ToList();
            while (!Open)
            {

                NoConditionResult.Clear();
                TempGroupingStudents = NoGroupingStudents.ToList();
                #region
                /* Random order of Teachers*/
   /*             ShuffleTeachStep2(RestOfTeachers);
                #endregion;
            */
                //Assign Teachers
            /*
                foreach (var teacher in RestOfTeachers)
                {
                    if (teacher.Pair == "Yes")
                    {
                        count = 4;
                    }
                    else
                    {
                        count = 2;
                    }

                    string day = string.Empty;
                    bool checkbackToback, checktwoDaysback;
                    foreach (var schedule in teacher.Schedule)
                    {
                        checkbackToback = false; checktwoDaysback = false;
                        counter = 0;
                        // is90 = DateTime.Parse(schedule.EndTime).Subtract(DateTime.Parse(schedule.StartTime));
                        //  if (is90.TotalMinutes >= 90)
                        //register other Day &times for this back to back 
                        string[] backtwoDaystimes = new string[2]; string[] backsameDaytimes = new string[2]; string backtwoDay = string.Empty;
                        Avail backschedule = new Avail();
                        if (teacher.TypeOfSchedule == "1" || teacher.TypeOfSchedule == "2")
                        {
                            if ((from o in teacher.Schedule where (o.Subject == schedule.Subject && o.Days == schedule.Days) select o).Count() > 1)
                            {
                                backschedule = (from o in teacher.Schedule where (o.Days == schedule.Days && o.StartTime != schedule.StartTime && o.Subject == schedule.Subject) select o).First();
                                backsameDaytimes[0] = DateTime.Parse(backschedule.StartTime).ToString("hh:mm tt");
                                backsameDaytimes[1] = DateTime.Parse(backschedule.EndTime).ToString("hh:mm tt");
                                checkbackToback = true;
                            }

                            if ((from o in teacher.Schedule where (o.Subject == schedule.Subject) select o.Days).Distinct().Count() > 1)
                            {
                                backschedule = (from o in teacher.Schedule where (o.Days != schedule.Days && o.Subject == schedule.Subject) select o).First();
                                backtwoDaystimes[0] = DateTime.Parse(backschedule.StartTime).ToString("hh:mm tt");
                                backtwoDaystimes[1] = DateTime.Parse(backschedule.EndTime).ToString("hh:mm tt");
                                backtwoDay = backschedule.Days;
                                checktwoDaysback = true;
                            }
                        }
                        //if(checkbackToback && checktwoDaysback)
                        if (checktwoDaysback)
                        {
                            TempGroupingStudents = TempGroupingStudents.OrderBy(x => x.IstwoDaysback == true).ToList();
                        }
                        else
                            if (checkbackToback)
                            {
                                TempGroupingStudents = TempGroupingStudents.OrderBy(x => x.IsbackToback == true).ToList();
                            }
                        if (teacher.TypeOfSchedule == "3")
                        {
                            if (teacher.IsBackToBack == "1")
                            {
                                if ((from o in teacher.BackDays where o.Subject == schedule.Subject select o.Day).Distinct().Count() > 1)
                                {
                                    checktwoDaysback = true;
                                    TempGroupingStudents = TempGroupingStudents.OrderBy(x => x.IstwoDaysback == true).ToList();
                                }
                                else if ((from o in teacher.BackDays where o.Subject == schedule.Subject select o.Day).Distinct().Count() == 1)
                                {
                                    TempGroupingStudents = TempGroupingStudents.OrderBy(x => x.IsbackToback == true).ToList();
                                    checkbackToback = true;
                                }
                            }
                            else TempGroupingStudents = TempGroupingStudents.OrderBy(x => x.IsbackToback == false).ToList();
                        }
                        bool selectedcount = false;
                        string teachSubject = schedule.Subject;
                        string[] Teachertimes = new string[2]; string[] Studentimes = new string[2];
                        MatchingStudent StudentsInfo = new MatchingStudent();

                        if (schedule.Days == "Monday" || schedule.Days == "A Monday" || schedule.Days == "B Monday")
                            day = "Monday";
                        else if (schedule.Days == "Tuesday" || schedule.Days == "A Tuesday" || schedule.Days == "B Tuesday")
                            day = "Tuesday";
                        else if (schedule.Days == "Wednesday" || schedule.Days == "A Wednesday" || schedule.Days == "B Wednesday")
                            day = "Wednesday";
                        else if (schedule.Days == "Thursday" || schedule.Days == "A Thursday" || schedule.Days == "B Thursday")
                            day = "Thursday";
                        else if (schedule.Days == "Friday" || schedule.Days == "A Friday" || schedule.Days == "B Friday")
                            day = "Friday";


                        Teachertimes[0] = DateTime.Parse(schedule.StartTime).ToString("hh:mm tt");
                        Teachertimes[1] = DateTime.Parse(schedule.EndTime).ToString("hh:mm tt");
                        foreach (var student in TempGroupingStudents)
                        {
                            subject = false; location = false;
                            if ((schedule.Subject == "Math" || schedule.Subject == "Algebra 1" || schedule.Subject == "Pre-AP Math" || schedule.Subject == "Math Others") && (student.Major1 == "Mathematics" || student.Major1 == "4-8 Math CI students Only"))
                                subject = true;
                            else if ((schedule.Subject == "AP Bio" || schedule.Subject == "Biology" || schedule.Subject == "Science" || schedule.Subject == "Pre-AP Science" || schedule.Subject == "Science Others") && (student.Major1 == "Science" || student.Major1 == "4-8 Science CI Students Only"))
                                subject = true;
                            else if ((schedule.Subject == "Chemistry" || schedule.Subject == "AP Chemistry" || schedule.Subject == "Pre-AP Chemistry") && (student.Major1 == "Science" || student.Major1 == "4-8 Science CI Students Only"))
                                subject = true;

                            if (((student.location == 1 || student.location == 2 || student.location == 3 || student.location == 4 || student.location == 5) && teacher.District == "Denton")
                                                           || ((student.location == 1 || student.location == 2 || student.location == 4) && teacher.District == "Lewisville") ||
                                                             ((student.location == 1 || student.location == 3 || student.location == 4 || student.location == 5) && teacher.District == "McKinney")
                                                             || ((student.location == 1 || student.location == 3 || student.location == 4 || student.location == 5) && teacher.District == "Prosper"))
                                location = true;
                            if (!string.IsNullOrEmpty(student.Day) && student.Day.Equals(day) && subject && location)
                            {
                                Studentimes[0] = student.StartTime;
                                Studentimes[1] = student.EndTime;

                                if ((DateTime.Parse(Teachertimes[0]) >= DateTime.Parse(Studentimes[0])) && (DateTime.Parse(Teachertimes[1]) <= DateTime.Parse(Studentimes[1])))
                                {

                                    if (student.IstwoDaysback)
                                    {
                                        counter++;
                                        //do nothing since student only has one time period here 
                                    }
                                    else if (student.IsbackToback)
                                    {
                                        counter++;
                                        //do nothing since student only has one time period here
                                    }
                                    else
                                    {
                                        selectedcount = true;
                                        StudentsInfo = student;
                                        break;
                                    }


                                }
                            }
                            //check if student group has another available day
                            if (!string.IsNullOrEmpty(student.OtherDay1) && student.OtherDay1.Equals(day) && subject && location)
                            {
                                Studentimes[0] = student.OtherStartTime1;
                                Studentimes[1] = student.OtherEndTime1;
                                if ((DateTime.Parse(Teachertimes[0]) >= DateTime.Parse(Studentimes[0])) && (DateTime.Parse(Teachertimes[1]) <= DateTime.Parse(Studentimes[1])))
                                {
                                    if (student.IstwoDaysback)
                                    {
                                        if ((DateTime.Parse(backtwoDaystimes[0]) >= DateTime.Parse(Studentimes[0])) && (DateTime.Parse(backtwoDaystimes[1]) <= DateTime.Parse(Studentimes[1])))
                                        {
                                            if (counter > 0)
                                            {
                                                selectedcount = true;
                                                StudentsInfo = student;
                                                break;
                                            }
                                            else counter++;
                                        }
                                    }
                                    else if (student.IsbackToback)
                                    {
                                        if ((DateTime.Parse(backsameDaytimes[0]) >= DateTime.Parse(Studentimes[0])) && (DateTime.Parse(backsameDaytimes[1]) <= DateTime.Parse(Studentimes[1])))
                                        {
                                            if (counter > 0)
                                            {
                                                selectedcount = true;
                                                StudentsInfo = student; break;
                                            }
                                            else counter++;
                                        }
                                    }
                                    else
                                    {
                                        selectedcount = true;
                                        StudentsInfo = student;
                                        break;
                                    }

                                }
                            }
                            if (!string.IsNullOrEmpty(student.OtherDay2) && student.OtherDay2.Equals(day) && subject && location)
                            {
                                Studentimes[0] = student.OtherStartTime2;
                                Studentimes[1] = student.OtherEndTime2;
                                if ((DateTime.Parse(Teachertimes[0]) >= DateTime.Parse(Studentimes[0])) && (DateTime.Parse(Teachertimes[1]) <= DateTime.Parse(Studentimes[1])))
                                {
                                    if (student.IstwoDaysback)
                                    {
                                        if ((DateTime.Parse(backtwoDaystimes[0]) >= DateTime.Parse(Studentimes[0])) && (DateTime.Parse(backtwoDaystimes[1]) <= DateTime.Parse(Studentimes[1])))
                                        {
                                            if (counter > 0)
                                            {
                                                selectedcount = true;
                                                StudentsInfo = student;
                                                break;
                                            }
                                            else counter++;
                                        }
                                    }
                                    else if (student.IsbackToback)
                                    {
                                        if ((DateTime.Parse(backsameDaytimes[0]) >= DateTime.Parse(Studentimes[0])) && (DateTime.Parse(backsameDaytimes[1]) <= DateTime.Parse(Studentimes[1])))
                                        {
                                            if (counter > 0)
                                            {
                                                selectedcount = true;
                                                StudentsInfo = student; break;
                                            }
                                            else counter++;
                                        }
                                    }
                                    else
                                    {
                                        selectedcount = true;
                                        StudentsInfo = student;
                                        break;
                                    }
                                }
                            }
                            if (!string.IsNullOrEmpty(student.OtherDay3) && student.OtherDay3.Equals(day) && subject && location)
                            {
                                Studentimes[0] = student.OtherStartTime3;
                                Studentimes[1] = student.OtherEndTime3;
                                if ((DateTime.Parse(Teachertimes[0]) >= DateTime.Parse(Studentimes[0])) && (DateTime.Parse(Teachertimes[1]) <= DateTime.Parse(Studentimes[1])))
                                {
                                    if (student.IstwoDaysback)
                                    {
                                        if ((DateTime.Parse(backtwoDaystimes[0]) >= DateTime.Parse(Studentimes[0])) && (DateTime.Parse(backtwoDaystimes[1]) <= DateTime.Parse(Studentimes[1])))
                                        {
                                            if (counter > 0)
                                            {
                                                selectedcount = true;
                                                StudentsInfo = student;
                                                break;
                                            }
                                            else counter++;
                                        }
                                    }
                                    else if (student.IsbackToback)
                                    {
                                        if ((DateTime.Parse(backsameDaytimes[0]) >= DateTime.Parse(Studentimes[0])) && (DateTime.Parse(backsameDaytimes[1]) <= DateTime.Parse(Studentimes[1])))
                                        {
                                            if (counter > 0)
                                            {
                                                selectedcount = true;
                                                StudentsInfo = student; break;
                                            }
                                            else counter++;
                                        }
                                    }
                                    else
                                    {
                                        selectedcount = true;
                                        StudentsInfo = student;
                                        break;
                                    }
                                }
                            }
                            if (!string.IsNullOrEmpty(student.OtherDay4) && student.OtherDay4.Equals(day) && subject && location)
                            {
                                Studentimes[0] = student.OtherStartTime4;
                                Studentimes[1] = student.OtherEndTime4;
                                if ((DateTime.Parse(Teachertimes[0]) >= DateTime.Parse(Studentimes[0])) && (DateTime.Parse(Teachertimes[1]) <= DateTime.Parse(Studentimes[1])))
                                {
                                    if (student.IstwoDaysback)
                                    {
                                        if ((DateTime.Parse(backtwoDaystimes[0]) >= DateTime.Parse(Studentimes[0])) && (DateTime.Parse(backtwoDaystimes[1]) <= DateTime.Parse(Studentimes[1])))
                                        {
                                            if (counter > 0)
                                            {
                                                selectedcount = true;
                                                StudentsInfo = student;
                                                break;
                                            }
                                            else counter++;
                                        }
                                    }
                                    else if (student.IsbackToback)
                                    {
                                        if ((DateTime.Parse(backsameDaytimes[0]) >= DateTime.Parse(Studentimes[0])) && (DateTime.Parse(backsameDaytimes[1]) <= DateTime.Parse(Studentimes[1])))
                                        {
                                            if (counter > 0)
                                            {
                                                selectedcount = true;
                                                StudentsInfo = student; break;
                                            }
                                            else counter++;
                                        }
                                    }
                                    else
                                    {
                                        selectedcount = true;
                                        StudentsInfo = student;
                                        break;
                                    }
                                }
                            }
                        }

                        if (selectedcount && count > 0)
                        {
                            NoConditionResult1.Add(new TableResult()
                            {
                                TeacherName = teacher.FirstName + " " + teacher.LastName,
                                StudentName = StudentsInfo.StudentName1,
                                Major = teachSubject,
                                Hour = (StudentsInfo.IsbackToback && checkbackToback) ? ((StudentsInfo.IstwoDaysback && checktwoDaysback) ? Teachertimes[0] + "-" + Teachertimes[1] + " // " + backtwoDaystimes[0] + "-" + backtwoDaystimes[1]
                                : Teachertimes[0] + "-" + Teachertimes[1] + " // " + backsameDaytimes[0] + "-" + backsameDaytimes[1]) : Teachertimes[0] + "-" + Teachertimes[1],
                                Days = (StudentsInfo.IsbackToback && checkbackToback) ? ((StudentsInfo.IstwoDaysback && checktwoDaysback) ? schedule.Days + " // " + backtwoDay : schedule.Days) : schedule.Days,
                                School = teacher.School,
                                Room = teacher.Room,
                                Transportation = StudentsInfo.Transportation1,
                                Pair = teacher.Pair,
                                Location = true,
                                section = StudentsInfo.Section,
                                TeacherEmail = teacher.Email

                            });

                            TempGroupingStudents.Remove(StudentsInfo);
                            count--;
                        }
                        if (count == 0)
                            break;
                    }


                }
                if (NoConditionResult1.Count > NoConditionResult2.Count())
                {
                    NoConditionResult2 = NoConditionResult1.ToList();
                }
                if (NoConditionResult2.Count() == 2 * NoGroupingStudents.Count() || counter == 0)
                {
                    Open = true;
                    NoConditionResult = NoConditionResult2.ToList();
                }
                counter--;
            
            }
            
            #endregion;*/
            #endregion;
        }
        private void getMatchListCICI()
        {

            Results.Clear();
            NoConditionResult.Clear();
            List<TableResult> Results2 = new List<TableResult>();
            List<TableResult> NoConditionResult1 = new List<TableResult>();
            List<TableResult> NoConditionResult2 = new List<TableResult>();
            // List<TableResult> NoConditionResult1 = new List<TableResult>();
            List<StudentCI> Studentstep22 = new List<StudentCI>();
            List<StudentCI> TransportStudentstep2 = new List<StudentCI>();
            List<StudentCI> NoTransportStudentstep2 = new List<StudentCI>();
            List<string> Sections = Studentci.Select(x => x.Section).Distinct().ToList();
            List<TeacherCI> Teacherstep22 = Teacherci.ToList();
            List<MatchingStudent> GroupingStudents = new List<MatchingStudent>();
            List<MatchingStudent> NoGroupingStudents = new List<MatchingStudent>();
            List<Avail> teachschedule = new List<Avail>();
            List<string> Days = new List<string>();
            List<string> TwoDaysClassBack = new List<string>();
            TwoDaysClassBack.Add("Monday-Tuesday"); TwoDaysClassBack.Add("Monday-Wednesday"); TwoDaysClassBack.Add("Tuesday-Wednesday"); TwoDaysClassBack.Add("Tuesday-Thursday");
            TwoDaysClassBack.Add("Wednesday-Thursday"); TwoDaysClassBack.Add("Wednesday-Friday"); TwoDaysClassBack.Add("Thursday-Friday");
            Days.Add("Monday"); Days.Add("Tuesday"); Days.Add("Wednesday"); Days.Add("Thursday"); Days.Add("Friday");

            //Get Min and Max Range for teacher time
            DateTime RangeMinTime = (from o in Teacherstep22 where o.Schedule.Count() > 0 select (o.Schedule.Select(x => DateTime.Parse(x.StartTime)).Min())).Min();
            DateTime RangeMaxTime = (from o in Teacherstep22 where o.Schedule.Count() > 0 select (o.Schedule.Select(x => DateTime.Parse(x.EndTime)).Max())).Max();

            int rangeMinCount=(from o in Teacherstep22 where o.Schedule.Count() > 0 select (from j in o.Schedule where DateTime.Parse(j.StartTime).Subtract(RangeMinTime).TotalMinutes==0 select j).Distinct().Count()).Sum();
            int rangeMaxCount = (from o in Teacherstep22 where o.Schedule.Count() > 0 select (from j in o.Schedule where DateTime.Parse(j.EndTime).Subtract(RangeMaxTime).TotalMinutes==0 select j).Distinct().Count()).Sum();
            int count = 0, district = 0, counter = 0;
            bool Open = false;
            //     bool timer = false;
            bool location = false, major = false, backToback, backtwodays, subject = false;
            bool IsGroupNoTranpsportChecked, restOfTransportChecked; 




            foreach (string section in Sections)
            {
                Studentstep22 = Studentci.Where(x => x.Section.Equals(section)).ToList();
                TransportStudentstep2 = (Studentstep22.Where(x => x.Transportation.Equals("Yes"))).ToList();
                NoTransportStudentstep2 = Studentstep22.Where(x => x.Transportation.Equals("No")).ToList();
                // Classify student in each list of transport yes or no
                List<studentPriorityQueue> PriorityTransportStudents = new List<studentPriorityQueue>();
                List<studentPriorityQueue> PriorityNoTransportStudents = new List<studentPriorityQueue>();
                int PriorityTransportStudent, PriorityNoTransportStudent;
                foreach (var studentTransport in TransportStudentstep2)
                {
                    PriorityTransportStudent = 0;
                    foreach (var day in Days)
                    {

                        if (day == "Monday")
                            PriorityTransportStudent += (from o in studentTransport.Schedule where o.Monday select o.Time).Count();
                        else if (day == "Tuesday")
                            PriorityTransportStudent += (from o in studentTransport.Schedule where o.Tuesday select o.Time).Count();
                        else if (day == "Wednesday")
                            PriorityTransportStudent += (from o in studentTransport.Schedule where o.Wednesday select o.Time).Count();
                        else if (day == "Thursday")
                            PriorityTransportStudent += (from o in studentTransport.Schedule where o.Thursday select o.Time).Count();
                        else if (day == "Friday")
                            PriorityTransportStudent += (from o in studentTransport.Schedule where o.Friday select o.Time).Count();
                    }
                    PriorityTransportStudents.Add(new studentPriorityQueue() { priority = PriorityTransportStudent, FirstName = studentTransport.FirstName, LastName = studentTransport.LastName, email = studentTransport.Email });

                }
                foreach (var studentNoTransport in NoTransportStudentstep2)
                {
                    PriorityNoTransportStudent = 0;
                    foreach (var day in Days)
                    {

                        if (day == "Monday")
                            PriorityNoTransportStudent += (from o in studentNoTransport.Schedule where o.Monday select o.Time).Count();
                        else if (day == "Tuesday")
                            PriorityNoTransportStudent += (from o in studentNoTransport.Schedule where o.Tuesday select o.Time).Count();
                        else if (day == "Wednesday")
                            PriorityNoTransportStudent += (from o in studentNoTransport.Schedule where o.Wednesday select o.Time).Count();
                        else if (day == "Thursday")
                            PriorityNoTransportStudent += (from o in studentNoTransport.Schedule where o.Thursday select o.Time).Count();
                        else if (day == "Friday")
                            PriorityNoTransportStudent += (from o in studentNoTransport.Schedule where o.Friday select o.Time).Count();
                    }
                    PriorityNoTransportStudents.Add(new studentPriorityQueue() { priority = PriorityNoTransportStudent, FirstName = studentNoTransport.FirstName, LastName = studentNoTransport.LastName, email = studentNoTransport.Email });

                }
                PriorityTransportStudents = PriorityTransportStudents.OrderBy(o => o.priority).ToList();
                PriorityNoTransportStudents = PriorityNoTransportStudents.OrderBy(o => o.priority).ToList();
                studentPriorityQueue removedStudentPriority = new studentPriorityQueue();
                foreach (var NoTransportstud in PriorityNoTransportStudents)
                {
                    StudentCI student = (from o in NoTransportStudentstep2 where o.Email == NoTransportstud.email select o).FirstOrDefault();

                    MatchingStudent InfoStudent = new MatchingStudent();
                    IsGroupNoTranpsportChecked = false;
                    if (removedStudentPriority.email != NoTransportstud.email)
                        foreach (var Transportstud in PriorityTransportStudents)
                        {
                            StudentCI tempstudent = (from o in TransportStudentstep2 where o.Email == Transportstud.email select o).FirstOrDefault();
                            district = 0;
                            if (!string.IsNullOrEmpty(student.Email) && !string.IsNullOrEmpty(tempstudent.Email) && !IsGroupNoTranpsportChecked)
                            {
                                if ((tempstudent.DistrictDenton == 1 || tempstudent.DistrictDenton == 2 ||
                                     tempstudent.DistrictDenton == 3) &&
                                    (student.DistrictDenton == 1 || student.DistrictDenton == 2 ||
                                     student.DistrictDenton == 3)
                                    )
                                {
                                    location = true;
                                    district = 1;
                                }
                                if ((tempstudent.DistrictLewisville == 1 || tempstudent.DistrictLewisville == 2 ||
                                     tempstudent.DistrictLewisville == 3) &&
                                (student.DistrictLewisville == 1 || student.DistrictLewisville == 2 ||
                                 student.DistrictLewisville == 3))
                                {
                                    location = true;
                                    district = 2;
                                }
                                if ((tempstudent.DistrictMckinney == 1 || tempstudent.DistrictMckinney == 2 ||
                                     tempstudent.DistrictMckinney == 3) &&
                                    (student.DistrictMckinney == 1 || student.DistrictMckinney == 2 ||
                                     student.DistrictMckinney == 3)
                                    )
                                {
                                    location = true;
                                    district = 3;
                                }
                                if ((tempstudent.DistrictSanger == 1 || tempstudent.DistrictSanger == 2 ||
                                           tempstudent.DistrictSanger == 3) &&
                                      (student.DistrictSanger == 1 || student.DistrictSanger == 2 ||
                                       student.DistrictSanger == 3))
                                {
                                    location = true;
                                    district = 4;
                                }
                                if ((tempstudent.DistrictProsper == 1 || tempstudent.DistrictProsper == 2 ||
                                     tempstudent.DistrictProsper == 3) &&
                                    (student.DistrictProsper == 1 || student.DistrictProsper == 2 ||
                                     student.DistrictProsper == 3)
                                    )
                                {
                                    location = true;
                                    district = 5;
                                }
                                /*    if ((tempstudent.DistrictForthWorth == 1 || tempstudent.DistrictForthWorth == 2 ||
                                         tempstudent.DistrictForthWorth == 3) &&
                                    (student.DistrictForthWorth == 1 || student.DistrictForthWorth == 2 ||
                                     student.DistrictForthWorth == 3))
                                    {
                                        location = true;
                                        district = 4;
                                    }*/

                                //Not using parameter location any more 
                                location = true;

                                major = false;
                                if ((student.Major == "Biology"||student.Major=="Environmental Science")&&(tempstudent.Major == "Biology"||tempstudent.Major=="Environmental Science"))
                                    major = true;
                                if (student.Major == "Chemistry" && tempstudent.Major == "Chemistry")
                                    major = true;
                                if (student.Major == "Computer Science" && tempstudent.Major == "Computer Science")
                                    major = true;
                                if (student.Major == "Math 7-12" && tempstudent.Major == "Math 7-12")
                                    major = true;
                                if (student.Major == "Physics" && tempstudent.Major == "Physics")
                                    major = true;
                                if (section == "EDSE 4000.001, Monday/Wednesday @ 3:30-4:50" || section == "EDSE 4000.002, Tuesday/Thursday @ 12:30-1:50"
                                    || section == "TXTX 1300.001, Tuesday/Thursday @ 2:00-3:20")
                                    backToback = true;
                                else backToback = false;

                                // Enforce CI students to have back to back on 2 days (timing frame will be at least two)
                                if (section == "EDSE 4000.001, Monday/Wednesday @ 3:30-4:50" || section == "EDSE 4000.002, Tuesday/Thursday @ 12:30-1:50")
                                { counter = 2; backtwodays = true; }
                                else { counter = 1; backtwodays = false; }


                                if (location && major)
                                {
                                    count = 0;

                                    List<DateTime> referenceRangeMinTime = new List<DateTime>();
                                    referenceRangeMinTime.Add(new DateTime(DateTime.Today.Year,DateTime.Today.Month,DateTime.Today.Day,16,0,0));
                                    RangeMinTime = (from o in Teacherstep22
                                                    where o.Schedule.Count() > 0
                                                    select (from j in o.Schedule
                                                            where (((j.Subject == "Pre-calculus" || j.Subject == "Algebra 2" || j.Subject == "Math" || j.Subject == "Algebra 1" || j.Subject == "Pre-AP Math" || j.Subject == "Math Others") && (student.Major == "Mathematics" || student.Major == "Math 7-12"|| tempstudent.Major == "Mathematics" || tempstudent.Major == "Math 7-12"))
                                                                ||
                                                                ((j.Subject == "Ecology" || j.Subject == "AP Bio" || j.Subject == "Biology" || j.Subject == "Science" || j.Subject == "Pre-AP Science" || j.Subject == "Science Others") && (student.Major == "Biology" || student.Major == "Environmental Science"|| tempstudent.Major == "Biology" || tempstudent.Major == "Environmental Science"))
                                                                ||
                                                                ((j.Subject == "Chemistry" || j.Subject == "AP Chemistry" || j.Subject == "Pre-AP Chemistry") && (student.Major == "Chemistry" || student.Major == "Chemistry" || tempstudent.Major == "Chemistry" || tempstudent.Major == "Chemistry"))
                                                                ||
                                                                ((j.Subject == "Computer Science") && (student.Major == "Computer Science" || student.Major == "Computer Science" || tempstudent.Major == "Computer Science" || tempstudent.Major == "Computer Science"))
                                                                ||
                                                                ((j.Subject == "Physics") && (student.Major == "Physics" || student.Major == "Physics" || tempstudent.Major == "Physics" || tempstudent.Major == "Physics")))
                                                            select DateTime.Parse(j.StartTime)).Concat(referenceRangeMinTime).Min()).Min();

                                     List<DateTime> referenceRangeMaxTime = new List<DateTime>();
                                    referenceRangeMaxTime.Add(new DateTime(DateTime.Today.Year,DateTime.Today.Month,DateTime.Today.Day,8,0,0));
                                    RangeMaxTime = (from o in Teacherstep22
                                                    where o.Schedule.Count() > 0
                                                    select (from j in o.Schedule
                                                            where (((j.Subject == "Pre-calculus" || j.Subject == "Algebra 2" || j.Subject == "Math" || j.Subject == "Algebra 1" || j.Subject == "Pre-AP Math" || j.Subject == "Math Others") && (student.Major == "Mathematics" || student.Major == "Math 7-12" || tempstudent.Major == "Mathematics" || tempstudent.Major == "Math 7-12"))
                                                                ||
                                                                ((j.Subject == "Ecology" || j.Subject == "AP Bio" || j.Subject == "Biology" || j.Subject == "Science" || j.Subject == "Pre-AP Science" || j.Subject == "Science Others") && (student.Major == "Biology" || student.Major == "Environmental Science" || tempstudent.Major == "Biology" || tempstudent.Major == "Environmental Science"))
                                                                ||
                                                                ((j.Subject == "Chemistry" || j.Subject == "AP Chemistry" || j.Subject == "Pre-AP Chemistry") && (student.Major == "Chemistry" || student.Major == "Chemistry" || tempstudent.Major == "Chemistry" || tempstudent.Major == "Chemistry"))
                                                                ||
                                                                ((j.Subject == "Computer Science") && (student.Major == "Computer Science" || student.Major == "Computer Science" || tempstudent.Major == "Computer Science" || tempstudent.Major == "Computer Science"))
                                                                ||
                                                                ((j.Subject == "Physics") && (student.Major == "Physics" || student.Major == "Physics" || tempstudent.Major == "Physics" || tempstudent.Major == "Physics")))
                                                            select DateTime.Parse(j.EndTime)).Concat(referenceRangeMaxTime).Max()).Max();
                                    foreach (string day in Days)
                                    {
                                        int selectedcount = 0;
                                        String[] times, timesEnd;
                                        List<string> selectedTimeStudent = new List<string>(), selectedTimeTempstudent = new List<string>();
                                        List<StudentTimeCollection> StudentTimeCollection = new List<StudentTimeCollection>();
                                     
                                        if (day == "Monday")
                                        {
                                            string previoustime = null, removedTime = null; List<string> TempselectedTimeStudent = new List<string>();
                                            selectedTimeStudent = (from o in student.Schedule where o.Monday select o.Time).ToList();
                                            selectedTimeStudent = (from o in selectedTimeStudent
                                                                   where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                    && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                   select o).ToList();
                                            selectedTimeTempstudent = (from o in tempstudent.Schedule where o.Monday select o.Time).ToList();

                                            selectedTimeTempstudent = (from o in selectedTimeTempstudent
                                                                       where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                           && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                       select o).ToList();
                                            selectedTimeStudent = selectedTimeStudent.Intersect(selectedTimeTempstudent).ToList();
#region Enforce section CI backtwodays
                                            string otherDay = string.Empty;
                                            if (backtwodays)
                                            {
                                                List<string> otherselectedTimeStudent = new List<string>(), otherselectedTimeTempstudent = new List<string>();
                                                int otherselectedcount = 0;
                                                
                                                otherselectedTimeStudent = (from o in student.Schedule where (o.Tuesday && selectedTimeStudent.Contains(o.Time))  select o.Time).ToList();
                                                otherselectedTimeStudent = (from o in otherselectedTimeStudent
                                                                       where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                        && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                       select o).ToList();
                                                otherselectedTimeTempstudent = (from o in tempstudent.Schedule where (o.Tuesday && selectedTimeStudent.Contains(o.Time)) select o.Time).ToList();

                                                otherselectedTimeTempstudent = (from o in otherselectedTimeTempstudent
                                                                           where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                               && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                           select o).ToList();
                                                otherselectedTimeStudent = otherselectedTimeStudent.Intersect(otherselectedTimeTempstudent).ToList();
                                                otherselectedcount=otherselectedTimeStudent.Intersect(selectedTimeStudent).Count();
                                                otherDay = "Tuesday";
                                                if(otherselectedcount<2)
                                                {
                                                    otherselectedTimeStudent = (from o in student.Schedule where (o.Wednesday && selectedTimeStudent.Contains(o.Time)) select o.Time).ToList();
                                                    otherselectedTimeStudent = (from o in otherselectedTimeStudent
                                                                                where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                                 && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                                select o).ToList();
                                                    otherselectedTimeTempstudent = (from o in tempstudent.Schedule where (o.Wednesday && selectedTimeStudent.Contains(o.Time)) select o.Time).ToList();

                                                    otherselectedTimeTempstudent = (from o in otherselectedTimeTempstudent
                                                                                    where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                                        && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                                    select o).ToList();
                                                    otherselectedTimeStudent = otherselectedTimeStudent.Intersect(otherselectedTimeTempstudent).ToList();
                                                    otherselectedcount = otherselectedTimeStudent.Intersect(selectedTimeStudent).Count();
                                                    otherDay = "Wednesday";
                                                }

                                                selectedTimeStudent = otherselectedTimeStudent.ToList();

                                            }
#endregion;
                                            foreach (var itemTime in selectedTimeStudent)
                                            {
                                                times = itemTime.Split(separators, StringSplitOptions.None);
                                                if (times[0] == selectedTimeStudent.First().Split(separators, StringSplitOptions.None)[0])
                                                    TempselectedTimeStudent.Add(itemTime);
                                                if (!string.IsNullOrEmpty(previoustime) && (DateTime.Parse(times[0]).Subtract(DateTime.Parse(previoustime)).TotalMinutes == 0))
                                                {
                                                    TempselectedTimeStudent.Add(itemTime);
                                                }
                                                else
                                                {
                                                    StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                                    TempselectedTimeStudent.Clear();
                                                    TempselectedTimeStudent.Add(itemTime);
                                                }
                                                previoustime = times[1];
                                                if (times[0] == selectedTimeStudent.Last().Split(separators, StringSplitOptions.None)[0])
                                                    StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                            }
                                            previoustime = string.Empty;
                                            foreach (var collectionTime in StudentTimeCollection)
                                            {

                                                selectedcount = collectionTime.studentTime.Count();
                                                if (backToback && counter == 1)
                                                    if (selectedcount < 3)
                                                        selectedcount = 0;
                                                
                                                #region add group of students
                                                if (selectedcount > 1)
                                                {

                                                    times = (from o in collectionTime.studentTime select o).First().Split(separators, StringSplitOptions.None);
                                                    // startstudentime = DateTime.Parse(times[0]);
                                                    timesEnd = (from o in collectionTime.studentTime select o).Last().Split(separators, StringSplitOptions.None);
                                                    // endstudentime = DateTime.Parse(times[1]);
                                                    if (count == 0)
                                                    {

                                                        InfoStudent.StudentName1 = student.FirstName + " " + student.LastName;
                                                        InfoStudent.StudentName2 = tempstudent.FirstName + " " + tempstudent.LastName;
                                                        InfoStudent.Day = (backtwodays ? day + "@" + otherDay : day);
                                                        InfoStudent.StartTime = times[0];
                                                        InfoStudent.EndTime = timesEnd[1];
                                                        InfoStudent.Section = student.Section;
                                                        InfoStudent.Transportation1 = student.Transportation;
                                                        InfoStudent.Transportation2 = tempstudent.Transportation;
                                                        InfoStudent.Email1 = student.Email;
                                                        InfoStudent.Email2 = tempstudent.Email;
                                                        InfoStudent.Major1 = student.Major;
                                                        InfoStudent.Major2 = tempstudent.Major;
                                                        InfoStudent.location = district;
                                                        InfoStudent.IstwoDaysback = backtwodays;
                                                        InfoStudent.IsbackToback = backToback;
                                                        //  GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        GroupingStudents.Add(InfoStudent);
                                                        IsGroupNoTranpsportChecked = true;
                                                        count++;

                                                    }
                                                    else if (count == 1)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime1 = times[0];
                                                        InfoStudent.OtherEndTime1 = timesEnd[1];
                                                        InfoStudent.OtherDay1 = (backtwodays ? day + "@" + otherDay : day);
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 2)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime2 = times[0];
                                                        InfoStudent.OtherEndTime2 = timesEnd[1];
                                                        InfoStudent.OtherDay2 = (backtwodays ? day + "@" + otherDay : day);
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 3)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime3 = times[0];
                                                        InfoStudent.OtherEndTime3 = timesEnd[1];
                                                        InfoStudent.OtherDay3 = (backtwodays ? day + "@" + otherDay : day);
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 4)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime4 = times[0];
                                                        InfoStudent.OtherEndTime4 = timesEnd[1];
                                                        InfoStudent.OtherDay4 = (backtwodays ? day + "@" + otherDay : day);
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 5)
                                                    {
                                                        IsGroupNoTranpsportChecked = true;
                                                        break;
                                                    }

                                                }
                                                #endregion;
                                            }
                                            //remove CI non enforcing two days back to back
                                          /*  if (counter == 2)
                                            {
                                                if (count >= counter)
                                                {
                                                    if ((!string.IsNullOrEmpty(InfoStudent.Day) != !string.IsNullOrEmpty(InfoStudent.OtherDay1)) || (!string.IsNullOrEmpty(InfoStudent.Day) != !string.IsNullOrEmpty(InfoStudent.OtherDay2))
                                                        || (!string.IsNullOrEmpty(InfoStudent.OtherDay1) != !string.IsNullOrEmpty(InfoStudent.OtherDay2)))
                                                        IsGroupNoTranpsportChecked = true;
                                                    else
                                                    {
                                                        selectedcount = 0;
                                                        IsGroupNoTranpsportChecked = false;
                                                    }
                                                //    else { GroupingStudents.Remove(InfoStudent); count = 0; }
                                               /*     if ((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().Day
                                                        == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().OtherDay1)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        selectedcount = 0;
                                                        IsGroupNoTranpsportChecked = false;

                                                    }
                                                    else if (((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().Day
                                                       == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay1) ||
                                                        ((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay2
                                                       == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay3))
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        selectedcount = 0;
                                                        IsGroupNoTranpsportChecked = false;
                                                    }
                                                }
                                                else
                                                {
                                               //     GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                    selectedcount = 0;
                                                    IsGroupNoTranpsportChecked = false;
                                                }

                                            }*/
                                        }
                                        else if (day == "Tuesday")
                                        {
                                            string previoustime = null, removedTime = null; List<string> TempselectedTimeStudent = new List<string>();
                                            selectedTimeStudent = (from o in student.Schedule where o.Tuesday select o.Time).ToList();
                                            selectedTimeStudent = (from o in selectedTimeStudent
                                                                   where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                    && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                   select o).ToList();
                                            selectedTimeTempstudent = (from o in tempstudent.Schedule where o.Tuesday select o.Time).ToList();

                                            selectedTimeTempstudent = (from o in selectedTimeTempstudent
                                                                       where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                           && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                       select o).ToList();
                                            selectedTimeStudent = selectedTimeStudent.Intersect(selectedTimeTempstudent).ToList();
                                            #region Enforce section CI backtwodays
                                            string otherDay = string.Empty;
                                            if (backtwodays)
                                            {
                                                List<string> otherselectedTimeStudent = new List<string>(), otherselectedTimeTempstudent = new List<string>();
                                                int otherselectedcount = 0;

                                                otherselectedTimeStudent = (from o in student.Schedule where (o.Wednesday && selectedTimeStudent.Contains(o.Time)) select o.Time).ToList();
                                                otherselectedTimeStudent = (from o in otherselectedTimeStudent
                                                                            where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                             && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                            select o).ToList();
                                                otherselectedTimeTempstudent = (from o in tempstudent.Schedule where (o.Wednesday && selectedTimeStudent.Contains(o.Time)) select o.Time).ToList();

                                                otherselectedTimeTempstudent = (from o in otherselectedTimeTempstudent
                                                                                where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                                    && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                                select o).ToList();
                                                otherselectedTimeStudent = otherselectedTimeStudent.Intersect(otherselectedTimeTempstudent).ToList();
                                                otherselectedcount = otherselectedTimeStudent.Intersect(selectedTimeStudent).Count();
                                                otherDay = "Wednesday";
                                                if (otherselectedcount < 2)
                                                {
                                                    otherselectedTimeStudent = (from o in student.Schedule where (o.Thursday && selectedTimeStudent.Contains(o.Time)) select o.Time).ToList();
                                                    otherselectedTimeStudent = (from o in otherselectedTimeStudent
                                                                                where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                                 && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                                select o).ToList();
                                                    otherselectedTimeTempstudent = (from o in tempstudent.Schedule where (o.Thursday && selectedTimeStudent.Contains(o.Time)) select o.Time).ToList();

                                                    otherselectedTimeTempstudent = (from o in otherselectedTimeTempstudent
                                                                                    where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                                        && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                                    select o).ToList();
                                                    otherselectedTimeStudent = otherselectedTimeStudent.Intersect(otherselectedTimeTempstudent).ToList();
                                                    otherselectedcount = otherselectedTimeStudent.Intersect(selectedTimeStudent).Count();
                                                    otherDay = "Thursday";
                                                }
                                                selectedTimeStudent = otherselectedTimeStudent.ToList();


                                            }
                                            #endregion;
                                            foreach (var itemTime in selectedTimeStudent)
                                            {
                                                times = itemTime.Split(separators, StringSplitOptions.None);
                                                if (times[0] == selectedTimeStudent.First().Split(separators, StringSplitOptions.None)[0])
                                                    TempselectedTimeStudent.Add(itemTime);
                                                if (!string.IsNullOrEmpty(previoustime) && (DateTime.Parse(times[0]).Subtract(DateTime.Parse(previoustime)).TotalMinutes == 0))
                                                {
                                                    TempselectedTimeStudent.Add(itemTime);
                                                }
                                                else
                                                {
                                                    StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                                    TempselectedTimeStudent.Clear();
                                                    TempselectedTimeStudent.Add(itemTime);
                                                }
                                                previoustime = times[1];
                                                if (times[0] == selectedTimeStudent.Last().Split(separators, StringSplitOptions.None)[0])
                                                    StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                            }
                                            previoustime = string.Empty;
                                            foreach (var collectionTime in StudentTimeCollection)
                                            {

                                                selectedcount = collectionTime.studentTime.Count();
                                                if (backToback && counter == 1)
                                                    if (selectedcount < 3)
                                                        selectedcount = 0;
                                                #region add group of students
                                                if (selectedcount > 1)
                                                {

                                                    times = (from o in collectionTime.studentTime select o).First().Split(separators, StringSplitOptions.None);
                                                    // startstudentime = DateTime.Parse(times[0]);
                                                    timesEnd = (from o in collectionTime.studentTime select o).Last().Split(separators, StringSplitOptions.None);
                                                    // endstudentime = DateTime.Parse(times[1]);
                                                    if (count == 0)
                                                    {

                                                        InfoStudent.StudentName1 = student.FirstName + " " + student.LastName;
                                                        InfoStudent.StudentName2 = tempstudent.FirstName + " " + tempstudent.LastName;
                                                        InfoStudent.Day = (backtwodays ? day + "@" + otherDay : day);
                                                        InfoStudent.StartTime = times[0];
                                                        InfoStudent.EndTime = timesEnd[1];
                                                        InfoStudent.Section = student.Section;
                                                        InfoStudent.Transportation1 = student.Transportation;
                                                        InfoStudent.Transportation2 = tempstudent.Transportation;
                                                        InfoStudent.Email1 = student.Email;
                                                        InfoStudent.Email2 = tempstudent.Email;
                                                        InfoStudent.Major1 = student.Major;
                                                        InfoStudent.Major2 = tempstudent.Major;
                                                        InfoStudent.location = district;
                                                        InfoStudent.IstwoDaysback = backtwodays;
                                                        InfoStudent.IsbackToback = backToback;
                                                        //  GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        GroupingStudents.Add(InfoStudent);
                                                        IsGroupNoTranpsportChecked = true;
                                                        count++;

                                                    }
                                                    else if (count == 1)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime1 = times[0];
                                                        InfoStudent.OtherEndTime1 = timesEnd[1];
                                                        InfoStudent.OtherDay1 = (backtwodays ? day + "@" + otherDay : day);
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 2)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime2 = times[0];
                                                        InfoStudent.OtherEndTime2 = timesEnd[1];
                                                        InfoStudent.OtherDay2 = (backtwodays ? day + "@" + otherDay : day);
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 3)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime3 = times[0];
                                                        InfoStudent.OtherEndTime3 = timesEnd[1];
                                                        InfoStudent.OtherDay3 = (backtwodays ? day + "@" + otherDay : day);
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 4)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime4 = times[0];
                                                        InfoStudent.OtherEndTime4 = timesEnd[1];
                                                        InfoStudent.OtherDay4 = (backtwodays ? day + "@" + otherDay : day);
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 5)
                                                    {
                                                        IsGroupNoTranpsportChecked = true;
                                                        break;
                                                    }

                                                }
                                                #endregion;
                                            }
                                            //removed CI non enforcing two day backToBack
                                     /*       if (counter == 2)
                                            {
                                                if (count >= counter)
                                                {
                                                    if ((!string.IsNullOrEmpty(InfoStudent.Day) != !string.IsNullOrEmpty(InfoStudent.OtherDay1)) || (!string.IsNullOrEmpty(InfoStudent.Day) != !string.IsNullOrEmpty(InfoStudent.OtherDay2))
                                                        || (!string.IsNullOrEmpty(InfoStudent.OtherDay1) != !string.IsNullOrEmpty(InfoStudent.OtherDay2)))
                                                        IsGroupNoTranpsportChecked = true;
                                                    else
                                                    {
                                                        selectedcount = 0;
                                                        IsGroupNoTranpsportChecked = false;
                                                    }
                                                   // else { GroupingStudents.Remove(InfoStudent); count = 0; }
                                                 /*   if ((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().Day
                                                        == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().OtherDay1)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        selectedcount = 0;
                                                        IsGroupNoTranpsportChecked = false;

                                                    }
                                                    else if (((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().Day
                                                       == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay1) ||
                                                        ((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay2
                                                       == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay3))
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        selectedcount = 0;
                                                        IsGroupNoTranpsportChecked = false;
                                                    }*/
                                          /*      }
                                                else
                                                {
                                          //          GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                    selectedcount = 0;
                                                    IsGroupNoTranpsportChecked = false;
                                                }
                                        
                                            } */
                                        }
                                        else if (day == "Wednesday")
                                        {
                                            string previoustime = null, removedTime = null; List<string> TempselectedTimeStudent = new List<string>();
                                            selectedTimeStudent = (from o in student.Schedule where o.Wednesday select o.Time).ToList();
                                            selectedTimeStudent = (from o in selectedTimeStudent
                                                                   where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                    && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                   select o).ToList();
                                            selectedTimeTempstudent = (from o in tempstudent.Schedule where o.Wednesday select o.Time).ToList();

                                            selectedTimeTempstudent = (from o in selectedTimeTempstudent
                                                                       where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                           && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                       select o).ToList();
                                            selectedTimeStudent = selectedTimeStudent.Intersect(selectedTimeTempstudent).ToList();
                                            #region Enforce section CI backtwodays
                                            string otherDay = string.Empty;
                                            if (backtwodays)
                                            {
                                                List<string> otherselectedTimeStudent = new List<string>(), otherselectedTimeTempstudent = new List<string>();
                                                int otherselectedcount = 0;

                                                otherselectedTimeStudent = (from o in student.Schedule where (o.Thursday && selectedTimeStudent.Contains(o.Time)) select o.Time).ToList();
                                                otherselectedTimeStudent = (from o in otherselectedTimeStudent
                                                                            where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                             && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                            select o).ToList();
                                                otherselectedTimeTempstudent = (from o in tempstudent.Schedule where (o.Thursday && selectedTimeStudent.Contains(o.Time)) select o.Time).ToList();

                                                otherselectedTimeTempstudent = (from o in otherselectedTimeTempstudent
                                                                                where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                                    && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                                select o).ToList();
                                                otherselectedTimeStudent = otherselectedTimeStudent.Intersect(otherselectedTimeTempstudent).ToList();
                                                otherselectedcount = otherselectedTimeStudent.Intersect(selectedTimeStudent).Count();
                                                otherDay = "Thursday";
                                                if (otherselectedcount < 2)
                                                {
                                                    otherselectedTimeStudent = (from o in student.Schedule where (o.Friday && selectedTimeStudent.Contains(o.Time)) select o.Time).ToList();
                                                    otherselectedTimeStudent = (from o in otherselectedTimeStudent
                                                                                where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                                 && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                                select o).ToList();
                                                    otherselectedTimeTempstudent = (from o in tempstudent.Schedule where (o.Friday && selectedTimeStudent.Contains(o.Time)) select o.Time).ToList();

                                                    otherselectedTimeTempstudent = (from o in otherselectedTimeTempstudent
                                                                                    where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                                        && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                                    select o).ToList();
                                                    otherselectedTimeStudent = otherselectedTimeStudent.Intersect(otherselectedTimeTempstudent).ToList();
                                                    otherselectedcount = otherselectedTimeStudent.Intersect(selectedTimeStudent).Count();
                                                    otherDay = "Friday";
                                                }
                                                selectedTimeStudent = otherselectedTimeStudent.ToList();


                                            }
                                            #endregion;
                                            foreach (var itemTime in selectedTimeStudent)
                                            {
                                                times = itemTime.Split(separators, StringSplitOptions.None);
                                                if (times[0] == selectedTimeStudent.First().Split(separators, StringSplitOptions.None)[0])
                                                    TempselectedTimeStudent.Add(itemTime);
                                                if (!string.IsNullOrEmpty(previoustime) && (DateTime.Parse(times[0]).Subtract(DateTime.Parse(previoustime)).TotalMinutes == 0))
                                                {
                                                    TempselectedTimeStudent.Add(itemTime);
                                                }
                                                else
                                                {
                                                    StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                                    TempselectedTimeStudent.Clear();
                                                    TempselectedTimeStudent.Add(itemTime);
                                                }
                                                previoustime = times[1];
                                                if (times[0] == selectedTimeStudent.Last().Split(separators, StringSplitOptions.None)[0])
                                                    StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                            }
                                            previoustime = string.Empty;
                                            foreach (var collectionTime in StudentTimeCollection)
                                            {

                                                selectedcount = collectionTime.studentTime.Count();
                                                if (backToback && counter == 1)
                                                    if (selectedcount < 3)
                                                        selectedcount = 0;
                                                #region add group of students
                                                if (selectedcount > 1)
                                                {

                                                    times = (from o in collectionTime.studentTime select o).First().Split(separators, StringSplitOptions.None);
                                                    // startstudentime = DateTime.Parse(times[0]);
                                                    timesEnd = (from o in collectionTime.studentTime select o).Last().Split(separators, StringSplitOptions.None);
                                                    // endstudentime = DateTime.Parse(times[1]);
                                                    if (count == 0)
                                                    {

                                                        InfoStudent.StudentName1 = student.FirstName + " " + student.LastName;
                                                        InfoStudent.StudentName2 = tempstudent.FirstName + " " + tempstudent.LastName;
                                                        InfoStudent.Day = (backtwodays ? day + "@" + otherDay : day);
                                                        InfoStudent.StartTime = times[0];
                                                        InfoStudent.EndTime = timesEnd[1];
                                                        InfoStudent.Section = student.Section;
                                                        InfoStudent.Transportation1 = student.Transportation;
                                                        InfoStudent.Transportation2 = tempstudent.Transportation;
                                                        InfoStudent.Email1 = student.Email;
                                                        InfoStudent.Email2 = tempstudent.Email;
                                                        InfoStudent.Major1 = student.Major;
                                                        InfoStudent.Major2 = tempstudent.Major;
                                                        InfoStudent.location = district;
                                                        InfoStudent.IstwoDaysback = backtwodays;
                                                        InfoStudent.IsbackToback = backToback;
                                                        //  GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        GroupingStudents.Add(InfoStudent);
                                                        IsGroupNoTranpsportChecked = true;
                                                        count++;

                                                    }
                                                    else if (count == 1)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime1 = times[0];
                                                        InfoStudent.OtherEndTime1 = timesEnd[1];
                                                        InfoStudent.OtherDay1 = (backtwodays ? day + "@" + otherDay : day);
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 2)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime2 = times[0];
                                                        InfoStudent.OtherEndTime2 = timesEnd[1];
                                                        InfoStudent.OtherDay2 = (backtwodays ? day + "@" + otherDay : day);
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 3)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime3 = times[0];
                                                        InfoStudent.OtherEndTime3 = timesEnd[1];
                                                        InfoStudent.OtherDay3 = (backtwodays ? day + "@" + otherDay : day);
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 4)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime4 = times[0];
                                                        InfoStudent.OtherEndTime4 = timesEnd[1];
                                                        InfoStudent.OtherDay4 = (backtwodays ? day + "@" + otherDay : day);
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 5)
                                                    {
                                                        IsGroupNoTranpsportChecked = true;
                                                        break;
                                                    }

                                                }
                                                #endregion;
                                            }
                                            //remove Ci non enforcing two days backtoback
                                    /*        if (counter == 2)
                                            {
                                                if (count >= counter)
                                                {
                                                    if ((!string.IsNullOrEmpty(InfoStudent.Day) != !string.IsNullOrEmpty(InfoStudent.OtherDay1)) || (!string.IsNullOrEmpty(InfoStudent.Day) != !string.IsNullOrEmpty(InfoStudent.OtherDay2))
                                                        || (!string.IsNullOrEmpty(InfoStudent.OtherDay1) != !string.IsNullOrEmpty(InfoStudent.OtherDay2)))
                                                        IsGroupNoTranpsportChecked = true;
                                                    else
                                                    {
                                                        selectedcount = 0;
                                                        IsGroupNoTranpsportChecked = false;
                                                    }
                                               //     else { GroupingStudents.Remove(InfoStudent); count = 0; }
                                                /*    if ((!string.IsNullOrEmpty(InfoStudent.Day) != !string.IsNullOrEmpty(InfoStudent.OtherDay1)) || (!string.IsNullOrEmpty(InfoStudent.Day) != !string.IsNullOrEmpty(InfoStudent.OtherDay2))
                                                        || (!string.IsNullOrEmpty(InfoStudent.OtherDay1) != !string.IsNullOrEmpty(InfoStudent.OtherDay2)))
                                                        counter = 0;
                                                    else GroupingStudents.Remove(InfoStudent);
                                                    if ((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().Day
                                                        == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().OtherDay1)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        selectedcount = 0;
                                                        IsGroupNoTranpsportChecked = false;

                                                    }
                                                   else if (((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().Day
                                                       == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay1) ||
                                                        ((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay2
                                                       == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay3))
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        selectedcount = 0;
                                                        IsGroupNoTranpsportChecked = false;
                                                    }*/
                                 /*               }
                                                else
                                                {
                                    //                GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                    selectedcount = 0;
                                                    IsGroupNoTranpsportChecked = false;
                                                }

                                            } */
                                        }
                                        else if (day == "Thursday")
                                        {
                                            string previoustime = null, removedTime = null; List<string> TempselectedTimeStudent = new List<string>();
                                            selectedTimeStudent = (from o in student.Schedule where o.Thursday select o.Time).ToList();
                                            selectedTimeStudent = (from o in selectedTimeStudent
                                                                   where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                    && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                   select o).ToList();
                                            selectedTimeTempstudent = (from o in tempstudent.Schedule where o.Thursday select o.Time).ToList();

                                            selectedTimeTempstudent = (from o in selectedTimeTempstudent
                                                                       where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                           && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                       select o).ToList();
                                            selectedTimeStudent = selectedTimeStudent.Intersect(selectedTimeTempstudent).ToList();
                                            #region Enforce section CI backtwodays
                                            string otherDay = string.Empty;
                                            if (backtwodays)
                                            {
                                                List<string> otherselectedTimeStudent = new List<string>(), otherselectedTimeTempstudent = new List<string>();
                                                int otherselectedcount = 0;

                                                otherselectedTimeStudent = (from o in student.Schedule where (o.Friday && selectedTimeStudent.Contains(o.Time)) select o.Time).ToList();
                                                otherselectedTimeStudent = (from o in otherselectedTimeStudent
                                                                            where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                             && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                            select o).ToList();
                                                otherselectedTimeTempstudent = (from o in tempstudent.Schedule where (o.Friday && selectedTimeStudent.Contains(o.Time)) select o.Time).ToList();

                                                otherselectedTimeTempstudent = (from o in otherselectedTimeTempstudent
                                                                                where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                                    && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                                select o).ToList();
                                                otherselectedTimeStudent = otherselectedTimeStudent.Intersect(otherselectedTimeTempstudent).ToList();
                                                otherselectedcount = otherselectedTimeStudent.Intersect(selectedTimeStudent).Count();
                                                otherDay = "Friday";
                                                selectedTimeStudent = otherselectedTimeStudent.ToList();
                                           /*     if (otherselectedcount < 2)
                                                {
                                                    otherselectedTimeStudent = (from o in student.Schedule where (o.Friday && selectedTimeStudent.Contains(o.Time)) select o.Time).ToList();
                                                    otherselectedTimeStudent = (from o in otherselectedTimeStudent
                                                                                where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                                 && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                                select o).ToList();
                                                    otherselectedTimeTempstudent = (from o in tempstudent.Schedule where (o.Friday && selectedTimeStudent.Contains(o.Time)) select o.Time).ToList();

                                                    otherselectedTimeTempstudent = (from o in otherselectedTimeTempstudent
                                                                                    where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                                        && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                                    select o).ToList();
                                                    otherselectedTimeStudent = otherselectedTimeStudent.Intersect(otherselectedTimeTempstudent).ToList();
                                                    otherselectedcount = otherselectedTimeStudent.Intersect(selectedTimeStudent).Count();
                                                }
                                                */


                                            }
                                            #endregion;
                                            foreach (var itemTime in selectedTimeStudent)
                                            {
                                                times = itemTime.Split(separators, StringSplitOptions.None);
                                                if (times[0] == selectedTimeStudent.First().Split(separators, StringSplitOptions.None)[0])
                                                    TempselectedTimeStudent.Add(itemTime);
                                                if (!string.IsNullOrEmpty(previoustime) && (DateTime.Parse(times[0]).Subtract(DateTime.Parse(previoustime)).TotalMinutes == 0))
                                                {
                                                    TempselectedTimeStudent.Add(itemTime);
                                                }
                                                else
                                                {
                                                    StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                                    TempselectedTimeStudent.Clear();
                                                    TempselectedTimeStudent.Add(itemTime);
                                                }
                                                previoustime = times[1];
                                                if (times[0] == selectedTimeStudent.Last().Split(separators, StringSplitOptions.None)[0])
                                                    StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                            }
                                            previoustime = string.Empty;
                                            foreach (var collectionTime in StudentTimeCollection)
                                            {

                                                selectedcount = collectionTime.studentTime.Count();
                                                if (backToback && counter == 1)
                                                    if (selectedcount < 3)
                                                        selectedcount = 0;
                                                #region add group of students
                                                if (selectedcount > 1)
                                                {

                                                    times = (from o in collectionTime.studentTime select o).First().Split(separators, StringSplitOptions.None);
                                                    // startstudentime = DateTime.Parse(times[0]);
                                                    timesEnd = (from o in collectionTime.studentTime select o).Last().Split(separators, StringSplitOptions.None);
                                                    // endstudentime = DateTime.Parse(times[1]);
                                                    if (count == 0)
                                                    {

                                                        InfoStudent.StudentName1 = student.FirstName + " " + student.LastName;
                                                        InfoStudent.StudentName2 = tempstudent.FirstName + " " + tempstudent.LastName;
                                                        InfoStudent.Day = (backtwodays ? day + "@" + otherDay : day);
                                                        InfoStudent.StartTime = times[0];
                                                        InfoStudent.EndTime = timesEnd[1];
                                                        InfoStudent.Section = student.Section;
                                                        InfoStudent.Transportation1 = student.Transportation;
                                                        InfoStudent.Transportation2 = tempstudent.Transportation;
                                                        InfoStudent.Email1 = student.Email;
                                                        InfoStudent.Email2 = tempstudent.Email;
                                                        InfoStudent.Major1 = student.Major;
                                                        InfoStudent.Major2 = tempstudent.Major;
                                                        InfoStudent.location = district;
                                                        InfoStudent.IstwoDaysback = backtwodays;
                                                        InfoStudent.IsbackToback = backToback;
                                                        //  GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        GroupingStudents.Add(InfoStudent);
                                                        IsGroupNoTranpsportChecked = true;
                                                        count++;

                                                    }
                                                    else if (count == 1)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime1 = times[0];
                                                        InfoStudent.OtherEndTime1 = timesEnd[1];
                                                        InfoStudent.OtherDay1 = (backtwodays ? day + "@" + otherDay : day);
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 2)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime2 = times[0];
                                                        InfoStudent.OtherEndTime2 = timesEnd[1];
                                                        InfoStudent.OtherDay2 = (backtwodays ? day + "@" + otherDay : day);
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 3)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime3 = times[0];
                                                        InfoStudent.OtherEndTime3 = timesEnd[1];
                                                        InfoStudent.OtherDay3 = (backtwodays ? day + "@" + otherDay : day);
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 4)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime4 = times[0];
                                                        InfoStudent.OtherEndTime4 = timesEnd[1];
                                                        InfoStudent.OtherDay4 = (backtwodays ? day + "@" + otherDay : day);
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 5)
                                                    {
                                                        IsGroupNoTranpsportChecked = true;
                                                        break;
                                                    }

                                                }
                                                #endregion;
                                            }
                                            //remove CI non enforcing two days backToback
                                      /*      if (counter == 2)
                                            {
                                                if (count >= counter)
                                                {
                                                    if ((!string.IsNullOrEmpty(InfoStudent.Day) != !string.IsNullOrEmpty(InfoStudent.OtherDay1)) || (!string.IsNullOrEmpty(InfoStudent.Day) != !string.IsNullOrEmpty(InfoStudent.OtherDay2))
                                                        || (!string.IsNullOrEmpty(InfoStudent.OtherDay1) != !string.IsNullOrEmpty(InfoStudent.OtherDay2)))
                                                        IsGroupNoTranpsportChecked = true;
                                                    else
                                                    {
                                                        selectedcount = 0;
                                                        IsGroupNoTranpsportChecked = false;
                                                    }
                                             //       else { GroupingStudents.Remove(InfoStudent); count = 0; }
                                              /*      if ((!string.IsNullOrEmpty(InfoStudent.Day) != !string.IsNullOrEmpty(InfoStudent.OtherDay1)) || (!string.IsNullOrEmpty(InfoStudent.Day) != !string.IsNullOrEmpty(InfoStudent.OtherDay2))
                                                        || (!string.IsNullOrEmpty(InfoStudent.OtherDay1) != !string.IsNullOrEmpty(InfoStudent.OtherDay2)))                                                   
                                                        counter = 0;                                                   
                                                    else GroupingStudents.Remove(InfoStudent);
                                                    if ((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault()
                                                        == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().OtherDay1)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        selectedcount = 0;
                                                        IsGroupNoTranpsportChecked = false;
                                                    }
                                                   else if (((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().Day
                                                       == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay1) ||
                                                        ((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay2
                                                       == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay3))
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        selectedcount = 0;
                                                        IsGroupNoTranpsportChecked = false;
                                                    }*/
                                   /*             }
                                                else
                                                {
                                      //              GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                    selectedcount = 0;
                                                    IsGroupNoTranpsportChecked = false;
                                                }

                                            } */
                                        }
                                        else if (day == "Friday")
                                        {
                                            string previoustime = null, removedTime = null; List<string> TempselectedTimeStudent = new List<string>(); int getIndex = 0;
                                            selectedTimeStudent = (from o in student.Schedule where o.Friday select o.Time).ToList();
                                            selectedTimeStudent = (from o in selectedTimeStudent
                                                                   where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                    && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                   select o).ToList();
                                            selectedTimeTempstudent = (from o in tempstudent.Schedule where o.Friday select o.Time).ToList();

                                            selectedTimeTempstudent = (from o in selectedTimeTempstudent
                                                                       where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                           && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                       select o).ToList();
                                            selectedTimeStudent = selectedTimeStudent.Intersect(selectedTimeTempstudent).ToList();
                                            #region Enforce section CI backtwodays
                                            string otherDay = string.Empty;
                                            if (backtwodays)
                                            {
                                                List<string> otherselectedTimeStudent = new List<string>(), otherselectedTimeTempstudent = new List<string>();
                                                int otherselectedcount = 0;

                                                otherselectedTimeStudent = (from o in student.Schedule where (o.Thursday && selectedTimeStudent.Contains(o.Time)) select o.Time).ToList();
                                                otherselectedTimeStudent = (from o in otherselectedTimeStudent
                                                                            where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                             && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                            select o).ToList();
                                                otherselectedTimeTempstudent = (from o in tempstudent.Schedule where (o.Thursday && selectedTimeStudent.Contains(o.Time)) select o.Time).ToList();

                                                otherselectedTimeTempstudent = (from o in otherselectedTimeTempstudent
                                                                                where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                                    && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                                select o).ToList();
                                                otherselectedTimeStudent = otherselectedTimeStudent.Intersect(otherselectedTimeTempstudent).ToList();
                                                otherselectedcount = otherselectedTimeStudent.Intersect(selectedTimeStudent).Count();
                                                otherDay = "Thursday";
                                                selectedTimeStudent = otherselectedTimeStudent.ToList();
                                                /*     if (otherselectedcount < 2)
                                                     {
                                                         otherselectedTimeStudent = (from o in student.Schedule where (o.Friday && selectedTimeStudent.Contains(o.Time)) select o.Time).ToList();
                                                         otherselectedTimeStudent = (from o in otherselectedTimeStudent
                                                                                     where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                                      && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                                     select o).ToList();
                                                         otherselectedTimeTempstudent = (from o in tempstudent.Schedule where (o.Friday && selectedTimeStudent.Contains(o.Time)) select o.Time).ToList();

                                                         otherselectedTimeTempstudent = (from o in otherselectedTimeTempstudent
                                                                                         where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                                             && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                                         select o).ToList();
                                                         otherselectedTimeStudent = otherselectedTimeStudent.Intersect(otherselectedTimeTempstudent).ToList();
                                                         otherselectedcount = otherselectedTimeStudent.Intersect(selectedTimeStudent).Count();
                                                     }
                                                     */


                                            }
                                            #endregion;
                                            foreach (var itemTime in selectedTimeStudent)
                                            {
                                                times = itemTime.Split(separators, StringSplitOptions.None);
                                                if (times[0] == selectedTimeStudent.First().Split(separators, StringSplitOptions.None)[0])
                                                    TempselectedTimeStudent.Add(itemTime);
                                                if (!string.IsNullOrEmpty(previoustime) && (DateTime.Parse(times[0]).Subtract(DateTime.Parse(previoustime)).TotalMinutes == 0))
                                                {
                                                    TempselectedTimeStudent.Add(itemTime);
                                                }
                                                else
                                                {
                                                    StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                                    TempselectedTimeStudent.Clear();
                                                    TempselectedTimeStudent.Add(itemTime);
                                                }
                                                previoustime = times[1];
                                                if (times[0] == selectedTimeStudent.Last().Split(separators, StringSplitOptions.None)[0])
                                                    StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                            }
                                            previoustime = string.Empty;
                                            foreach (var collectionTime in StudentTimeCollection)
                                            {

                                                selectedcount = collectionTime.studentTime.Count();
                                                if (backToback && counter == 1)
                                                    if (selectedcount < 3)
                                                        selectedcount = 0;
                                                #region add group of students
                                                if (selectedcount > 1)
                                                {

                                                    times = (from o in collectionTime.studentTime select o).First().Split(separators, StringSplitOptions.None);
                                                    // startstudentime = DateTime.Parse(times[0]);
                                                    timesEnd = (from o in collectionTime.studentTime select o).Last().Split(separators, StringSplitOptions.None);
                                                    // endstudentime = DateTime.Parse(times[1]);
                                                    if (count == 0)
                                                    {

                                                        InfoStudent.StudentName1 = student.FirstName + " " + student.LastName;
                                                        InfoStudent.StudentName2 = tempstudent.FirstName + " " + tempstudent.LastName;
                                                        InfoStudent.Day = (backtwodays ? day + "@" + otherDay : day);
                                                        InfoStudent.StartTime = times[0];
                                                        InfoStudent.EndTime = timesEnd[1];
                                                        InfoStudent.Section = student.Section;
                                                        InfoStudent.Transportation1 = student.Transportation;
                                                        InfoStudent.Transportation2 = tempstudent.Transportation;
                                                        InfoStudent.Email1 = student.Email;
                                                        InfoStudent.Email2 = tempstudent.Email;
                                                        InfoStudent.Major1 = student.Major;
                                                        InfoStudent.Major2 = tempstudent.Major;
                                                        InfoStudent.location = district;
                                                        InfoStudent.IstwoDaysback = backtwodays;
                                                        InfoStudent.IsbackToback = backToback;
                                                        //  GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        GroupingStudents.Add(InfoStudent);
                                                        IsGroupNoTranpsportChecked = true;
                                                        count++;

                                                    }
                                                    else if (count == 1)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime1 = times[0];
                                                        InfoStudent.OtherEndTime1 = timesEnd[1];
                                                        InfoStudent.OtherDay1 = (backtwodays ? day + "@" + otherDay : day);
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 2)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime2 = times[0];
                                                        InfoStudent.OtherEndTime2 = timesEnd[1];
                                                        InfoStudent.OtherDay2 = (backtwodays ? day + "@" + otherDay : day);
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 3)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime3 = times[0];
                                                        InfoStudent.OtherEndTime3 = timesEnd[1];
                                                        InfoStudent.OtherDay3 = (backtwodays ? day + "@" + otherDay : day);
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 4)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime4 = times[0];
                                                        InfoStudent.OtherEndTime4 = timesEnd[1];
                                                        InfoStudent.OtherDay4 = (backtwodays ? day + "@" + otherDay : day);
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 5)
                                                    {
                                                        IsGroupNoTranpsportChecked = true;
                                                        break;
                                                    }

                                                }
                                                #endregion;
                                            }
                                            //remove CI students non enforcing two days back To back
                                    /*        if (counter == 2)
                                            {
                                                if (count >= counter)
                                                {
                                                    if ((!string.IsNullOrEmpty(InfoStudent.Day) != !string.IsNullOrEmpty(InfoStudent.OtherDay1)) || (!string.IsNullOrEmpty(InfoStudent.Day) != !string.IsNullOrEmpty(InfoStudent.OtherDay2))
                                                        || (!string.IsNullOrEmpty(InfoStudent.OtherDay1) != !string.IsNullOrEmpty(InfoStudent.OtherDay2)))
                                                        IsGroupNoTranpsportChecked = true;
                                                    else
                                                    {
                                                        selectedcount = 0;
                                                        IsGroupNoTranpsportChecked = false;
                                                    }
                                                 //   else { GroupingStudents.Remove(InfoStudent); count = 0; }
                                                /*    if ((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().Day
                                                        == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().OtherDay1)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        selectedcount = 0;
                                                        IsGroupNoTranpsportChecked = false;

                                                    }
                                                    else if (((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().Day
                                                       == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay1) ||
                                                        ((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay2
                                                       == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay3))
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        selectedcount = 0;
                                                        IsGroupNoTranpsportChecked = false;
                                                    }*/
                                       /*         }
                                                else
                                                {
 //                                                   GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                    selectedcount = 0;
                                                    IsGroupNoTranpsportChecked = false;
                                                }

                                            }
                                    */
                                        }
                                    
                                        if (IsGroupNoTranpsportChecked && count == 5)
                                            break;
                                    }
                                }
                            }
                            if (IsGroupNoTranpsportChecked)
                            {
                                //TransportStudentstep1.Remove(tempstudent);
                                removedStudentPriority = Transportstud;
                                break;
                            }
                        }
                    if (IsGroupNoTranpsportChecked)
                    {
                        //PriorityTransportStudents = (from o in PriorityTransportStudents where o.email != removedStudentPriority.email select o).ToList();
                        PriorityTransportStudents.Remove(removedStudentPriority);
                        removedStudentPriority = NoTransportstud;
                    }


                }
                #region Rest of Transport Students
                PriorityTransportStudents = PriorityTransportStudents.OrderBy(o => o.priority).ToList();
                foreach (var restTransportStudent in PriorityTransportStudents)
                {
                    StudentCI student = (from o in TransportStudentstep2 where o.Email == restTransportStudent.email select o).FirstOrDefault();
                    MatchingStudent InfoStudent = new MatchingStudent();
                    restOfTransportChecked = false;
                    // if (removedStudentPriority.email != restTransportStudent.email)
                    foreach (var tempRestTransportStudent in PriorityTransportStudents)
                    {
                        if ((from o in GroupingStudents where (o.Email2 == tempRestTransportStudent.email || o.Email2 == restTransportStudent.email || o.Email1 == restTransportStudent.email || o.Email1 == tempRestTransportStudent.email) select o).Count() <= 0)
                        {
                            StudentCI tempstudent = (from o in TransportStudentstep2 where o.Email == tempRestTransportStudent.email select o).FirstOrDefault();
                            district = 0;
                            if (!string.IsNullOrEmpty(student.Email) && !string.IsNullOrEmpty(tempstudent.Email) && student.Email != tempstudent.Email)
                            {
                                if ((tempstudent.DistrictDenton == 1 || tempstudent.DistrictDenton == 2 ||
                                     tempstudent.DistrictDenton == 3) &&
                                    (student.DistrictDenton == 1 || student.DistrictDenton == 2 ||
                                     student.DistrictDenton == 3)
                                    )
                                {
                                    location = true;
                                    district = 1;
                                }
                                if ((tempstudent.DistrictLewisville == 1 || tempstudent.DistrictLewisville == 2 ||
                                     tempstudent.DistrictLewisville == 3) &&
                                (student.DistrictLewisville == 1 || student.DistrictLewisville == 2 ||
                                 student.DistrictLewisville == 3))
                                {
                                    location = true;
                                    district = 2;
                                }
                                if ((tempstudent.DistrictMckinney == 1 || tempstudent.DistrictMckinney == 2 ||
                                     tempstudent.DistrictMckinney == 3) &&
                                    (student.DistrictMckinney == 1 || student.DistrictMckinney == 2 ||
                                     student.DistrictMckinney == 3)
                                    )
                                {
                                    location = true;
                                    district = 3;
                                }
                                if ((tempstudent.DistrictSanger == 1 || tempstudent.DistrictSanger == 2 ||
                                          tempstudent.DistrictSanger == 3) &&
                                     (student.DistrictSanger == 1 || student.DistrictSanger == 2 ||
                                      student.DistrictSanger == 3))
                                {
                                    location = true;
                                    district = 4;
                                }
                                if ((tempstudent.DistrictProsper == 1 || tempstudent.DistrictProsper == 2 ||
                                     tempstudent.DistrictProsper == 3) &&
                                    (student.DistrictProsper == 1 || student.DistrictProsper == 2 ||
                                     student.DistrictProsper == 3)
                                    )
                                {
                                    location = true;
                                    district = 5;
                                }
                                /*      if ((tempstudent.DistrictForthWorth == 1 || tempstudent.DistrictForthWorth == 2 ||
                                           tempstudent.DistrictForthWorth == 3) &&
                                      (student.DistrictForthWorth == 1 || student.DistrictForthWorth == 2 ||
                                       student.DistrictForthWorth == 3))
                                      {
                                          location = true;
                                          district = 4;
                                      }*/

                                //Not using parameter location any more 
                                location = true;

                                major = false;
                                if ((student.Major == "Biology" || student.Major == "Environmental Science") && (tempstudent.Major == "Biology" || tempstudent.Major == "Environmental Science"))
                                    major = true;
                                if (student.Major == "Chemistry" && tempstudent.Major == "Chemistry")
                                    major = true;
                                if (student.Major == "Computer Science" && tempstudent.Major == "Computer Science")
                                    major = true;
                                if (student.Major == "Math 7-12" && tempstudent.Major == "Math 7-12")
                                    major = true;
                                if (student.Major == "Physics" && tempstudent.Major == "Physics")
                                    major = true;
                                if (section == "EDSE 4000.001, Monday/Wednesday @ 3:30-4:50" || section == "EDSE 4000.002, Tuesday/Thursday @ 12:30-1:50"
                                    || section == "TXTX 1300.001, Tuesday/Thursday @ 2:00-3:20")
                                    backToback = true;
                                else backToback = false;

                                // Enforce CI students to have back to back on 2 days (timing frame will be at least two)
                                if (section == "EDSE 4000.001, Monday/Wednesday @ 3:30-4:50" || section == "EDSE 4000.002, Tuesday/Thursday @ 12:30-1:50")
                                { counter = 2; backtwodays = true; }
                                else { counter = 1; backtwodays = false; }

                                if (location && major)
                                {
                                    List<DateTime> referenceRangeMinTime = new List<DateTime>();
                                    referenceRangeMinTime.Add(new DateTime(DateTime.Today.Year, DateTime.Today.Month, DateTime.Today.Day, 16, 0, 0));
                                    RangeMinTime = (from o in Teacherstep22
                                                    where o.Schedule.Count() > 0
                                                    select (from j in o.Schedule
                                                            where (((j.Subject == "Pre-calculus" || j.Subject == "Algebra 2" || j.Subject == "Math" || j.Subject == "Algebra 1" || j.Subject == "Pre-AP Math" || j.Subject == "Math Others") && (student.Major == "Mathematics" || student.Major == "Math 7-12" || tempstudent.Major == "Mathematics" || tempstudent.Major == "Math 7-12"))
                                                                ||
                                                                ((j.Subject == "Ecology" || j.Subject == "AP Bio" || j.Subject == "Biology" || j.Subject == "Science" || j.Subject == "Pre-AP Science" || j.Subject == "Science Others") && (student.Major == "Biology" || student.Major == "Environmental Science" || tempstudent.Major == "Biology" || tempstudent.Major == "Environmental Science"))
                                                                ||
                                                                ((j.Subject == "Chemistry" || j.Subject == "AP Chemistry" || j.Subject == "Pre-AP Chemistry") && (student.Major == "Chemistry" || student.Major == "Chemistry" || tempstudent.Major == "Chemistry" || tempstudent.Major == "Chemistry"))
                                                                ||
                                                                ((j.Subject == "Computer Science") && (student.Major == "Computer Science" || student.Major == "Computer Science" || tempstudent.Major == "Computer Science" || tempstudent.Major == "Computer Science"))
                                                                ||
                                                                ((j.Subject == "Physics") && (student.Major == "Physics" || student.Major == "Physics" || tempstudent.Major == "Physics" || tempstudent.Major == "Physics")))
                                                            select DateTime.Parse(j.StartTime)).Concat(referenceRangeMinTime).Min()).Min();

                                    List<DateTime> referenceRangeMaxTime = new List<DateTime>();
                                    referenceRangeMaxTime.Add(new DateTime(DateTime.Today.Year, DateTime.Today.Month, DateTime.Today.Day, 8, 0, 0));
                                    RangeMaxTime = (from o in Teacherstep22
                                                    where o.Schedule.Count() > 0
                                                    select (from j in o.Schedule
                                                            where (((j.Subject == "Pre-calculus" || j.Subject == "Algebra 2" || j.Subject == "Math" || j.Subject == "Algebra 1" || j.Subject == "Pre-AP Math" || j.Subject == "Math Others") && (student.Major == "Mathematics" || student.Major == "Math 7-12" || tempstudent.Major == "Mathematics" || tempstudent.Major == "Math 7-12"))
                                                                ||
                                                                ((j.Subject == "Ecology" || j.Subject == "AP Bio" || j.Subject == "Biology" || j.Subject == "Science" || j.Subject == "Pre-AP Science" || j.Subject == "Science Others") && (student.Major == "Biology" || student.Major == "Environmental Science" || tempstudent.Major == "Biology" || tempstudent.Major == "Environmental Science"))
                                                                ||
                                                                ((j.Subject == "Chemistry" || j.Subject == "AP Chemistry" || j.Subject == "Pre-AP Chemistry") && (student.Major == "Chemistry" || student.Major == "Chemistry" || tempstudent.Major == "Chemistry" || tempstudent.Major == "Chemistry"))
                                                                ||
                                                                ((j.Subject == "Computer Science") && (student.Major == "Computer Science" || student.Major == "Computer Science" || tempstudent.Major == "Computer Science" || tempstudent.Major == "Computer Science"))
                                                                ||
                                                                ((j.Subject == "Physics") && (student.Major == "Physics" || student.Major == "Physics" || tempstudent.Major == "Physics" || tempstudent.Major == "Physics")))
                                                            select DateTime.Parse(j.EndTime)).Concat(referenceRangeMaxTime).Max()).Max();
                                    count = 0;
                                    foreach (string day in Days)
                                    {
                                        int selectedcount = 0;
                                        String[] times, timesEnd;
                                        List<string> selectedTimeStudent = new List<string>(), selectedTimeTempstudent = new List<string>();
                                        List<StudentTimeCollection> StudentTimeCollection = new List<StudentTimeCollection>();
                                        if (day == "Monday")
                                        {
                                            string previoustime = null, removedTime = null; List<string> TempselectedTimeStudent = new List<string>();
                                            selectedTimeStudent = (from o in student.Schedule where o.Monday select o.Time).ToList();
                                            selectedTimeStudent = (from o in selectedTimeStudent
                                                                   where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                    && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                   select o).ToList();
                                            selectedTimeTempstudent = (from o in tempstudent.Schedule where o.Monday select o.Time).ToList();

                                            selectedTimeTempstudent = (from o in selectedTimeTempstudent
                                                                       where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                           && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                       select o).ToList();
                                            selectedTimeStudent = selectedTimeStudent.Intersect(selectedTimeTempstudent).ToList();
                                            #region Enforce section CI backtwodays
                                            string otherDay = string.Empty;
                                            if (backtwodays)
                                            {
                                                List<string> otherselectedTimeStudent = new List<string>(), otherselectedTimeTempstudent = new List<string>();
                                                int otherselectedcount = 0;

                                                otherselectedTimeStudent = (from o in student.Schedule where (o.Tuesday && selectedTimeStudent.Contains(o.Time)) select o.Time).ToList();
                                                otherselectedTimeStudent = (from o in otherselectedTimeStudent
                                                                            where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                             && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                            select o).ToList();
                                                otherselectedTimeTempstudent = (from o in tempstudent.Schedule where (o.Tuesday && selectedTimeStudent.Contains(o.Time)) select o.Time).ToList();

                                                otherselectedTimeTempstudent = (from o in otherselectedTimeTempstudent
                                                                                where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                                    && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                                select o).ToList();
                                                otherselectedTimeStudent = otherselectedTimeStudent.Intersect(otherselectedTimeTempstudent).ToList();
                                                otherselectedcount = otherselectedTimeStudent.Intersect(selectedTimeStudent).Count();
                                                otherDay = "Tuesday";
                                                     if (otherselectedcount < 2)
                                                     {
                                                         otherselectedTimeStudent = (from o in student.Schedule where (o.Wednesday && selectedTimeStudent.Contains(o.Time)) select o.Time).ToList();
                                                         otherselectedTimeStudent = (from o in otherselectedTimeStudent
                                                                                     where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                                      && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                                     select o).ToList();
                                                         otherselectedTimeTempstudent = (from o in tempstudent.Schedule where (o.Wednesday && selectedTimeStudent.Contains(o.Time)) select o.Time).ToList();

                                                         otherselectedTimeTempstudent = (from o in otherselectedTimeTempstudent
                                                                                         where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                                             && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                                         select o).ToList();
                                                         otherselectedTimeStudent = otherselectedTimeStudent.Intersect(otherselectedTimeTempstudent).ToList();
                                                         otherselectedcount = otherselectedTimeStudent.Intersect(selectedTimeStudent).Count();
                                                         otherDay = "Wednesday";
                                                     }

                                                     selectedTimeStudent = otherselectedTimeStudent.ToList();

                                            }
                                            #endregion;
                                            foreach (var itemTime in selectedTimeStudent)
                                            {
                                                times = itemTime.Split(separators, StringSplitOptions.None);
                                                if (times[0] == selectedTimeStudent.First().Split(separators, StringSplitOptions.None)[0])
                                                    TempselectedTimeStudent.Add(itemTime);
                                                if (!string.IsNullOrEmpty(previoustime) && (DateTime.Parse(times[0]).Subtract(DateTime.Parse(previoustime)).TotalMinutes == 0))
                                                {
                                                    TempselectedTimeStudent.Add(itemTime);
                                                }
                                                else
                                                {
                                                    StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                                    TempselectedTimeStudent.Clear();
                                                    TempselectedTimeStudent.Add(itemTime);
                                                }
                                                previoustime = times[1];
                                                if (times[0] == selectedTimeStudent.Last().Split(separators, StringSplitOptions.None)[0])
                                                    StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                            }
                                            previoustime = string.Empty;
                                            foreach (var collectionTime in StudentTimeCollection)
                                            {

                                                selectedcount = collectionTime.studentTime.Count();
                                                if (backToback && counter == 1)
                                                    if (selectedcount < 3)
                                                        selectedcount = 0;
                                                #region add group of students
                                                if (selectedcount > 1)
                                                {

                                                    times = (from o in collectionTime.studentTime select o).First().Split(separators, StringSplitOptions.None);
                                                    // startstudentime = DateTime.Parse(times[0]);
                                                    timesEnd = (from o in collectionTime.studentTime select o).Last().Split(separators, StringSplitOptions.None);
                                                    // endstudentime = DateTime.Parse(times[1]);
                                                    if (count == 0)
                                                    {

                                                        InfoStudent.StudentName1 = student.FirstName + " " + student.LastName;
                                                        InfoStudent.StudentName2 = tempstudent.FirstName + " " + tempstudent.LastName;
                                                        InfoStudent.Day = (backtwodays ? day + "@" + otherDay : day);
                                                        InfoStudent.StartTime = times[0];
                                                        InfoStudent.EndTime = timesEnd[1];
                                                        InfoStudent.Section = student.Section;
                                                        InfoStudent.Transportation1 = student.Transportation;
                                                        InfoStudent.Transportation2 = tempstudent.Transportation;
                                                        InfoStudent.Email1 = student.Email;
                                                        InfoStudent.Email2 = tempstudent.Email;
                                                        InfoStudent.Major1 = student.Major;
                                                        InfoStudent.Major2 = tempstudent.Major;
                                                        InfoStudent.location = district;
                                                        InfoStudent.IstwoDaysback = backtwodays;
                                                        InfoStudent.IsbackToback = backToback;
                                                        //  GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        GroupingStudents.Add(InfoStudent);
                                                        IsGroupNoTranpsportChecked = true;
                                                        count++;

                                                    }
                                                    else if (count == 1)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime1 = times[0];
                                                        InfoStudent.OtherEndTime1 = timesEnd[1];
                                                        InfoStudent.OtherDay1 = (backtwodays ? day + "@" + otherDay : day);
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 2)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime2 = times[0];
                                                        InfoStudent.OtherEndTime2 = timesEnd[1];
                                                        InfoStudent.OtherDay2 = (backtwodays ? day + "@" + otherDay : day);
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 3)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime3 = times[0];
                                                        InfoStudent.OtherEndTime3 = timesEnd[1];
                                                        InfoStudent.OtherDay3 = (backtwodays ? day + "@" + otherDay : day);
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 4)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime4 = times[0];
                                                        InfoStudent.OtherEndTime4 = timesEnd[1];
                                                        InfoStudent.OtherDay4 = (backtwodays ? day + "@" + otherDay : day);
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 5)
                                                    {
                                                        IsGroupNoTranpsportChecked = true;
                                                        break;
                                                    }

                                                }
                                                #endregion;
                                            }
                                      /*      if (counter == 2)
                                            {
                                                if (count >= counter)
                                                {
                                                    if ((!string.IsNullOrEmpty(InfoStudent.Day) != !string.IsNullOrEmpty(InfoStudent.OtherDay1)) || (!string.IsNullOrEmpty(InfoStudent.Day) != !string.IsNullOrEmpty(InfoStudent.OtherDay2))
                                                        || (!string.IsNullOrEmpty(InfoStudent.OtherDay1) != !string.IsNullOrEmpty(InfoStudent.OtherDay2)))
                                                        IsGroupNoTranpsportChecked = true;
                                                    else
                                                    {
                                                        selectedcount = 0;
                                                        count = 0;
                                                    }
                                                 //     else { GroupingStudents.Remove(InfoStudent); count = 0; }
                                           /*         if ((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().Day
                                                        == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().OtherDay1)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        selectedcount = 0;
                                                        count = 0;
                                                    }
                                                   else if (((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().Day
                                                       == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay1) ||
                                                        ((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay2
                                                       == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay3))
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        selectedcount = 0;
                                                        count = 0;
                                                    }*/
                                  /*              }
                                                else
                                                {
                                                //    GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                    selectedcount = 0;
                                                    count = 0;
                                                }

                                            }
                                    */

                                        }
                                        else if (day == "Tuesday")
                                        {
                                            string previoustime = null, removedTime = null; List<string> TempselectedTimeStudent = new List<string>(); int getIndex = 0;
                                            selectedTimeStudent = (from o in student.Schedule where o.Tuesday select o.Time).ToList();
                                            selectedTimeStudent = (from o in selectedTimeStudent
                                                                   where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                    && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                   select o).ToList();
                                            selectedTimeTempstudent = (from o in tempstudent.Schedule where o.Tuesday select o.Time).ToList();

                                            selectedTimeTempstudent = (from o in selectedTimeTempstudent
                                                                       where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                           && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                       select o).ToList();
                                            selectedTimeStudent = selectedTimeStudent.Intersect(selectedTimeTempstudent).ToList();
                                            #region Enforce section CI backtwodays
                                            string otherDay = string.Empty;
                                            if (backtwodays)
                                            {
                                                List<string> otherselectedTimeStudent = new List<string>(), otherselectedTimeTempstudent = new List<string>();
                                                int otherselectedcount = 0;

                                                otherselectedTimeStudent = (from o in student.Schedule where (o.Wednesday && selectedTimeStudent.Contains(o.Time)) select o.Time).ToList();
                                                otherselectedTimeStudent = (from o in otherselectedTimeStudent
                                                                            where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                             && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                            select o).ToList();
                                                otherselectedTimeTempstudent = (from o in tempstudent.Schedule where (o.Wednesday && selectedTimeStudent.Contains(o.Time)) select o.Time).ToList();

                                                otherselectedTimeTempstudent = (from o in otherselectedTimeTempstudent
                                                                                where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                                    && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                                select o).ToList();
                                                otherselectedTimeStudent = otherselectedTimeStudent.Intersect(otherselectedTimeTempstudent).ToList();
                                                otherselectedcount = otherselectedTimeStudent.Intersect(selectedTimeStudent).Count();
                                                otherDay ="Wednesday";
                                                if (otherselectedcount < 2)
                                                {
                                                    otherselectedTimeStudent = (from o in student.Schedule where (o.Thursday && selectedTimeStudent.Contains(o.Time)) select o.Time).ToList();
                                                    otherselectedTimeStudent = (from o in otherselectedTimeStudent
                                                                                where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                                 && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                                select o).ToList();
                                                    otherselectedTimeTempstudent = (from o in tempstudent.Schedule where (o.Thursday && selectedTimeStudent.Contains(o.Time)) select o.Time).ToList();

                                                    otherselectedTimeTempstudent = (from o in otherselectedTimeTempstudent
                                                                                    where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                                        && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                                    select o).ToList();
                                                    otherselectedTimeStudent = otherselectedTimeStudent.Intersect(otherselectedTimeTempstudent).ToList();
                                                    otherselectedcount = otherselectedTimeStudent.Intersect(selectedTimeStudent).Count();
                                                    otherDay = "Thursday";
                                                }

                                                selectedTimeStudent = otherselectedTimeStudent.ToList();

                                            }
                                            #endregion;
                                            foreach (var itemTime in selectedTimeStudent)
                                            {
                                                times = itemTime.Split(separators, StringSplitOptions.None);
                                                if (times[0] == selectedTimeStudent.First().Split(separators, StringSplitOptions.None)[0])
                                                    TempselectedTimeStudent.Add(itemTime);
                                                if (!string.IsNullOrEmpty(previoustime) && (DateTime.Parse(times[0]).Subtract(DateTime.Parse(previoustime)).TotalMinutes == 0))
                                                {
                                                    TempselectedTimeStudent.Add(itemTime);
                                                }
                                                else
                                                {
                                                    StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                                    TempselectedTimeStudent.Clear();
                                                    TempselectedTimeStudent.Add(itemTime);
                                                }
                                                previoustime = times[1];
                                                if (times[0] == selectedTimeStudent.Last().Split(separators, StringSplitOptions.None)[0])
                                                    StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                            }
                                            previoustime = string.Empty;
                                            foreach (var collectionTime in StudentTimeCollection)
                                            {

                                                selectedcount = collectionTime.studentTime.Count();
                                                if (backToback && counter == 1)
                                                    if (selectedcount < 3)
                                                        selectedcount = 0;
                                                #region add group of students
                                                if (selectedcount > 1)
                                                {

                                                    times = (from o in collectionTime.studentTime select o).First().Split(separators, StringSplitOptions.None);
                                                    // startstudentime = DateTime.Parse(times[0]);
                                                    timesEnd = (from o in collectionTime.studentTime select o).Last().Split(separators, StringSplitOptions.None);
                                                    // endstudentime = DateTime.Parse(times[1]);
                                                    if (count == 0)
                                                    {

                                                        InfoStudent.StudentName1 = student.FirstName + " " + student.LastName;
                                                        InfoStudent.StudentName2 = tempstudent.FirstName + " " + tempstudent.LastName;
                                                        InfoStudent.Day = (backtwodays ? day + "@" + otherDay : day);
                                                        InfoStudent.StartTime = times[0];
                                                        InfoStudent.EndTime = timesEnd[1];
                                                        InfoStudent.Section = student.Section;
                                                        InfoStudent.Transportation1 = student.Transportation;
                                                        InfoStudent.Transportation2 = tempstudent.Transportation;
                                                        InfoStudent.Email1 = student.Email;
                                                        InfoStudent.Email2 = tempstudent.Email;
                                                        InfoStudent.Major1 = student.Major;
                                                        InfoStudent.Major2 = tempstudent.Major;
                                                        InfoStudent.location = district;
                                                        InfoStudent.IstwoDaysback = backtwodays;
                                                        InfoStudent.IsbackToback = backToback;
                                                        //  GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        GroupingStudents.Add(InfoStudent);
                                                        IsGroupNoTranpsportChecked = true;
                                                        count++;

                                                    }
                                                    else if (count == 1)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime1 = times[0];
                                                        InfoStudent.OtherEndTime1 = timesEnd[1];
                                                        InfoStudent.OtherDay1 = (backtwodays ? day + "@" + otherDay : day);
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 2)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime2 = times[0];
                                                        InfoStudent.OtherEndTime2 = timesEnd[1];
                                                        InfoStudent.OtherDay2 = (backtwodays ? day + "@" + otherDay : day);
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 3)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime3 = times[0];
                                                        InfoStudent.OtherEndTime3 = timesEnd[1];
                                                        InfoStudent.OtherDay3 = (backtwodays ? day + "@" + otherDay : day);
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 4)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime4 = times[0];
                                                        InfoStudent.OtherEndTime4 = timesEnd[1];
                                                        InfoStudent.OtherDay4 = (backtwodays ? day + "@" + otherDay : day);
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 5)
                                                    {
                                                        IsGroupNoTranpsportChecked = true;
                                                        break;
                                                    }

                                                }
                                                #endregion;
                                            }
                                    /*        if (counter == 2)
                                            {
                                                if (count >= counter)
                                                {
                                                    if ((!string.IsNullOrEmpty(InfoStudent.Day) != !string.IsNullOrEmpty(InfoStudent.OtherDay1)) || (!string.IsNullOrEmpty(InfoStudent.Day) != !string.IsNullOrEmpty(InfoStudent.OtherDay2))
                                                        || (!string.IsNullOrEmpty(InfoStudent.OtherDay1) != !string.IsNullOrEmpty(InfoStudent.OtherDay2)))
                                                        IsGroupNoTranpsportChecked = true;
                                                    else
                                                    {
                                                        selectedcount = 0;
                                                        count = 0;
                                                    }
                                                  //  else { GroupingStudents.Remove(InfoStudent); count = 0; }
                                        /*            if ((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().Day
                                                        == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().OtherDay1)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        selectedcount = 0;
                                                        count = 0;
                                                    }
                                                    else if (((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().Day
                                                       == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay1) ||
                                                        ((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay2
                                                       == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay3))
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        selectedcount = 0;
                                                        count = 0;
                                                    }*/
                                    /*            }
                                                else
                                                {
                                                 //   GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                    selectedcount = 0;
                                                    count = 0;
                                                }

                                            }
                                    */
                                        }
                                        else if (day == "Wednesday")
                                        {
                                            string previoustime = null, removedTime = null; List<string> TempselectedTimeStudent = new List<string>();
                                            selectedTimeStudent = (from o in student.Schedule where o.Wednesday select o.Time).ToList();
                                            selectedTimeStudent = (from o in selectedTimeStudent
                                                                   where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                    && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                   select o).ToList();
                                            selectedTimeTempstudent = (from o in tempstudent.Schedule where o.Wednesday select o.Time).ToList();

                                            selectedTimeTempstudent = (from o in selectedTimeTempstudent
                                                                       where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                           && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                       select o).ToList();
                                            selectedTimeStudent = selectedTimeStudent.Intersect(selectedTimeTempstudent).ToList();
                                            #region Enforce section CI backtwodays
                                            string otherDay = string.Empty;
                                            if (backtwodays)
                                            {
                                                List<string> otherselectedTimeStudent = new List<string>(), otherselectedTimeTempstudent = new List<string>();
                                                int otherselectedcount = 0;

                                                otherselectedTimeStudent = (from o in student.Schedule where (o.Thursday && selectedTimeStudent.Contains(o.Time)) select o.Time).ToList();
                                                otherselectedTimeStudent = (from o in otherselectedTimeStudent
                                                                            where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                             && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                            select o).ToList();
                                                otherselectedTimeTempstudent = (from o in tempstudent.Schedule where (o.Thursday && selectedTimeStudent.Contains(o.Time)) select o.Time).ToList();

                                                otherselectedTimeTempstudent = (from o in otherselectedTimeTempstudent
                                                                                where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                                    && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                                select o).ToList();
                                                otherselectedTimeStudent = otherselectedTimeStudent.Intersect(otherselectedTimeTempstudent).ToList();
                                                otherselectedcount = otherselectedTimeStudent.Intersect(selectedTimeStudent).Count();
                                                otherDay = "Thursday";
                                                if (otherselectedcount < 2)
                                                {
                                                    otherselectedTimeStudent = (from o in student.Schedule where (o.Friday && selectedTimeStudent.Contains(o.Time)) select o.Time).ToList();
                                                    otherselectedTimeStudent = (from o in otherselectedTimeStudent
                                                                                where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                                 && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                                select o).ToList();
                                                    otherselectedTimeTempstudent = (from o in tempstudent.Schedule where (o.Friday && selectedTimeStudent.Contains(o.Time)) select o.Time).ToList();

                                                    otherselectedTimeTempstudent = (from o in otherselectedTimeTempstudent
                                                                                    where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                                        && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                                    select o).ToList();
                                                    otherselectedTimeStudent = otherselectedTimeStudent.Intersect(otherselectedTimeTempstudent).ToList();
                                                    otherselectedcount = otherselectedTimeStudent.Intersect(selectedTimeStudent).Count();
                                                    otherDay = "Friday";
                                                }

                                                selectedTimeStudent = otherselectedTimeStudent.ToList();

                                            }
                                            #endregion;
                                            foreach (var itemTime in selectedTimeStudent)
                                            {
                                                times = itemTime.Split(separators, StringSplitOptions.None);
                                                if (times[0] == selectedTimeStudent.First().Split(separators, StringSplitOptions.None)[0])
                                                    TempselectedTimeStudent.Add(itemTime);
                                                if (!string.IsNullOrEmpty(previoustime) && (DateTime.Parse(times[0]).Subtract(DateTime.Parse(previoustime)).TotalMinutes == 0))
                                                {
                                                    TempselectedTimeStudent.Add(itemTime);
                                                }
                                                else
                                                {
                                                    StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                                    TempselectedTimeStudent.Clear();
                                                    TempselectedTimeStudent.Add(itemTime);
                                                }
                                                previoustime = times[1];
                                                if (times[0] == selectedTimeStudent.Last().Split(separators, StringSplitOptions.None)[0])
                                                    StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                            }
                                            previoustime = string.Empty;
                                            foreach (var collectionTime in StudentTimeCollection)
                                            {

                                                selectedcount = collectionTime.studentTime.Count();
                                                if (backToback && counter == 1)
                                                    if (selectedcount < 3)
                                                        selectedcount = 0;
                                                #region add group of students
                                                if (selectedcount > 1)
                                                {

                                                    times = (from o in collectionTime.studentTime select o).First().Split(separators, StringSplitOptions.None);
                                                    // startstudentime = DateTime.Parse(times[0]);
                                                    timesEnd = (from o in collectionTime.studentTime select o).Last().Split(separators, StringSplitOptions.None);
                                                    // endstudentime = DateTime.Parse(times[1]);
                                                    if (count == 0)
                                                    {

                                                        InfoStudent.StudentName1 = student.FirstName + " " + student.LastName;
                                                        InfoStudent.StudentName2 = tempstudent.FirstName + " " + tempstudent.LastName;
                                                        InfoStudent.Day = (backtwodays ? day + "@" + otherDay : day);
                                                        InfoStudent.StartTime = times[0];
                                                        InfoStudent.EndTime = timesEnd[1];
                                                        InfoStudent.Section = student.Section;
                                                        InfoStudent.Transportation1 = student.Transportation;
                                                        InfoStudent.Transportation2 = tempstudent.Transportation;
                                                        InfoStudent.Email1 = student.Email;
                                                        InfoStudent.Email2 = tempstudent.Email;
                                                        InfoStudent.Major1 = student.Major;
                                                        InfoStudent.Major2 = tempstudent.Major;
                                                        InfoStudent.location = district;
                                                        InfoStudent.IstwoDaysback = backtwodays;
                                                        InfoStudent.IsbackToback = backToback;
                                                        //  GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        GroupingStudents.Add(InfoStudent);
                                                        IsGroupNoTranpsportChecked = true;
                                                        count++;

                                                    }
                                                    else if (count == 1)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime1 = times[0];
                                                        InfoStudent.OtherEndTime1 = timesEnd[1];
                                                        InfoStudent.OtherDay1 = (backtwodays ? day + "@" + otherDay : day);
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 2)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime2 = times[0];
                                                        InfoStudent.OtherEndTime2 = timesEnd[1];
                                                        InfoStudent.OtherDay2 = (backtwodays ? day + "@" + otherDay : day);
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 3)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime3 = times[0];
                                                        InfoStudent.OtherEndTime3 = timesEnd[1];
                                                        InfoStudent.OtherDay3 = (backtwodays ? day + "@" + otherDay : day);
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 4)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime4 = times[0];
                                                        InfoStudent.OtherEndTime4 = timesEnd[1];
                                                        InfoStudent.OtherDay4 = (backtwodays ? day + "@" + otherDay : day);
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 5)
                                                    {
                                                        IsGroupNoTranpsportChecked = true;
                                                        break;
                                                    }

                                                }
                                                #endregion;
                                            }
                                    /*        if (counter == 2)
                                            {
                                                if (count >= counter)
                                                {
                                                    if ((!string.IsNullOrEmpty(InfoStudent.Day) != !string.IsNullOrEmpty(InfoStudent.OtherDay1)) || (!string.IsNullOrEmpty(InfoStudent.Day) != !string.IsNullOrEmpty(InfoStudent.OtherDay2))
                                                        || (!string.IsNullOrEmpty(InfoStudent.OtherDay1) != !string.IsNullOrEmpty(InfoStudent.OtherDay2)))
                                                        IsGroupNoTranpsportChecked = true;
                                                    else
                                                    {
                                                        selectedcount = 0;
                                                        count = 0;
                                                    }
                                                 //   else { GroupingStudents.Remove(InfoStudent); count = 0; }
                                                /*    if ((!string.IsNullOrEmpty(InfoStudent.Day) != !string.IsNullOrEmpty(InfoStudent.OtherDay1)) || (!string.IsNullOrEmpty(InfoStudent.Day) != !string.IsNullOrEmpty(InfoStudent.OtherDay2))
                                                        || (!string.IsNullOrEmpty(InfoStudent.OtherDay1) != !string.IsNullOrEmpty(InfoStudent.OtherDay2)))
                                                        counter = 0;
                                                    else GroupingStudents.Remove(InfoStudent);
                                                    if ((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().Day
                                                        == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().OtherDay1)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        selectedcount = 0;
                                                        count = 0;
                                                    }
                                                    else if (((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().Day
                                                       == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay1) ||
                                                        ((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay2
                                                       == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay3))
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        selectedcount = 0;
                                                        count = 0;
                                                    }*/
                                     /*           }
                                                else
                                                {
                                               //     GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                    selectedcount = 0;
                                                    count = 0;
                                                }

                                            }
                                    */
                                        }
                                        else if (day == "Thursday")
                                        {
                                            string previoustime = null, removedTime = null; List<string> TempselectedTimeStudent = new List<string>();
                                            selectedTimeStudent = (from o in student.Schedule where o.Thursday select o.Time).ToList();
                                            selectedTimeStudent = (from o in selectedTimeStudent
                                                                   where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                    && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                   select o).ToList();
                                            selectedTimeTempstudent = (from o in tempstudent.Schedule where o.Thursday select o.Time).ToList();

                                            selectedTimeTempstudent = (from o in selectedTimeTempstudent
                                                                       where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                           && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                       select o).ToList();
                                            selectedTimeStudent = selectedTimeStudent.Intersect(selectedTimeTempstudent).ToList();
                                            #region Enforce section CI backtwodays
                                            string otherDay = string.Empty;
                                            if (backtwodays)
                                            {
                                                List<string> otherselectedTimeStudent = new List<string>(), otherselectedTimeTempstudent = new List<string>();
                                                int otherselectedcount = 0;

                                                otherselectedTimeStudent = (from o in student.Schedule where (o.Friday && selectedTimeStudent.Contains(o.Time)) select o.Time).ToList();
                                                otherselectedTimeStudent = (from o in otherselectedTimeStudent
                                                                            where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                             && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                            select o).ToList();
                                                otherselectedTimeTempstudent = (from o in tempstudent.Schedule where (o.Friday && selectedTimeStudent.Contains(o.Time)) select o.Time).ToList();

                                                otherselectedTimeTempstudent = (from o in otherselectedTimeTempstudent
                                                                                where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                                    && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                                select o).ToList();
                                                otherselectedTimeStudent = otherselectedTimeStudent.Intersect(otherselectedTimeTempstudent).ToList();
                                                otherselectedcount = otherselectedTimeStudent.Intersect(selectedTimeStudent).Count();
                                                otherDay = "Friday";
                                                selectedTimeStudent = otherselectedTimeStudent.ToList();
                                       /*         if (otherselectedcount < 2)
                                                {
                                                    otherselectedTimeStudent = (from o in student.Schedule where (o.Friday && selectedTimeStudent.Contains(o.Time)) select o.Time).ToList();
                                                    otherselectedTimeStudent = (from o in otherselectedTimeStudent
                                                                                where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                                 && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                                select o).ToList();
                                                    otherselectedTimeTempstudent = (from o in tempstudent.Schedule where (o.Friday && selectedTimeStudent.Contains(o.Time)) select o.Time).ToList();

                                                    otherselectedTimeTempstudent = (from o in otherselectedTimeTempstudent
                                                                                    where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                                        && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                                    select o).ToList();
                                                    otherselectedTimeStudent = otherselectedTimeStudent.Intersect(otherselectedTimeTempstudent).ToList();
                                                    otherselectedcount = otherselectedTimeStudent.Intersect(selectedTimeStudent).Count();
                                                    otherDay = "Friday";
                                                }
                                                */


                                            }
                                            #endregion;
                                            foreach (var itemTime in selectedTimeStudent)
                                            {
                                                times = itemTime.Split(separators, StringSplitOptions.None);
                                                if (times[0] == selectedTimeStudent.First().Split(separators, StringSplitOptions.None)[0])
                                                    TempselectedTimeStudent.Add(itemTime);
                                                if (!string.IsNullOrEmpty(previoustime) && (DateTime.Parse(times[0]).Subtract(DateTime.Parse(previoustime)).TotalMinutes == 0))
                                                {
                                                    TempselectedTimeStudent.Add(itemTime);
                                                }
                                                else
                                                {
                                                    StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                                    TempselectedTimeStudent.Clear();
                                                    TempselectedTimeStudent.Add(itemTime);
                                                }
                                                previoustime = times[1];
                                                if (times[0] == selectedTimeStudent.Last().Split(separators, StringSplitOptions.None)[0])
                                                    StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                            }
                                            previoustime = string.Empty;
                                            foreach (var collectionTime in StudentTimeCollection)
                                            {

                                                selectedcount = collectionTime.studentTime.Count();
                                                if (backToback && counter == 1)
                                                    if (selectedcount < 3)
                                                        selectedcount = 0;
                                                #region add group of students
                                                if (selectedcount > 1)
                                                {

                                                    times = (from o in collectionTime.studentTime select o).First().Split(separators, StringSplitOptions.None);
                                                    // startstudentime = DateTime.Parse(times[0]);
                                                    timesEnd = (from o in collectionTime.studentTime select o).Last().Split(separators, StringSplitOptions.None);
                                                    // endstudentime = DateTime.Parse(times[1]);
                                                    if (count == 0)
                                                    {

                                                        InfoStudent.StudentName1 = student.FirstName + " " + student.LastName;
                                                        InfoStudent.StudentName2 = tempstudent.FirstName + " " + tempstudent.LastName;
                                                        InfoStudent.Day = (backtwodays ? day + "@" + otherDay : day);
                                                        InfoStudent.StartTime = times[0];
                                                        InfoStudent.EndTime = timesEnd[1];
                                                        InfoStudent.Section = student.Section;
                                                        InfoStudent.Transportation1 = student.Transportation;
                                                        InfoStudent.Transportation2 = tempstudent.Transportation;
                                                        InfoStudent.Email1 = student.Email;
                                                        InfoStudent.Email2 = tempstudent.Email;
                                                        InfoStudent.Major1 = student.Major;
                                                        InfoStudent.Major2 = tempstudent.Major;
                                                        InfoStudent.location = district;
                                                        InfoStudent.IstwoDaysback = backtwodays;
                                                        InfoStudent.IsbackToback = backToback;
                                                        //  GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        GroupingStudents.Add(InfoStudent);
                                                        IsGroupNoTranpsportChecked = true;
                                                        count++;

                                                    }
                                                    else if (count == 1)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime1 = times[0];
                                                        InfoStudent.OtherEndTime1 = timesEnd[1];
                                                        InfoStudent.OtherDay1 = (backtwodays ? day + "@" + otherDay : day);
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 2)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime2 = times[0];
                                                        InfoStudent.OtherEndTime2 = timesEnd[1];
                                                        InfoStudent.OtherDay2 = (backtwodays ? day + "@" + otherDay : day);
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 3)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime3 = times[0];
                                                        InfoStudent.OtherEndTime3 = timesEnd[1];
                                                        InfoStudent.OtherDay3 = (backtwodays ? day + "@" + otherDay : day);
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 4)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime4 = times[0];
                                                        InfoStudent.OtherEndTime4 = timesEnd[1];
                                                        InfoStudent.OtherDay4 = (backtwodays ? day + "@" + otherDay : day);
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 5)
                                                    {
                                                        IsGroupNoTranpsportChecked = true;
                                                        break;
                                                    }

                                                }
                                                #endregion;
                                            }
                                      /*      if (counter == 2)
                                            {
                                                if (count >= counter)
                                                {
                                                    if ((!string.IsNullOrEmpty(InfoStudent.Day) != !string.IsNullOrEmpty(InfoStudent.OtherDay1)) || (!string.IsNullOrEmpty(InfoStudent.Day) != !string.IsNullOrEmpty(InfoStudent.OtherDay2))
                                                        || (!string.IsNullOrEmpty(InfoStudent.OtherDay1) != !string.IsNullOrEmpty(InfoStudent.OtherDay2)))
                                                        IsGroupNoTranpsportChecked = true;
                                                    else
                                                    {
                                                        selectedcount = 0;
                                                        count = 0;
                                                    }
                                                  //  else { GroupingStudents.Remove(InfoStudent); count = 0; }
                                           /*         if ((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().Day
                                                        == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().OtherDay1)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        selectedcount = 0;
                                                        count = 0;
                                                    }
                                                    else if (((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().Day
                                                       == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay1) ||
                                                        ((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay2
                                                       == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay3))
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        selectedcount = 0;
                                                        count = 0;
                                                    }*/
                                      /*          }
                                                else
                                                {
                                              //      GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                    selectedcount = 0;
                                                    count = 0;
                                                }

                                            }
                                    */
                                        }
                                        else if (day == "Friday")
                                        {
                                            string previoustime = null, removedTime = null; List<string> TempselectedTimeStudent = new List<string>(); int getIndex = 0;
                                            selectedTimeStudent = (from o in student.Schedule where o.Friday select o.Time).ToList();
                                            selectedTimeStudent = (from o in selectedTimeStudent
                                                                   where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                    && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                   select o).ToList();
                                            selectedTimeTempstudent = (from o in tempstudent.Schedule where o.Friday select o.Time).ToList();

                                            selectedTimeTempstudent = (from o in selectedTimeTempstudent
                                                                       where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                           && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                       select o).ToList();
                                            selectedTimeStudent = selectedTimeStudent.Intersect(selectedTimeTempstudent).ToList();
                                            #region Enforce section CI backtwodays
                                            string otherDay = string.Empty;
                                            if (backtwodays)
                                            {
                                                List<string> otherselectedTimeStudent = new List<string>(), otherselectedTimeTempstudent = new List<string>();
                                                int otherselectedcount = 0;

                                                otherselectedTimeStudent = (from o in student.Schedule where (o.Thursday && selectedTimeStudent.Contains(o.Time)) select o.Time).ToList();
                                                otherselectedTimeStudent = (from o in otherselectedTimeStudent
                                                                            where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                             && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                            select o).ToList();
                                                otherselectedTimeTempstudent = (from o in tempstudent.Schedule where (o.Thursday && selectedTimeStudent.Contains(o.Time)) select o.Time).ToList();

                                                otherselectedTimeTempstudent = (from o in otherselectedTimeTempstudent
                                                                                where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                                    && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                                select o).ToList();
                                                otherselectedTimeStudent = otherselectedTimeStudent.Intersect(otherselectedTimeTempstudent).ToList();
                                                otherselectedcount = otherselectedTimeStudent.Intersect(selectedTimeStudent).Count();
                                                otherDay = "Thursday";
                                                selectedTimeStudent = otherselectedTimeStudent.ToList();
                                                /*         if (otherselectedcount < 2)
                                                         {
                                                             otherselectedTimeStudent = (from o in student.Schedule where (o.Friday && selectedTimeStudent.Contains(o.Time)) select o.Time).ToList();
                                                             otherselectedTimeStudent = (from o in otherselectedTimeStudent
                                                                                         where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                                          && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                                         select o).ToList();
                                                             otherselectedTimeTempstudent = (from o in tempstudent.Schedule where (o.Friday && selectedTimeStudent.Contains(o.Time)) select o.Time).ToList();

                                                             otherselectedTimeTempstudent = (from o in otherselectedTimeTempstudent
                                                                                             where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                                                                 && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                                                                             select o).ToList();
                                                             otherselectedTimeStudent = otherselectedTimeStudent.Intersect(otherselectedTimeTempstudent).ToList();
                                                             otherselectedcount = otherselectedTimeStudent.Intersect(selectedTimeStudent).Count();
                                                             otherDay = "Friday";
                                                         }
                                                         */


                                            }
                                            #endregion;
                                            foreach (var itemTime in selectedTimeStudent)
                                            {
                                                times = itemTime.Split(separators, StringSplitOptions.None);
                                                if (times[0] == selectedTimeStudent.First().Split(separators, StringSplitOptions.None)[0])
                                                    TempselectedTimeStudent.Add(itemTime);
                                                if (!string.IsNullOrEmpty(previoustime) && (DateTime.Parse(times[0]).Subtract(DateTime.Parse(previoustime)).TotalMinutes == 0))
                                                {
                                                    TempselectedTimeStudent.Add(itemTime);
                                                }
                                                else
                                                {
                                                    StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                                    TempselectedTimeStudent.Clear();
                                                    TempselectedTimeStudent.Add(itemTime);
                                                }
                                                previoustime = times[1];
                                                if (times[0] == selectedTimeStudent.Last().Split(separators, StringSplitOptions.None)[0])
                                                    StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                            }

                                            previoustime = string.Empty;

                                            foreach (var collectionTime in StudentTimeCollection)
                                            {

                                                selectedcount = collectionTime.studentTime.Count();
                                                if (backToback && counter == 1)
                                                    if (selectedcount < 3)
                                                        selectedcount = 0;

                                                #region add group of students
                                                if (selectedcount > 1)
                                                {

                                                    times = (from o in collectionTime.studentTime select o).First().Split(separators, StringSplitOptions.None);
                                                    // startstudentime = DateTime.Parse(times[0]);
                                                    timesEnd = (from o in collectionTime.studentTime select o).Last().Split(separators, StringSplitOptions.None);
                                                    // endstudentime = DateTime.Parse(times[1]);
                                                    if (count == 0)
                                                    {

                                                        InfoStudent.StudentName1 = student.FirstName + " " + student.LastName;
                                                        InfoStudent.StudentName2 = tempstudent.FirstName + " " + tempstudent.LastName;
                                                        InfoStudent.Day = (backtwodays ? day + "@" + otherDay : day);
                                                        InfoStudent.StartTime = times[0];
                                                        InfoStudent.EndTime = timesEnd[1];
                                                        InfoStudent.Section = student.Section;
                                                        InfoStudent.Transportation1 = student.Transportation;
                                                        InfoStudent.Transportation2 = tempstudent.Transportation;
                                                        InfoStudent.Email1 = student.Email;
                                                        InfoStudent.Email2 = tempstudent.Email;
                                                        InfoStudent.Major1 = student.Major;
                                                        InfoStudent.Major2 = tempstudent.Major;
                                                        InfoStudent.location = district;
                                                        InfoStudent.IstwoDaysback = backtwodays;
                                                        InfoStudent.IsbackToback = backToback;
                                                        //  GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        GroupingStudents.Add(InfoStudent);
                                                        IsGroupNoTranpsportChecked = true;
                                                        count++;

                                                    }
                                                    else if (count == 1)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime1 = times[0];
                                                        InfoStudent.OtherEndTime1 = timesEnd[1];
                                                        InfoStudent.OtherDay1 = (backtwodays ? day + "@" + otherDay : day);
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 2)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime2 = times[0];
                                                        InfoStudent.OtherEndTime2 = timesEnd[1];
                                                        InfoStudent.OtherDay2 = (backtwodays ? day + "@" + otherDay : day);
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 3)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime3 = times[0];
                                                        InfoStudent.OtherEndTime3 = timesEnd[1];
                                                        InfoStudent.OtherDay3 = (backtwodays ? day + "@" + otherDay : day);
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 4)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        InfoStudent.OtherStartTime4 = times[0];
                                                        InfoStudent.OtherEndTime4 = timesEnd[1];
                                                        InfoStudent.OtherDay4 = (backtwodays ? day + "@" + otherDay : day);
                                                        GroupingStudents.Add(InfoStudent);
                                                        count++;
                                                    }
                                                    else if (count == 5)
                                                    {
                                                        IsGroupNoTranpsportChecked = true;
                                                        break;
                                                    }

                                                }
                                                #endregion;
                                            }
                                            //Remove CI students non enforcing back to back two days                                             
                                      /*      if (counter == 2)
                                            {
                                                if (count >= counter)
                                                {
                                                    if ((!string.IsNullOrEmpty(InfoStudent.Day) != !string.IsNullOrEmpty(InfoStudent.OtherDay1)) || (!string.IsNullOrEmpty(InfoStudent.Day) != !string.IsNullOrEmpty(InfoStudent.OtherDay2))
                                                        || (!string.IsNullOrEmpty(InfoStudent.OtherDay1) != !string.IsNullOrEmpty(InfoStudent.OtherDay2)))
                                                        IsGroupNoTranpsportChecked = true;
                                                    else
                                                    {
                                                        selectedcount = 0;
                                                        count = 0;
                                                    }
                                                  //  else { GroupingStudents.Remove(InfoStudent); count = 0; }
                                               /*     if ((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().Day
                                                        == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().OtherDay1)
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        selectedcount = 0;
                                                        count = 0;
                                                    }
                                                    else if (((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().Day
                                                       == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay1) ||
                                                        ((from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay2
                                                       == (from o in GroupingStudents where ((o.Email1 == student.Email) && (o.Email2 == tempstudent.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay3))
                                                    {
                                                        GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                        selectedcount = 0;
                                                        count = 0;
                                                    }*/
                                          /*      }
                                                else
                                                {
                                                 //   GroupingStudents = (from o in GroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                                    selectedcount = 0;
                                                    count = 0;
                                                }

                                            }
*/



                                        }

                                        if (count == 5)
                                            break;

                                    }
                                }
                            }
                        }
                    }
                }
                #endregion;
            }
            //Get the rest of non matching students
            List<string> student1Emails = (from o in GroupingStudents select o.Email1).ToList();
            List<string> student2Emails = (from o in GroupingStudents select o.Email2).ToList();
            List<StudentCI> NoMatchStudents = new List<StudentCI>();
            NoMatchStudents = (from o in Studentci where !student1Emails.Contains(o.Email) && !student2Emails.Contains(o.Email) select o).ToList();

            //Match Teachers to Students ( 3 LEVEL to consider)

            List<MatchingStudent> TempGroupingStudents = new List<MatchingStudent>();
            //ordering first Students  requiring back to back then 1300 last no back to back

            int compter = 1000;
            while (!Open)
            {
                Results2.Clear();
                TempGroupingStudents = GroupingStudents.OrderBy(x => x.OtherDay4 == null).ToList();
                #region
                /* Random order of Teachers*/
                ShuffleTeachCI(Teacherstep22);
                #endregion;
                //Assign Teachers
                foreach (var teacher in Teacherstep22)
                {

                    if (teacher.Pair == "Yes")
                    {
                        count = 2;
                    }
                    else
                    {
                        count = 1;
                    }
                    //    DateTime startstudentime, endstudentime, startteachertime, endteachertime;
                    //       TimeSpan differstart, differend;

                    string day = string.Empty;
                    //  TimeSpan is90;// removed because 90 min or 45 min always back to back for specific CI & 1300 section students
                    bool checkbackToback, checktwoDaysback;
                    int compteur = 0;
                    foreach (var schedule in teacher.Schedule)
                    {
                        checkbackToback = false; checktwoDaysback = false;

                        // is90 = DateTime.Parse(schedule.EndTime).Subtract(DateTime.Parse(schedule.StartTime));
                        //  if (is90.TotalMinutes >= 90)
                        //register other Day &times for this back to back 
                        List<BackDay> backtwoDaystimes = new List<BackDay>(); List<BackDay> backsameDaytimes = new List<BackDay>();
                        // Avail backschedule=new Avail();
                        if (teacher.TypeOfSchedule == "1" || teacher.TypeOfSchedule == "2")
                        {
                            if ((from o in teacher.Schedule where (o.Subject == schedule.Subject && o.StartTime != schedule.StartTime && o.Days == schedule.Days) select o).Count() > 0)
                            {
                                //backschedule = (from o in teacher.Schedule where (o.Days == schedule.Days && o.StartTime != schedule.StartTime && o.Subject == schedule.Subject) select o).First();
                                //backsameDaytimes[0] = DateTime.Parse(backschedule.StartTime).ToString("hh:mm tt");
                                //backsameDaytimes[1] = DateTime.Parse(backschedule.EndTime).ToString("hh:mm tt");
                                backsameDaytimes = (from o in teacher.Schedule where (o.Days == schedule.Days && o.StartTime != schedule.StartTime && o.Subject == schedule.Subject) select new BackDay() { Day = o.Days, StartTime = o.StartTime, EndTime = o.EndTime }).ToList();
                                checkbackToback = true;
                            }

                            if ((from o in teacher.Schedule where (o.Days != schedule.Days && o.Subject == schedule.Subject && o.StartTime == schedule.StartTime) select o.Days).Distinct().Count() > 0)
                            {
                                //backschedule = (from o in teacher.Schedule where (o.Days != schedule.Days && o.Subject == schedule.Subject) select o).First();
                                //backtwoDaystimes[0] = DateTime.Parse(backschedule.StartTime).ToString("hh:mm tt");
                                //backtwoDaystimes[1] = DateTime.Parse(backschedule.EndTime).ToString("hh:mm tt");
                                //backtwoDay = backschedule.Days;
                                backtwoDaystimes = (from o in teacher.Schedule where (o.Days != schedule.Days && o.Subject == schedule.Subject && o.StartTime == schedule.StartTime) select new BackDay() { Day = o.Days, StartTime = o.StartTime, EndTime = o.EndTime }).ToList();
                                checktwoDaysback = true;
                            }
                        }
                        //if(checkbackToback && checktwoDaysback)
                        if (checktwoDaysback)
                        {
                            TempGroupingStudents = TempGroupingStudents.OrderBy(x => x.IstwoDaysback == true).ToList();
                        }
                        else
                            if (checkbackToback)
                            {
                                TempGroupingStudents = TempGroupingStudents.OrderBy(x => x.IsbackToback == true).ToList();
                            }
                        if (teacher.TypeOfSchedule == "3")
                        {
                            if (teacher.IsBackToBack == "1")
                            {
                                if ((from o in teacher.BackDays where o.Subject == schedule.Subject && o.Day != schedule.Days  select o.Day).Distinct().Count() > 0)
                                {
                                    if ((from o in teacher.Schedule where (o.Subject == schedule.Subject && o.StartTime == schedule.StartTime && o.Days == schedule.Days) select o).Count() > 0)
                                    {
                                        //backschedule = (from o in teacher.Schedule where (o.Days != schedule.Days && o.Subject == schedule.Subject) select o).First();
                                        //backtwoDaystimes[0] = DateTime.Parse(backschedule.StartTime).ToString("hh:mm tt");
                                        //backtwoDaystimes[1] = DateTime.Parse(backschedule.EndTime).ToString("hh:mm tt");
                                        //backtwoDay = backschedule.Days;
                                        backtwoDaystimes = (from o in teacher.Schedule where (o.Days != schedule.Days && o.Subject == schedule.Subject && o.StartTime == schedule.StartTime) select new BackDay() { Day = o.Days, StartTime = o.StartTime, EndTime = o.EndTime }).ToList();
                                        checktwoDaysback = true;
                                        //  TempGroupingStudents = TempGroupingStudents.OrderBy(x => x.IstwoDaysback == true).ToList();
                                    }
                                    else TempGroupingStudents = TempGroupingStudents.OrderBy(x => x.IstwoDaysback == false).ToList();
                                    
                                }
                                if ((from o in teacher.BackDays where o.Subject == schedule.Subject && o.Day == schedule.Days select o.Day).Count() > 0)
                                {
                                    if ((from o in teacher.Schedule where (o.Subject == schedule.Subject && o.StartTime != schedule.StartTime && o.Days == schedule.Days) select o).Count() > 0)
                                    {
                                        //backschedule = (from o in teacher.Schedule where (o.Days == schedule.Days && o.StartTime != schedule.StartTime && o.Subject == schedule.Subject) select o).First();
                                        //backsameDaytimes[0] = DateTime.Parse(backschedule.StartTime).ToString("hh:mm tt");
                                        //backsameDaytimes[1] = DateTime.Parse(backschedule.EndTime).ToString("hh:mm tt");
                                        backsameDaytimes = (from o in teacher.Schedule where (o.Days == schedule.Days && o.StartTime != schedule.StartTime && o.Subject == schedule.Subject) select new BackDay() { Day = o.Days, StartTime = o.StartTime, EndTime = o.EndTime }).ToList();
                                        // TempGroupingStudents = TempGroupingStudents.OrderBy(x => x.IsbackToback == true).ToList();
                                        checkbackToback = true;
                                    }
                                    else TempGroupingStudents = TempGroupingStudents.OrderBy(x => x.IsbackToback == false).ToList();
                                }
                                if (checktwoDaysback)
                                    TempGroupingStudents = TempGroupingStudents.OrderBy(x => x.IstwoDaysback == true).ToList();
                                else if (checkbackToback)
                                    TempGroupingStudents = TempGroupingStudents.OrderBy(x => x.IsbackToback == true).ToList();

                            }
                            else TempGroupingStudents = TempGroupingStudents.OrderBy(x => x.IsbackToback == false).ToList();
                        }



                        string[] Teachertimes = new string[2]; string[] Studentimes = new string[2];
                        string teachSubject = schedule.Subject;
                        Teachertimes[0] = DateTime.Parse(schedule.StartTime).ToString("hh:mm tt");
                        Teachertimes[1] = DateTime.Parse(schedule.EndTime).ToString("hh:mm tt");

                        bool selectedcount = false;

                        MatchingStudent StudentsInfo = new MatchingStudent();
                        BackDay BackInfo = new BackDay();
                        //    if ((from o in teacher.Schedule where o.Days == schedule.Days select o).FirstOrDefault() != null){

                        if (schedule.Days == "Monday" || schedule.Days == "A Monday" || schedule.Days == "B Monday")
                            day = "Monday";
                        else if (schedule.Days == "Tuesday" || schedule.Days == "A Tuesday" || schedule.Days == "B Tuesday")
                            day = "Tuesday";
                        else if (schedule.Days == "Wednesday" || schedule.Days == "A Wednesday" || schedule.Days == "B Wednesday")
                            day = "Wednesday";
                        else if (schedule.Days == "Thursday" || schedule.Days == "A Thursday" || schedule.Days == "B Thursday")
                            day = "Thursday";
                        else if (schedule.Days == "Friday" || schedule.Days == "A Friday" || schedule.Days == "B Friday")
                            day = "Friday";
                        //Shift group of students
                        ShuffleGroupStudents(TempGroupingStudents);
                        foreach (var student in TempGroupingStudents)
                        {
                            counter = 0;
                            subject = false; location = false;
                            if ((schedule.Subject == "Pre-calculus" || schedule.Subject == "Algebra 2" || schedule.Subject == "Math" || schedule.Subject == "Algebra 1" || schedule.Subject == "Pre-AP Math" || schedule.Subject == "Math Others") && (student.Major1 == "Mathematics" || student.Major1 == "Math 7-12" || student.Major2 == "Mathematics" || student.Major2 == "Math 7-12"))
                                subject = true;
                            else if ((schedule.Subject == "Ecology" || schedule.Subject == "AP Bio" || schedule.Subject == "Biology" || schedule.Subject == "Science" || schedule.Subject == "Pre-AP Science" || schedule.Subject == "Science Others") && (student.Major1 == "Biology" || student.Major1 == "Environmental Science" || student.Major2 == "Biology" || student.Major2 == "Environmental Science"))
                                subject = true;
                            else if ((schedule.Subject == "Chemistry" || schedule.Subject == "AP Chemistry" || schedule.Subject == "Pre-AP Chemistry") && (student.Major1 == "Chemistry" || student.Major2 == "Chemistry"))
                                subject = true;
                            else if ((schedule.Subject == "Computer Science" ) && (student.Major1 == "Computer Science" || student.Major2 == "Computer Science"))
                                subject = true;
                            else if ((schedule.Subject == "Physics") && (student.Major1 == "Physics" || student.Major2 == "Physics"))
                                subject = true;

                            if (((student.location == 1 || student.location == 2 || student.location == 3 || student.location == 4 || student.location == 5) && teacher.District == "Denton")
                                                           || ((student.location == 1 || student.location == 2 || student.location == 4) && teacher.District == "Lewisville") ||
                                                             ((student.location == 1 || student.location == 3 || student.location == 4 || student.location == 5) && teacher.District == "McKinney")
                                                             || ((student.location == 1 || student.location == 3 || student.location == 4 || student.location == 5) && teacher.District == "Prosper"))
                                location = true;
                            //Add location true since it doesn't matter any more as parameter
                            location = true;

                            if (!string.IsNullOrEmpty(student.Day) && student.Day.Contains(day) && subject && location)
                            {
                                Studentimes[0] = student.StartTime;
                                Studentimes[1] = student.EndTime;

                                if ((DateTime.Parse(Teachertimes[0]) >= DateTime.Parse(Studentimes[0])) && (DateTime.Parse(Teachertimes[1]) <= DateTime.Parse(Studentimes[1])))
                                {
                                    if (student.IstwoDaysback && checktwoDaysback)
                                    {
                                        if ((from o in backtwoDaystimes where DateTime.Parse(o.StartTime) >= DateTime.Parse(Studentimes[0]) && DateTime.Parse(o.EndTime) <= DateTime.Parse(Studentimes[1]) select o).Count() > 0)
                                        {
                                            BackInfo = (from o in backtwoDaystimes where DateTime.Parse(o.StartTime) >= DateTime.Parse(Studentimes[0]) && DateTime.Parse(o.EndTime) <= DateTime.Parse(Studentimes[1]) select o).First();

                                            if (TwoDaysClassBack.Contains(BackInfo.Day + "-" + student.Day) || TwoDaysClassBack.Contains(student.Day + "-" + BackInfo.Day))
                                            {
                                                selectedcount = true;
                                                StudentsInfo = student;
                                                break;
                                            }
                                            //    else counter++;
                                        }
                                    }
                                    else if (student.IsbackToback && checkbackToback)
                                    {
                                        if ((from o in backsameDaytimes where DateTime.Parse(o.StartTime) >= DateTime.Parse(Studentimes[0]) && DateTime.Parse(o.EndTime) <= DateTime.Parse(Studentimes[1]) select o).Count() > 0)
                                        {
                                            BackInfo = (from o in backsameDaytimes where DateTime.Parse(o.StartTime) >= DateTime.Parse(Studentimes[0]) && DateTime.Parse(o.EndTime) <= DateTime.Parse(Studentimes[1]) select o).First();
                                            //   if (counter > 0)
                                            //    {
                                            selectedcount = true;
                                            StudentsInfo = student; break;
                                            //   }
                                            //  else counter++;
                                        }
                                    }
                                    else if (!student.IsbackToback)
                                    {
                                        selectedcount = true;
                                        StudentsInfo = student;
                                        break;
                                    }
                                }
                            }
                            //check if student group has another available day
                            if (!string.IsNullOrEmpty(student.OtherDay1) && student.OtherDay1.Contains(day) && subject && location)
                            {
                                Studentimes[0] = student.OtherStartTime1;
                                Studentimes[1] = student.OtherEndTime1;
                                if ((DateTime.Parse(Teachertimes[0]) >= DateTime.Parse(Studentimes[0])) && (DateTime.Parse(Teachertimes[1]) <= DateTime.Parse(Studentimes[1])))
                                {
                                    if (student.IstwoDaysback && checktwoDaysback)
                                    {
                                        if ((from o in backtwoDaystimes where DateTime.Parse(o.StartTime) >= DateTime.Parse(Studentimes[0]) && DateTime.Parse(o.EndTime) <= DateTime.Parse(Studentimes[1]) select o).Count() > 0)
                                        {
                                            BackInfo = (from o in backtwoDaystimes where DateTime.Parse(o.StartTime) >= DateTime.Parse(Studentimes[0]) && DateTime.Parse(o.EndTime) <= DateTime.Parse(Studentimes[1]) select o).First();
                                            //if((DateTime.Parse(backtwoDaystimes[0]) >= DateTime.Parse(Studentimes[0])) && (DateTime.Parse(backtwoDaystimes[1]) <= DateTime.Parse(Studentimes[1]))){
                                            if (TwoDaysClassBack.Contains(BackInfo.Day + "-" + student.OtherDay1) || TwoDaysClassBack.Contains(student.OtherDay1 + "-" + BackInfo.Day))
                                            {
                                                selectedcount = true;
                                                StudentsInfo = student;
                                                break;
                                            }
                                            //     else counter++;
                                        }
                                    }
                                    else if (student.IsbackToback && checkbackToback)
                                    {
                                        if ((from o in backsameDaytimes where DateTime.Parse(o.StartTime) >= DateTime.Parse(Studentimes[0]) && DateTime.Parse(o.EndTime) <= DateTime.Parse(Studentimes[1]) select o).Count() > 0)
                                        {
                                            BackInfo = (from o in backsameDaytimes where DateTime.Parse(o.StartTime) >= DateTime.Parse(Studentimes[0]) && DateTime.Parse(o.EndTime) <= DateTime.Parse(Studentimes[1]) select o).First();
                                            // if((DateTime.Parse(backsameDaytimes[0]) >= DateTime.Parse(Studentimes[0])) && (DateTime.Parse(backsameDaytimes[1]) <= DateTime.Parse(Studentimes[1]))){
                                            //         if(counter>0){
                                            selectedcount = true;
                                            StudentsInfo = student; break;
                                        }
                                        //         else counter++;                                       
                                        // }  
                                    }
                                    else if (!student.IsbackToback)
                                    {
                                        selectedcount = true;
                                        StudentsInfo = student;
                                        break;
                                    }

                                }
                            }
                            if (!string.IsNullOrEmpty(student.OtherDay2) && student.OtherDay2.Contains(day) && subject && location)
                            {
                                Studentimes[0] = student.OtherStartTime2;
                                Studentimes[1] = student.OtherEndTime2;
                                if ((DateTime.Parse(Teachertimes[0]) >= DateTime.Parse(Studentimes[0])) && (DateTime.Parse(Teachertimes[1]) <= DateTime.Parse(Studentimes[1])))
                                {
                                    if (student.IstwoDaysback && checktwoDaysback)
                                    {
                                        if ((from o in backtwoDaystimes where DateTime.Parse(o.StartTime) >= DateTime.Parse(Studentimes[0]) && DateTime.Parse(o.EndTime) <= DateTime.Parse(Studentimes[1]) select o).Count() > 0)
                                        {
                                            BackInfo = (from o in backtwoDaystimes where DateTime.Parse(o.StartTime) >= DateTime.Parse(Studentimes[0]) && DateTime.Parse(o.EndTime) <= DateTime.Parse(Studentimes[1]) select o).First();
                                            if (TwoDaysClassBack.Contains(BackInfo.Day + "-" + student.OtherDay2) || TwoDaysClassBack.Contains(student.OtherDay2 + "-" + BackInfo.Day))
                                            {
                                                selectedcount = true;
                                                StudentsInfo = student;
                                                break;
                                            }
                                            //        else counter++;
                                        }
                                    }
                                    else if (student.IsbackToback && checkbackToback)
                                    {
                                        if ((from o in backsameDaytimes where DateTime.Parse(o.StartTime) >= DateTime.Parse(Studentimes[0]) && DateTime.Parse(o.EndTime) <= DateTime.Parse(Studentimes[1]) select o).Count() > 0)
                                        {
                                            BackInfo = (from o in backsameDaytimes where DateTime.Parse(o.StartTime) >= DateTime.Parse(Studentimes[0]) && DateTime.Parse(o.EndTime) <= DateTime.Parse(Studentimes[1]) select o).First();
                                            //           if(counter>0){
                                            selectedcount = true;
                                            StudentsInfo = student; break;
                                        }
                                        //          else counter++;                                       
                                        //     }  
                                    }
                                    else if (!student.IsbackToback)
                                    {
                                        selectedcount = true;
                                        StudentsInfo = student;
                                        break;
                                    }
                                }
                            }
                            if (!string.IsNullOrEmpty(student.OtherDay3) && student.OtherDay3.Contains(day) && subject && location)
                            {
                                Studentimes[0] = student.OtherStartTime3;
                                Studentimes[1] = student.OtherEndTime3;
                                if ((DateTime.Parse(Teachertimes[0]) >= DateTime.Parse(Studentimes[0])) && (DateTime.Parse(Teachertimes[1]) <= DateTime.Parse(Studentimes[1])))
                                {
                                    if (student.IstwoDaysback && checktwoDaysback)
                                    {
                                        if ((from o in backtwoDaystimes where DateTime.Parse(o.StartTime) >= DateTime.Parse(Studentimes[0]) && DateTime.Parse(o.EndTime) <= DateTime.Parse(Studentimes[1]) select o).Count() > 0)
                                        {
                                            BackInfo = (from o in backtwoDaystimes where DateTime.Parse(o.StartTime) >= DateTime.Parse(Studentimes[0]) && DateTime.Parse(o.EndTime) <= DateTime.Parse(Studentimes[1]) select o).First();
                                            if (TwoDaysClassBack.Contains(BackInfo.Day + "-" + student.OtherDay3) || TwoDaysClassBack.Contains(student.OtherDay3 + "-" + BackInfo.Day))
                                            {
                                                selectedcount = true;
                                                StudentsInfo = student;
                                                break;
                                            }
                                            //       else counter++;
                                        }
                                    }
                                    else if (student.IsbackToback && checkbackToback)
                                    {
                                        if ((from o in backsameDaytimes where DateTime.Parse(o.StartTime) >= DateTime.Parse(Studentimes[0]) && DateTime.Parse(o.EndTime) <= DateTime.Parse(Studentimes[1]) select o).Count() > 0)
                                        {
                                            BackInfo = (from o in backsameDaytimes where DateTime.Parse(o.StartTime) >= DateTime.Parse(Studentimes[0]) && DateTime.Parse(o.EndTime) <= DateTime.Parse(Studentimes[1]) select o).First();
                                            //       if(counter>0 ){
                                            selectedcount = true;
                                            StudentsInfo = student; break;
                                        }
                                        //         else counter++;                                       
                                        //   }  
                                    }
                                    else if (!student.IsbackToback)
                                    {
                                        selectedcount = true;
                                        StudentsInfo = student;
                                        break;
                                    }
                                }
                            }
                            if (!string.IsNullOrEmpty(student.OtherDay4) && student.OtherDay4.Contains(day) && subject && location)
                            {
                                Studentimes[0] = student.OtherStartTime4;
                                Studentimes[1] = student.OtherEndTime4;
                                if ((DateTime.Parse(Teachertimes[0]) >= DateTime.Parse(Studentimes[0])) && (DateTime.Parse(Teachertimes[1]) <= DateTime.Parse(Studentimes[1])))
                                {
                                    if (student.IstwoDaysback && checktwoDaysback)
                                    {
                                        if ((from o in backtwoDaystimes where DateTime.Parse(o.StartTime) >= DateTime.Parse(Studentimes[0]) && DateTime.Parse(o.EndTime) <= DateTime.Parse(Studentimes[1]) select o).Count() > 0)
                                        {
                                            BackInfo = (from o in backtwoDaystimes where DateTime.Parse(o.StartTime) >= DateTime.Parse(Studentimes[0]) && DateTime.Parse(o.EndTime) <= DateTime.Parse(Studentimes[1]) select o).First();
                                            if (TwoDaysClassBack.Contains(BackInfo.Day + "-" + student.OtherDay4) || TwoDaysClassBack.Contains(student.OtherDay4 + "-" + BackInfo.Day))
                                            {
                                                selectedcount = true;
                                                StudentsInfo = student;
                                                break;
                                            }
                                            //        else counter++;
                                        }
                                    }
                                    else if (student.IsbackToback && checkbackToback)
                                    {
                                        if ((from o in backsameDaytimes where DateTime.Parse(o.StartTime) >= DateTime.Parse(Studentimes[0]) && DateTime.Parse(o.EndTime) <= DateTime.Parse(Studentimes[1]) select o).Count() > 0)
                                        {
                                            BackInfo = (from o in backsameDaytimes where DateTime.Parse(o.StartTime) >= DateTime.Parse(Studentimes[0]) && DateTime.Parse(o.EndTime) <= DateTime.Parse(Studentimes[1]) select o).First();
                                            //        if(counter>0){
                                            selectedcount = true;
                                            StudentsInfo = student; break;
                                        }
                                        //          else counter++;                                       
                                        //      }  
                                    }
                                    else if (!student.IsbackToback)
                                    {
                                        selectedcount = true;
                                        StudentsInfo = student;
                                        break;
                                    }
                                }
                            }
                            /*
                            if (string.IsNullOrEmpty(student.OtherStartTime1))
                                student.OtherStartTime1 = string.Empty;
                            if (string.IsNullOrEmpty(student.OtherEndTime1))
                                student.OtherEndTime1 = string.Empty;
                            if (string.IsNullOrEmpty(student.OtherDay1))
                                student.OtherDay1 = string.Empty;
                            Results2.Add(new TableResult()
                            {
                                TeacherName = "N/A",
                                StudentName = student.StudentName1,
                                Major = "N/A",
                                Hour = (student.IsbackToback || student.IstwoDaysback) ? ((student.IstwoDaysback) ? student.StartTime + "-" + student.EndTime + " / " + student.OtherStartTime1.ToString() + "-" + student.OtherEndTime1.ToString()
                             : student.StartTime + "-" + student.EndTime + " / " + student.OtherStartTime1.ToString() + "-" + student.OtherEndTime1.ToString()) : student.StartTime + "-" + student.EndTime,
                                Days = (student.IsbackToback || student.IstwoDaysback) ? ((student.IstwoDaysback) ? student.Day + " / " + student.OtherDay1.ToString() : student.Day) : student.Day,
                                School = "N/A",
                                Room = "N/A",
                                Transportation = student.Transportation1,
                                Pair = teacher.Pair,
                                Location = true,
                                section = student.Section,
                                TeacherEmail = "N/A"

                            });
                            Results2.Add(new TableResult()
                            {
                                TeacherName = "N/A",
                                StudentName = student.StudentName2,
                                Major = "N/A",
                                Hour = (student.IsbackToback || student.IstwoDaysback) ? ((student.IstwoDaysback) ? student.StartTime + "-" + student.EndTime + " / " + student.OtherStartTime1.ToString() + "-" + student.OtherEndTime1.ToString()
                               : student.StartTime + "-" + student.EndTime + " / " + student.OtherStartTime1.ToString() + "-" + student.OtherEndTime1.ToString()) : student.StartTime + "-" + student.EndTime,
                                Days = (student.IsbackToback || student.IstwoDaysback) ? ((student.IstwoDaysback) ? student.Day + " / " + student.OtherDay1.ToString() : student.Day) : student.Day,
                                School = "N/A",
                                Room = "N/A",
                                Transportation = student.Transportation2,
                                Pair = teacher.Pair,
                                Location = true,
                                section = student.Section,
                                TeacherEmail = "N/A"

                            });
                             * */
                        }
                        //    }                                                                                                   

                        if (selectedcount && count > 0)
                        {
                            Results2.Add(new TableResult()
                            {
                                TeacherName = teacher.FirstName + " " + teacher.LastName,
                                StudentName = StudentsInfo.StudentName1,
                                Major = teachSubject,
                                Hour = (StudentsInfo.IsbackToback || StudentsInfo.IstwoDaysback) ? ((StudentsInfo.IstwoDaysback) ? Teachertimes[0] + "-" + Teachertimes[1] + " / " + BackInfo.StartTime + "-" + BackInfo.EndTime
                                : Teachertimes[0] + "-" + Teachertimes[1] + " / " + BackInfo.StartTime + "-" + BackInfo.EndTime) : Teachertimes[0] + "-" + Teachertimes[1],
                                Days = (StudentsInfo.IsbackToback || StudentsInfo.IstwoDaysback) ? ((StudentsInfo.IstwoDaysback) ? schedule.Days + " / " + BackInfo.Day : schedule.Days) : schedule.Days,
                                School = teacher.School,
                                Room = teacher.Room,
                                Transportation = StudentsInfo.Transportation1,
                                Pair = teacher.Pair,
                                Location = true,
                                section = StudentsInfo.Section,
                                TeacherEmail = teacher.Email

                            });
                            Results2.Add(new TableResult()
                            {
                                TeacherName = teacher.FirstName + " " + teacher.LastName,
                                StudentName = StudentsInfo.StudentName2,
                                Major = teachSubject,
                                Hour = (StudentsInfo.IsbackToback || StudentsInfo.IstwoDaysback) ? ((StudentsInfo.IstwoDaysback) ? Teachertimes[0] + "-" + Teachertimes[1] + " / " + BackInfo.StartTime + "-" + BackInfo.EndTime
                                : Teachertimes[0] + "-" + Teachertimes[1] + " / " + BackInfo.StartTime + "-" + BackInfo.EndTime) : Teachertimes[0] + "-" + Teachertimes[1],
                                Days = (StudentsInfo.IsbackToback || StudentsInfo.IstwoDaysback) ? ((StudentsInfo.IstwoDaysback) ? schedule.Days + " / " + BackInfo.Day : schedule.Days) : schedule.Days,
                                School = teacher.School,
                                Room = teacher.Room,
                                Transportation = StudentsInfo.Transportation2,
                                Pair = teacher.Pair,
                                Location = true,
                                section = StudentsInfo.Section,
                                TeacherEmail = teacher.Email

                            });
                            TempGroupingStudents.Remove(StudentsInfo);
                            StudentsInfo = null;
                            count--;
                            selectedcount = false;
                        }
                        if (count == 0)
                            break;
                    }


                }
                if (Results2.Count > Results.Count())
                {
                    Results = Results2.Distinct<TableResult>().ToList();
                 //   NoConditionResult = Results2.ToList();
                }
                if (Results2.Count() == 2 * GroupingStudents.Count() || compter == 0)
                    Open = true;

                compter--;
            }
            #region commented
            /*
            #region No Matching students & Teachers

            foreach (var student in NoMatchStudents)
            {
                // StudentStep1 tempstudent = (from o in TransportStudentstep1 where o.Email == Transportstud.email select o).FirstOrDefault();

                MatchingStudent InfoStudent = new MatchingStudent();
                count = 0;
              
                if (student.Section == "ESDE 4000.001, Monday/Wednesday @ 3:30-4:50" || section == "EDSE 4000.002, Tuesday/Thursday @ 12:30-1:50"
                                   || section == "TXTX 1300.001, Tuesday/Thursday @ 2:00-3:20")
                    backToback = true;
                else backToback = false;
                // Enforce CI students to have back to back on 2 days (timing frame will be at least two)
                if (section == "ESDE 4000.001, Monday/Wednesday @ 3:30-4:50" || section == "EDSE 4000.002, Tuesday/Thursday @ 12:30-1:50")
                { counter = 2; }
                else { counter = 1; }

                foreach (string day in Days)
                {
                    int selectedcount = 0;
                    String[] times, timesEnd;
                    List<string> selectedTimeStudent = new List<string>();
                    List<StudentTimeCollection> StudentTimeCollection = new List<StudentTimeCollection>();
                    if (day == "Monday")
                    {
                        string previoustime = null, removedTime = null; List<string> TempselectedTimeStudent = new List<string>();
                        selectedTimeStudent = (from o in student.Schedule where o.Monday select o.Time).ToList();
                        selectedTimeStudent = (from o in selectedTimeStudent
                                               where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                               select o).ToList();
                       
                        foreach (var itemTime in selectedTimeStudent)
                        {
                            times = itemTime.Split(separators, StringSplitOptions.None);
                            if (times[0] == selectedTimeStudent.First().Split(separators, StringSplitOptions.None)[0])
                                TempselectedTimeStudent.Add(itemTime);
                            if (!string.IsNullOrEmpty(previoustime) && (DateTime.Parse(times[0]).Subtract(DateTime.Parse(previoustime)).TotalMinutes == 0))
                            {
                                TempselectedTimeStudent.Add(itemTime);
                            }
                            else
                            {
                                StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                TempselectedTimeStudent.Clear();
                                TempselectedTimeStudent.Add(itemTime);
                            }
                            previoustime = times[1];
                            if (times[0] == selectedTimeStudent.Last().Split(separators, StringSplitOptions.None)[0])
                                StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                        }
                        previoustime = string.Empty;
                        foreach (var collectionTime in StudentTimeCollection)
                        {

                            selectedcount = collectionTime.studentTime.Count();
                            if (backToback && counter == 1)
                                if (selectedcount < 3)
                                    selectedcount = 0;
                            #region add group of students
                            if (selectedcount > 1)
                            {

                                times = (from o in collectionTime.studentTime select o).First().Split(separators, StringSplitOptions.None);
                                // startstudentime = DateTime.Parse(times[0]);
                                timesEnd = (from o in collectionTime.studentTime select o).Last().Split(separators, StringSplitOptions.None);
                                // endstudentime = DateTime.Parse(times[1]);
                                if (count == 0)
                                {

                                    InfoStudent.StudentName1 = student.FirstName + " " + student.LastName;
                                 //   InfoStudent.StudentName2 = tempstudent.FirstName + " " + tempstudent.LastName;
                                    InfoStudent.Day = day;
                                    InfoStudent.StartTime = times[0];
                                    InfoStudent.EndTime = timesEnd[1];
                                    InfoStudent.Section = student.Section;
                                    InfoStudent.Transportation1 = student.Transportation;
                                 //   InfoStudent.Transportation2 = tempstudent.Transportation;
                                    InfoStudent.Email1 = student.Email;
                                 //   InfoStudent.Email2 = tempstudent.Email;
                                    InfoStudent.location = district;
                                    InfoStudent.IstwoDaysback = (counter == 2 ? true : false);
                                    InfoStudent.IsbackToback = backToback;
                                    //  NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                    NoGroupingStudents.Add(InfoStudent);
                                    IsGroupNoTranpsportChecked = true;
                                    count++;

                                }
                                else if (count == 1)
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email) ) select o).ToList();
                                    InfoStudent.OtherStartTime1 = times[0];
                                    InfoStudent.OtherEndTime1 = timesEnd[1];
                                    InfoStudent.OtherDay1 = day;
                                    NoGroupingStudents.Add(InfoStudent);
                                    count++;
                                }
                                else if (count == 2)
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                    InfoStudent.OtherStartTime2 = times[0];
                                    InfoStudent.OtherEndTime2 = timesEnd[1];
                                    InfoStudent.OtherDay2 = day;
                                    NoGroupingStudents.Add(InfoStudent);
                                    count++;
                                }
                                else if (count == 3)
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                    InfoStudent.OtherStartTime3 = times[0];
                                    InfoStudent.OtherEndTime3 = timesEnd[1];
                                    InfoStudent.OtherDay3 = day;
                                    NoGroupingStudents.Add(InfoStudent);
                                    count++;
                                }
                                else if (count == 4)
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                    InfoStudent.OtherStartTime4 = times[0];
                                    InfoStudent.OtherEndTime4 = timesEnd[1];
                                    InfoStudent.OtherDay4 = day;
                                    NoGroupingStudents.Add(InfoStudent);
                                    count++;
                                }
                                else if (count == 5)
                                {
                                    IsGroupNoTranpsportChecked = true;
                                    break;
                                }

                            }
                            #endregion;
                        }
                        if (counter == 2)
                        {
                            if (count >= counter)
                            {
                                if ((from o in NoGroupingStudents where ((o.Email1 == student.Email)  && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().Day
                                    == (from o in NoGroupingStudents where ((o.Email1 == student.Email)  && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().OtherDay1)
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email) ) select o).ToList();
                                    selectedcount = 0;
                                    count = 0;
                                }
                                else if (((from o in NoGroupingStudents where ((o.Email1 == student.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().Day
                                   == (from o in NoGroupingStudents where ((o.Email1 == student.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay1) ||
                                    ((from o in NoGroupingStudents where ((o.Email1 == student.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay2
                                   == (from o in NoGroupingStudents where ((o.Email1 == student.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay3))
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email) ) select o).ToList();
                                    selectedcount = 0;
                                    count = 0;
                                }
                            }
                            else
                            {
                                NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                selectedcount = 0;
                                count = 0;
                            }

                        }


                    }
                    else if (day == "Tuesday")
                    {
                        string previoustime = null, removedTime = null; List<string> TempselectedTimeStudent = new List<string>(); int getIndex = 0;
                        selectedTimeStudent = (from o in student.Schedule where o.Tuesday select o.Time).ToList();
                        selectedTimeStudent = (from o in selectedTimeStudent
                                               where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                               select o).ToList();
                        
                        foreach (var itemTime in selectedTimeStudent)
                        {
                            times = itemTime.Split(separators, StringSplitOptions.None);
                            if (times[0] == selectedTimeStudent.First().Split(separators, StringSplitOptions.None)[0])
                                TempselectedTimeStudent.Add(itemTime);
                            if (!string.IsNullOrEmpty(previoustime) && (DateTime.Parse(times[0]).Subtract(DateTime.Parse(previoustime)).TotalMinutes == 0))
                            {
                                TempselectedTimeStudent.Add(itemTime);
                            }
                            else
                            {
                                StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                TempselectedTimeStudent.Clear();
                                TempselectedTimeStudent.Add(itemTime);
                            }
                            previoustime = times[1];
                            if (times[0] == selectedTimeStudent.Last().Split(separators, StringSplitOptions.None)[0])
                                StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                        }
                        previoustime = string.Empty;
                        foreach (var collectionTime in StudentTimeCollection)
                        {

                            selectedcount = collectionTime.studentTime.Count();
                            if (backToback && counter == 1)
                                if (selectedcount < 3)
                                    selectedcount = 0;
                            #region add group of students
                            if (selectedcount > 1)
                            {

                                times = (from o in collectionTime.studentTime select o).First().Split(separators, StringSplitOptions.None);
                                // startstudentime = DateTime.Parse(times[0]);
                                timesEnd = (from o in collectionTime.studentTime select o).Last().Split(separators, StringSplitOptions.None);
                                // endstudentime = DateTime.Parse(times[1]);
                                if (count == 0)
                                {

                                    InfoStudent.StudentName1 = student.FirstName + " " + student.LastName;
                                   // InfoStudent.StudentName2 = tempstudent.FirstName + " " + tempstudent.LastName;
                                    InfoStudent.Day = day;
                                    InfoStudent.StartTime = times[0];
                                    InfoStudent.EndTime = timesEnd[1];
                                    InfoStudent.Section = student.Section;
                                    InfoStudent.Transportation1 = student.Transportation;
                                    //InfoStudent.Transportation2 = tempstudent.Transportation;
                                    InfoStudent.Email1 = student.Email;
                                   // InfoStudent.Email2 = tempstudent.Email;
                                    InfoStudent.location = district;
                                    InfoStudent.IstwoDaysback = (counter == 2 ? true : false);
                                    InfoStudent.IsbackToback = backToback;
                                    //  NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                    NoGroupingStudents.Add(InfoStudent);
                                    IsGroupNoTranpsportChecked = true;
                                    count++;

                                }
                                else if (count == 1)
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                    InfoStudent.OtherStartTime1 = times[0];
                                    InfoStudent.OtherEndTime1 = timesEnd[1];
                                    InfoStudent.OtherDay1 = day;
                                    NoGroupingStudents.Add(InfoStudent);
                                    count++;
                                }
                                else if (count == 2)
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                    InfoStudent.OtherStartTime2 = times[0];
                                    InfoStudent.OtherEndTime2 = timesEnd[1];
                                    InfoStudent.OtherDay2 = day;
                                    NoGroupingStudents.Add(InfoStudent);
                                    count++;
                                }
                                else if (count == 3)
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                    InfoStudent.OtherStartTime3 = times[0];
                                    InfoStudent.OtherEndTime3 = timesEnd[1];
                                    InfoStudent.OtherDay3 = day;
                                    NoGroupingStudents.Add(InfoStudent);
                                    count++;
                                }
                                else if (count == 4)
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                    InfoStudent.OtherStartTime4 = times[0];
                                    InfoStudent.OtherEndTime4 = timesEnd[1];
                                    InfoStudent.OtherDay4 = day;
                                    NoGroupingStudents.Add(InfoStudent);
                                    count++;
                                }
                                else if (count == 5)
                                {
                                    IsGroupNoTranpsportChecked = true;
                                    break;
                                }

                            }
                            #endregion;
                        }
                        if (counter == 2)
                        {
                            if (count >= counter)
                            {
                                if ((from o in NoGroupingStudents where ((o.Email1 == student.Email)  && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().Day
                                    == (from o in NoGroupingStudents where ((o.Email1 == student.Email)  && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().OtherDay1)
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                    selectedcount = 0;
                                    count = 0;
                                }
                                else if (((from o in NoGroupingStudents where ((o.Email1 == student.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().Day
                                   == (from o in NoGroupingStudents where ((o.Email1 == student.Email)  && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay1) ||
                                    ((from o in NoGroupingStudents where ((o.Email1 == student.Email)  && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay2
                                   == (from o in NoGroupingStudents where ((o.Email1 == student.Email)  && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay3))
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                    selectedcount = 0;
                                    count = 0;
                                }
                            }
                            else
                            {
                                NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                selectedcount = 0;
                                count = 0;
                            }

                        }

                    }
                    else if (day == "Wednesday")
                    {
                        string previoustime = null, removedTime = null; List<string> TempselectedTimeStudent = new List<string>();
                        selectedTimeStudent = (from o in student.Schedule where o.Wednesday select o.Time).ToList();
                        selectedTimeStudent = (from o in selectedTimeStudent
                                               where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                               select o).ToList();
                       
                        foreach (var itemTime in selectedTimeStudent)
                        {
                            times = itemTime.Split(separators, StringSplitOptions.None);
                            if (times[0] == selectedTimeStudent.First().Split(separators, StringSplitOptions.None)[0])
                                TempselectedTimeStudent.Add(itemTime);
                            if (!string.IsNullOrEmpty(previoustime) && (DateTime.Parse(times[0]).Subtract(DateTime.Parse(previoustime)).TotalMinutes == 0))
                            {
                                TempselectedTimeStudent.Add(itemTime);
                            }
                            else
                            {
                                StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                TempselectedTimeStudent.Clear();
                                TempselectedTimeStudent.Add(itemTime);
                            }
                            previoustime = times[1];
                            if (times[0] == selectedTimeStudent.Last().Split(separators, StringSplitOptions.None)[0])
                                StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                        }
                        previoustime = string.Empty;
                        foreach (var collectionTime in StudentTimeCollection)
                        {

                            selectedcount = collectionTime.studentTime.Count();
                            if (backToback && counter == 1)
                                if (selectedcount < 3)
                                    selectedcount = 0;
                            #region add group of students
                            if (selectedcount > 1)
                            {

                                times = (from o in collectionTime.studentTime select o).First().Split(separators, StringSplitOptions.None);
                                // startstudentime = DateTime.Parse(times[0]);
                                timesEnd = (from o in collectionTime.studentTime select o).Last().Split(separators, StringSplitOptions.None);
                                // endstudentime = DateTime.Parse(times[1]);
                                if (count == 0)
                                {

                                    InfoStudent.StudentName1 = student.FirstName + " " + student.LastName;
                                 //   InfoStudent.StudentName2 = tempstudent.FirstName + " " + tempstudent.LastName;
                                    InfoStudent.Day = day;
                                    InfoStudent.StartTime = times[0];
                                    InfoStudent.EndTime = timesEnd[1];
                                    InfoStudent.Section = student.Section;
                                    InfoStudent.Transportation1 = student.Transportation;
                                 //   InfoStudent.Transportation2 = tempstudent.Transportation;
                                    InfoStudent.Email1 = student.Email;
                                 //   InfoStudent.Email2 = tempstudent.Email;
                                    InfoStudent.location = district;
                                    InfoStudent.IstwoDaysback = (counter == 2 ? true : false);
                                    InfoStudent.IsbackToback = backToback;
                                    //  NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                    NoGroupingStudents.Add(InfoStudent);
                                    IsGroupNoTranpsportChecked = true;
                                    count++;

                                }
                                else if (count == 1)
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                    InfoStudent.OtherStartTime1 = times[0];
                                    InfoStudent.OtherEndTime1 = timesEnd[1];
                                    InfoStudent.OtherDay1 = day;
                                    NoGroupingStudents.Add(InfoStudent);
                                    count++;
                                }
                                else if (count == 2)
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                    InfoStudent.OtherStartTime2 = times[0];
                                    InfoStudent.OtherEndTime2 = timesEnd[1];
                                    InfoStudent.OtherDay2 = day;
                                    NoGroupingStudents.Add(InfoStudent);
                                    count++;
                                }
                                else if (count == 3)
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                    InfoStudent.OtherStartTime3 = times[0];
                                    InfoStudent.OtherEndTime3 = timesEnd[1];
                                    InfoStudent.OtherDay3 = day;
                                    NoGroupingStudents.Add(InfoStudent);
                                    count++;
                                }
                                else if (count == 4)
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                    InfoStudent.OtherStartTime4 = times[0];
                                    InfoStudent.OtherEndTime4 = timesEnd[1];
                                    InfoStudent.OtherDay4 = day;
                                    NoGroupingStudents.Add(InfoStudent);
                                    count++;
                                }
                                else if (count == 5)
                                {
                                    IsGroupNoTranpsportChecked = true;
                                    break;
                                }

                            }
                            #endregion;
                        }
                        if (counter == 2)
                        {
                            if (count >= counter)
                            {
                                if ((from o in NoGroupingStudents where ((o.Email1 == student.Email) && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().Day
                                    == (from o in NoGroupingStudents where ((o.Email1 == student.Email)  && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().OtherDay1)
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email) ) select o).ToList();
                                    selectedcount = 0;
                                    count = 0;
                                }
                                else if (((from o in NoGroupingStudents where ((o.Email1 == student.Email)  && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().Day
                                   == (from o in NoGroupingStudents where ((o.Email1 == student.Email)  && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay1) ||
                                    ((from o in NoGroupingStudents where ((o.Email1 == student.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay2
                                   == (from o in NoGroupingStudents where ((o.Email1 == student.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay3))
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email) ) select o).ToList();
                                    selectedcount = 0;
                                    count = 0;
                                }
                            }
                            else
                            {
                                NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email) ) select o).ToList();
                                selectedcount = 0;
                                count = 0;
                            }

                        }

                    }
                    else if (day == "Thursday")
                    {
                        string previoustime = null, removedTime = null; List<string> TempselectedTimeStudent = new List<string>();
                        selectedTimeStudent = (from o in student.Schedule where o.Thursday select o.Time).ToList();
                        selectedTimeStudent = (from o in selectedTimeStudent
                                               where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                               select o).ToList();
                       
                        foreach (var itemTime in selectedTimeStudent)
                        {
                            times = itemTime.Split(separators, StringSplitOptions.None);
                            if (times[0] == selectedTimeStudent.First().Split(separators, StringSplitOptions.None)[0])
                                TempselectedTimeStudent.Add(itemTime);
                            if (!string.IsNullOrEmpty(previoustime) && (DateTime.Parse(times[0]).Subtract(DateTime.Parse(previoustime)).TotalMinutes == 0))
                            {
                                TempselectedTimeStudent.Add(itemTime);
                            }
                            else
                            {
                                StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                TempselectedTimeStudent.Clear();
                                TempselectedTimeStudent.Add(itemTime);
                            }
                            previoustime = times[1];
                            if (times[0] == selectedTimeStudent.Last().Split(separators, StringSplitOptions.None)[0])
                                StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                        }
                        previoustime = string.Empty;
                        foreach (var collectionTime in StudentTimeCollection)
                        {

                            selectedcount = collectionTime.studentTime.Count();
                            if (backToback && counter == 1)
                                if (selectedcount < 3)
                                    selectedcount = 0;
                            #region add group of students
                            if (selectedcount > 1)
                            {

                                times = (from o in collectionTime.studentTime select o).First().Split(separators, StringSplitOptions.None);
                                // startstudentime = DateTime.Parse(times[0]);
                                timesEnd = (from o in collectionTime.studentTime select o).Last().Split(separators, StringSplitOptions.None);
                                // endstudentime = DateTime.Parse(times[1]);
                                if (count == 0)
                                {

                                    InfoStudent.StudentName1 = student.FirstName + " " + student.LastName;
                                  //  InfoStudent.StudentName2 = tempstudent.FirstName + " " + tempstudent.LastName;
                                    InfoStudent.Day = day;
                                    InfoStudent.StartTime = times[0];
                                    InfoStudent.EndTime = timesEnd[1];
                                    InfoStudent.Section = student.Section;
                                    InfoStudent.Transportation1 = student.Transportation;
                                 //   InfoStudent.Transportation2 = tempstudent.Transportation;
                                    InfoStudent.Email1 = student.Email;
                                 //   InfoStudent.Email2 = tempstudent.Email;
                                    InfoStudent.location = district;
                                    InfoStudent.IstwoDaysback = (counter == 2 ? true : false);
                                    InfoStudent.IsbackToback = backToback;
                                    //  NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                    NoGroupingStudents.Add(InfoStudent);
                                    IsGroupNoTranpsportChecked = true;
                                    count++;

                                }
                                else if (count == 1)
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email) ) select o).ToList();
                                    InfoStudent.OtherStartTime1 = times[0];
                                    InfoStudent.OtherEndTime1 = timesEnd[1];
                                    InfoStudent.OtherDay1 = day;
                                    NoGroupingStudents.Add(InfoStudent);
                                    count++;
                                }
                                else if (count == 2)
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email) ) select o).ToList();
                                    InfoStudent.OtherStartTime2 = times[0];
                                    InfoStudent.OtherEndTime2 = timesEnd[1];
                                    InfoStudent.OtherDay2 = day;
                                    NoGroupingStudents.Add(InfoStudent);
                                    count++;
                                }
                                else if (count == 3)
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email) ) select o).ToList();
                                    InfoStudent.OtherStartTime3 = times[0];
                                    InfoStudent.OtherEndTime3 = timesEnd[1];
                                    InfoStudent.OtherDay3 = day;
                                    NoGroupingStudents.Add(InfoStudent);
                                    count++;
                                }
                                else if (count == 4)
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                    InfoStudent.OtherStartTime4 = times[0];
                                    InfoStudent.OtherEndTime4 = timesEnd[1];
                                    InfoStudent.OtherDay4 = day;
                                    NoGroupingStudents.Add(InfoStudent);
                                    count++;
                                }
                                else if (count == 5)
                                {
                                    IsGroupNoTranpsportChecked = true;
                                    break;
                                }

                            }
                            #endregion;
                        }
                        if (counter == 2)
                        {
                            if (count >= counter)
                            {
                                if ((from o in NoGroupingStudents where ((o.Email1 == student.Email)  && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().Day
                                    == (from o in NoGroupingStudents where ((o.Email1 == student.Email)  && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().OtherDay1)
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email) ) select o).ToList();
                                    selectedcount = 0;
                                    count = 0;
                                }
                                else if (((from o in NoGroupingStudents where ((o.Email1 == student.Email)  && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().Day
                                   == (from o in NoGroupingStudents where ((o.Email1 == student.Email)  && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay1) ||
                                    ((from o in NoGroupingStudents where ((o.Email1 == student.Email)  && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay2
                                   == (from o in NoGroupingStudents where ((o.Email1 == student.Email)  && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay3))
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                    selectedcount = 0;
                                    count = 0;
                                }
                            }
                            else
                            {
                                NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email) ) select o).ToList();
                                selectedcount = 0;
                                count = 0;
                            }

                        }

                    }
                    else if (day == "Friday")
                    {
                        string previoustime = null, removedTime = null; List<string> TempselectedTimeStudent = new List<string>(); int getIndex = 0;
                        selectedTimeStudent = (from o in student.Schedule where o.Friday select o.Time).ToList();
                        selectedTimeStudent = (from o in selectedTimeStudent
                                               where DateTime.Parse(o.Split(separators, StringSplitOptions.None)[0]) >= RangeMinTime
                                                && DateTime.Parse(o.Split(separators, StringSplitOptions.None)[1]) <= RangeMaxTime
                                               select o).ToList();
                        
                        foreach (var itemTime in selectedTimeStudent)
                        {
                            times = itemTime.Split(separators, StringSplitOptions.None);
                            if (times[0] == selectedTimeStudent.First().Split(separators, StringSplitOptions.None)[0])
                                TempselectedTimeStudent.Add(itemTime);
                            if (!string.IsNullOrEmpty(previoustime) && (DateTime.Parse(times[0]).Subtract(DateTime.Parse(previoustime)).TotalMinutes == 0))
                            {
                                TempselectedTimeStudent.Add(itemTime);
                            }
                            else
                            {
                                StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                                TempselectedTimeStudent.Clear();
                                TempselectedTimeStudent.Add(itemTime);
                            }
                            previoustime = times[1];
                            if (times[0] == selectedTimeStudent.Last().Split(separators, StringSplitOptions.None)[0])
                                StudentTimeCollection.Add(new StudentTimeCollection() { studentTime = TempselectedTimeStudent.ToList() });
                        }

                        previoustime = string.Empty;

                        foreach (var collectionTime in StudentTimeCollection)
                        {

                            selectedcount = collectionTime.studentTime.Count();
                            if (backToback && counter == 1)
                                if (selectedcount < 3)
                                    selectedcount = 0;

                            #region add group of students
                            if (selectedcount > 1)
                            {

                                times = (from o in collectionTime.studentTime select o).First().Split(separators, StringSplitOptions.None);
                                // startstudentime = DateTime.Parse(times[0]);
                                timesEnd = (from o in collectionTime.studentTime select o).Last().Split(separators, StringSplitOptions.None);
                                // endstudentime = DateTime.Parse(times[1]);
                                if (count == 0)
                                {

                                    InfoStudent.StudentName1 = student.FirstName + " " + student.LastName;
                                   // InfoStudent.StudentName2 = tempstudent.FirstName + " " + tempstudent.LastName;
                                    InfoStudent.Day = day;
                                    InfoStudent.StartTime = times[0];
                                    InfoStudent.EndTime = timesEnd[1];
                                    InfoStudent.Section = student.Section;
                                    InfoStudent.Transportation1 = student.Transportation;
                                   // InfoStudent.Transportation2 = tempstudent.Transportation;
                                    InfoStudent.Email1 = student.Email;
                                   // InfoStudent.Email2 = tempstudent.Email;
                                    InfoStudent.location = district;
                                    InfoStudent.IstwoDaysback = (counter == 2 ? true : false);
                                    InfoStudent.IsbackToback = backToback;
                                    //  NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email) && (o.Email2 != tempstudent.Email)) select o).ToList();
                                    NoGroupingStudents.Add(InfoStudent);
                                    IsGroupNoTranpsportChecked = true;
                                    count++;

                                }
                                else if (count == 1)
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                    InfoStudent.OtherStartTime1 = times[0];
                                    InfoStudent.OtherEndTime1 = timesEnd[1];
                                    InfoStudent.OtherDay1 = day;
                                    NoGroupingStudents.Add(InfoStudent);
                                    count++;
                                }
                                else if (count == 2)
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                    InfoStudent.OtherStartTime2 = times[0];
                                    InfoStudent.OtherEndTime2 = timesEnd[1];
                                    InfoStudent.OtherDay2 = day;
                                    NoGroupingStudents.Add(InfoStudent);
                                    count++;
                                }
                                else if (count == 3)
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                    InfoStudent.OtherStartTime3 = times[0];
                                    InfoStudent.OtherEndTime3 = timesEnd[1];
                                    InfoStudent.OtherDay3 = day;
                                    NoGroupingStudents.Add(InfoStudent);
                                    count++;
                                }
                                else if (count == 4)
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                    InfoStudent.OtherStartTime4 = times[0];
                                    InfoStudent.OtherEndTime4 = timesEnd[1];
                                    InfoStudent.OtherDay4 = day;
                                    NoGroupingStudents.Add(InfoStudent);
                                    count++;
                                }
                                else if (count == 5)
                                {
                                    IsGroupNoTranpsportChecked = true;
                                    break;
                                }

                            }
                            #endregion;
                        }
                        //Remove CI students non enforcing back to back two days                                             
                        if (counter == 2)
                        {
                            if (count >= counter)
                            {
                                if ((from o in NoGroupingStudents where ((o.Email1 == student.Email)  && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().Day
                                    == (from o in NoGroupingStudents where ((o.Email1 == student.Email)  && String.IsNullOrEmpty(o.OtherDay2)) select o).FirstOrDefault().OtherDay1)
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                    selectedcount = 0;
                                    count = 0;
                                }
                                else if (((from o in NoGroupingStudents where ((o.Email1 == student.Email)  && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().Day
                                   == (from o in NoGroupingStudents where ((o.Email1 == student.Email) && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay1) ||
                                    ((from o in NoGroupingStudents where ((o.Email1 == student.Email)  && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay2
                                   == (from o in NoGroupingStudents where ((o.Email1 == student.Email)  && !String.IsNullOrEmpty(o.OtherDay2) && !String.IsNullOrEmpty(o.OtherDay3)) select o).FirstOrDefault().OtherDay3))
                                {
                                    NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                    selectedcount = 0;
                                    count = 0;
                                }
                            }
                            else
                            {
                                NoGroupingStudents = (from o in NoGroupingStudents where ((o.Email1 != student.Email)) select o).ToList();
                                selectedcount = 0;
                                count = 0;
                            }

                        }




                    }

                    if (count == 5)
                        break;

                }

            }
            List<TeacherCI> RestOfTeachers = new List<TeacherCI>();
            List<string> selectedTeachersName = (from o in Results select o.TeacherEmail).ToList();
            List<string> teacherName = (from o in Teacherstep22 select o.Email).ToList();
            List<string> restTeacherName = (from o in teacherName where !selectedTeachersName.Contains(o) select o).ToList();
            Open = false;
            RestOfTeachers = (from o in Teacherstep22 where restTeacherName.Contains(o.Email) select o).ToList();
            while (!Open)
            {

                NoConditionResult.Clear();
                TempGroupingStudents = NoGroupingStudents.ToList();
                #region
                /* Random order of Teachers*/
            /*             ShuffleTeachStep2(RestOfTeachers);
                         #endregion;
                     */
            //Assign Teachers
            /*
                foreach (var teacher in RestOfTeachers)
                {
                    if (teacher.Pair == "Yes")
                    {
                        count = 4;
                    }
                    else
                    {
                        count = 2;
                    }

                    string day = string.Empty;
                    bool checkbackToback, checktwoDaysback;
                    foreach (var schedule in teacher.Schedule)
                    {
                        checkbackToback = false; checktwoDaysback = false;
                        counter = 0;
                        // is90 = DateTime.Parse(schedule.EndTime).Subtract(DateTime.Parse(schedule.StartTime));
                        //  if (is90.TotalMinutes >= 90)
                        //register other Day &times for this back to back 
                        string[] backtwoDaystimes = new string[2]; string[] backsameDaytimes = new string[2]; string backtwoDay = string.Empty;
                        Avail backschedule = new Avail();
                        if (teacher.TypeOfSchedule == "1" || teacher.TypeOfSchedule == "2")
                        {
                            if ((from o in teacher.Schedule where (o.Subject == schedule.Subject && o.Days == schedule.Days) select o).Count() > 1)
                            {
                                backschedule = (from o in teacher.Schedule where (o.Days == schedule.Days && o.StartTime != schedule.StartTime && o.Subject == schedule.Subject) select o).First();
                                backsameDaytimes[0] = DateTime.Parse(backschedule.StartTime).ToString("hh:mm tt");
                                backsameDaytimes[1] = DateTime.Parse(backschedule.EndTime).ToString("hh:mm tt");
                                checkbackToback = true;
                            }

                            if ((from o in teacher.Schedule where (o.Subject == schedule.Subject) select o.Days).Distinct().Count() > 1)
                            {
                                backschedule = (from o in teacher.Schedule where (o.Days != schedule.Days && o.Subject == schedule.Subject) select o).First();
                                backtwoDaystimes[0] = DateTime.Parse(backschedule.StartTime).ToString("hh:mm tt");
                                backtwoDaystimes[1] = DateTime.Parse(backschedule.EndTime).ToString("hh:mm tt");
                                backtwoDay = backschedule.Days;
                                checktwoDaysback = true;
                            }
                        }
                        //if(checkbackToback && checktwoDaysback)
                        if (checktwoDaysback)
                        {
                            TempGroupingStudents = TempGroupingStudents.OrderBy(x => x.IstwoDaysback == true).ToList();
                        }
                        else
                            if (checkbackToback)
                            {
                                TempGroupingStudents = TempGroupingStudents.OrderBy(x => x.IsbackToback == true).ToList();
                            }
                        if (teacher.TypeOfSchedule == "3")
                        {
                            if (teacher.IsBackToBack == "1")
                            {
                                if ((from o in teacher.BackDays where o.Subject == schedule.Subject select o.Day).Distinct().Count() > 1)
                                {
                                    checktwoDaysback = true;
                                    TempGroupingStudents = TempGroupingStudents.OrderBy(x => x.IstwoDaysback == true).ToList();
                                }
                                else if ((from o in teacher.BackDays where o.Subject == schedule.Subject select o.Day).Distinct().Count() == 1)
                                {
                                    TempGroupingStudents = TempGroupingStudents.OrderBy(x => x.IsbackToback == true).ToList();
                                    checkbackToback = true;
                                }
                            }
                            else TempGroupingStudents = TempGroupingStudents.OrderBy(x => x.IsbackToback == false).ToList();
                        }
                        bool selectedcount = false;
                        string teachSubject = schedule.Subject;
                        string[] Teachertimes = new string[2]; string[] Studentimes = new string[2];
                        MatchingStudent StudentsInfo = new MatchingStudent();

                        if (schedule.Days == "Monday" || schedule.Days == "A Monday" || schedule.Days == "B Monday")
                            day = "Monday";
                        else if (schedule.Days == "Tuesday" || schedule.Days == "A Tuesday" || schedule.Days == "B Tuesday")
                            day = "Tuesday";
                        else if (schedule.Days == "Wednesday" || schedule.Days == "A Wednesday" || schedule.Days == "B Wednesday")
                            day = "Wednesday";
                        else if (schedule.Days == "Thursday" || schedule.Days == "A Thursday" || schedule.Days == "B Thursday")
                            day = "Thursday";
                        else if (schedule.Days == "Friday" || schedule.Days == "A Friday" || schedule.Days == "B Friday")
                            day = "Friday";


                        Teachertimes[0] = DateTime.Parse(schedule.StartTime).ToString("hh:mm tt");
                        Teachertimes[1] = DateTime.Parse(schedule.EndTime).ToString("hh:mm tt");
                        foreach (var student in TempGroupingStudents)
                        {
                            subject = false; location = false;
                            if ((schedule.Subject == "Math" || schedule.Subject == "Algebra 1" || schedule.Subject == "Pre-AP Math" || schedule.Subject == "Math Others") && (student.Major1 == "Mathematics" || student.Major1 == "4-8 Math CI students Only"))
                                subject = true;
                            else if ((schedule.Subject == "AP Bio" || schedule.Subject == "Biology" || schedule.Subject == "Science" || schedule.Subject == "Pre-AP Science" || schedule.Subject == "Science Others") && (student.Major1 == "Science" || student.Major1 == "4-8 Science CI Students Only"))
                                subject = true;
                            else if ((schedule.Subject == "Chemistry" || schedule.Subject == "AP Chemistry" || schedule.Subject == "Pre-AP Chemistry") && (student.Major1 == "Science" || student.Major1 == "4-8 Science CI Students Only"))
                                subject = true;

                            if (((student.location == 1 || student.location == 2 || student.location == 3 || student.location == 4 || student.location == 5) && teacher.District == "Denton")
                                                           || ((student.location == 1 || student.location == 2 || student.location == 4) && teacher.District == "Lewisville") ||
                                                             ((student.location == 1 || student.location == 3 || student.location == 4 || student.location == 5) && teacher.District == "McKinney")
                                                             || ((student.location == 1 || student.location == 3 || student.location == 4 || student.location == 5) && teacher.District == "Prosper"))
                                location = true;
                            if (!string.IsNullOrEmpty(student.Day) && student.Day.Equals(day) && subject && location)
                            {
                                Studentimes[0] = student.StartTime;
                                Studentimes[1] = student.EndTime;

                                if ((DateTime.Parse(Teachertimes[0]) >= DateTime.Parse(Studentimes[0])) && (DateTime.Parse(Teachertimes[1]) <= DateTime.Parse(Studentimes[1])))
                                {

                                    if (student.IstwoDaysback)
                                    {
                                        counter++;
                                        //do nothing since student only has one time period here 
                                    }
                                    else if (student.IsbackToback)
                                    {
                                        counter++;
                                        //do nothing since student only has one time period here
                                    }
                                    else
                                    {
                                        selectedcount = true;
                                        StudentsInfo = student;
                                        break;
                                    }


                                }
                            }
                            //check if student group has another available day
                            if (!string.IsNullOrEmpty(student.OtherDay1) && student.OtherDay1.Equals(day) && subject && location)
                            {
                                Studentimes[0] = student.OtherStartTime1;
                                Studentimes[1] = student.OtherEndTime1;
                                if ((DateTime.Parse(Teachertimes[0]) >= DateTime.Parse(Studentimes[0])) && (DateTime.Parse(Teachertimes[1]) <= DateTime.Parse(Studentimes[1])))
                                {
                                    if (student.IstwoDaysback)
                                    {
                                        if ((DateTime.Parse(backtwoDaystimes[0]) >= DateTime.Parse(Studentimes[0])) && (DateTime.Parse(backtwoDaystimes[1]) <= DateTime.Parse(Studentimes[1])))
                                        {
                                            if (counter > 0)
                                            {
                                                selectedcount = true;
                                                StudentsInfo = student;
                                                break;
                                            }
                                            else counter++;
                                        }
                                    }
                                    else if (student.IsbackToback)
                                    {
                                        if ((DateTime.Parse(backsameDaytimes[0]) >= DateTime.Parse(Studentimes[0])) && (DateTime.Parse(backsameDaytimes[1]) <= DateTime.Parse(Studentimes[1])))
                                        {
                                            if (counter > 0)
                                            {
                                                selectedcount = true;
                                                StudentsInfo = student; break;
                                            }
                                            else counter++;
                                        }
                                    }
                                    else
                                    {
                                        selectedcount = true;
                                        StudentsInfo = student;
                                        break;
                                    }

                                }
                            }
                            if (!string.IsNullOrEmpty(student.OtherDay2) && student.OtherDay2.Equals(day) && subject && location)
                            {
                                Studentimes[0] = student.OtherStartTime2;
                                Studentimes[1] = student.OtherEndTime2;
                                if ((DateTime.Parse(Teachertimes[0]) >= DateTime.Parse(Studentimes[0])) && (DateTime.Parse(Teachertimes[1]) <= DateTime.Parse(Studentimes[1])))
                                {
                                    if (student.IstwoDaysback)
                                    {
                                        if ((DateTime.Parse(backtwoDaystimes[0]) >= DateTime.Parse(Studentimes[0])) && (DateTime.Parse(backtwoDaystimes[1]) <= DateTime.Parse(Studentimes[1])))
                                        {
                                            if (counter > 0)
                                            {
                                                selectedcount = true;
                                                StudentsInfo = student;
                                                break;
                                            }
                                            else counter++;
                                        }
                                    }
                                    else if (student.IsbackToback)
                                    {
                                        if ((DateTime.Parse(backsameDaytimes[0]) >= DateTime.Parse(Studentimes[0])) && (DateTime.Parse(backsameDaytimes[1]) <= DateTime.Parse(Studentimes[1])))
                                        {
                                            if (counter > 0)
                                            {
                                                selectedcount = true;
                                                StudentsInfo = student; break;
                                            }
                                            else counter++;
                                        }
                                    }
                                    else
                                    {
                                        selectedcount = true;
                                        StudentsInfo = student;
                                        break;
                                    }
                                }
                            }
                            if (!string.IsNullOrEmpty(student.OtherDay3) && student.OtherDay3.Equals(day) && subject && location)
                            {
                                Studentimes[0] = student.OtherStartTime3;
                                Studentimes[1] = student.OtherEndTime3;
                                if ((DateTime.Parse(Teachertimes[0]) >= DateTime.Parse(Studentimes[0])) && (DateTime.Parse(Teachertimes[1]) <= DateTime.Parse(Studentimes[1])))
                                {
                                    if (student.IstwoDaysback)
                                    {
                                        if ((DateTime.Parse(backtwoDaystimes[0]) >= DateTime.Parse(Studentimes[0])) && (DateTime.Parse(backtwoDaystimes[1]) <= DateTime.Parse(Studentimes[1])))
                                        {
                                            if (counter > 0)
                                            {
                                                selectedcount = true;
                                                StudentsInfo = student;
                                                break;
                                            }
                                            else counter++;
                                        }
                                    }
                                    else if (student.IsbackToback)
                                    {
                                        if ((DateTime.Parse(backsameDaytimes[0]) >= DateTime.Parse(Studentimes[0])) && (DateTime.Parse(backsameDaytimes[1]) <= DateTime.Parse(Studentimes[1])))
                                        {
                                            if (counter > 0)
                                            {
                                                selectedcount = true;
                                                StudentsInfo = student; break;
                                            }
                                            else counter++;
                                        }
                                    }
                                    else
                                    {
                                        selectedcount = true;
                                        StudentsInfo = student;
                                        break;
                                    }
                                }
                            }
                            if (!string.IsNullOrEmpty(student.OtherDay4) && student.OtherDay4.Equals(day) && subject && location)
                            {
                                Studentimes[0] = student.OtherStartTime4;
                                Studentimes[1] = student.OtherEndTime4;
                                if ((DateTime.Parse(Teachertimes[0]) >= DateTime.Parse(Studentimes[0])) && (DateTime.Parse(Teachertimes[1]) <= DateTime.Parse(Studentimes[1])))
                                {
                                    if (student.IstwoDaysback)
                                    {
                                        if ((DateTime.Parse(backtwoDaystimes[0]) >= DateTime.Parse(Studentimes[0])) && (DateTime.Parse(backtwoDaystimes[1]) <= DateTime.Parse(Studentimes[1])))
                                        {
                                            if (counter > 0)
                                            {
                                                selectedcount = true;
                                                StudentsInfo = student;
                                                break;
                                            }
                                            else counter++;
                                        }
                                    }
                                    else if (student.IsbackToback)
                                    {
                                        if ((DateTime.Parse(backsameDaytimes[0]) >= DateTime.Parse(Studentimes[0])) && (DateTime.Parse(backsameDaytimes[1]) <= DateTime.Parse(Studentimes[1])))
                                        {
                                            if (counter > 0)
                                            {
                                                selectedcount = true;
                                                StudentsInfo = student; break;
                                            }
                                            else counter++;
                                        }
                                    }
                                    else
                                    {
                                        selectedcount = true;
                                        StudentsInfo = student;
                                        break;
                                    }
                                }
                            }
                        }

                        if (selectedcount && count > 0)
                        {
                            NoConditionResult1.Add(new TableResult()
                            {
                                TeacherName = teacher.FirstName + " " + teacher.LastName,
                                StudentName = StudentsInfo.StudentName1,
                                Major = teachSubject,
                                Hour = (StudentsInfo.IsbackToback && checkbackToback) ? ((StudentsInfo.IstwoDaysback && checktwoDaysback) ? Teachertimes[0] + "-" + Teachertimes[1] + " // " + backtwoDaystimes[0] + "-" + backtwoDaystimes[1]
                                : Teachertimes[0] + "-" + Teachertimes[1] + " // " + backsameDaytimes[0] + "-" + backsameDaytimes[1]) : Teachertimes[0] + "-" + Teachertimes[1],
                                Days = (StudentsInfo.IsbackToback && checkbackToback) ? ((StudentsInfo.IstwoDaysback && checktwoDaysback) ? schedule.Days + " // " + backtwoDay : schedule.Days) : schedule.Days,
                                School = teacher.School,
                                Room = teacher.Room,
                                Transportation = StudentsInfo.Transportation1,
                                Pair = teacher.Pair,
                                Location = true,
                                section = StudentsInfo.Section,
                                TeacherEmail = teacher.Email

                            });

                            TempGroupingStudents.Remove(StudentsInfo);
                            count--;
                        }
                        if (count == 0)
                            break;
                    }


                }
                if (NoConditionResult1.Count > NoConditionResult2.Count())
                {
                    NoConditionResult2 = NoConditionResult1.ToList();
                }
                if (NoConditionResult2.Count() == 2 * NoGroupingStudents.Count() || counter == 0)
                {
                    Open = true;
                    NoConditionResult = NoConditionResult2.ToList();
                }
                counter--;
            
            }
            
            #endregion;*/
            #endregion;
        }

        #region not used 
        /*    private void getMatchListStep11()
        {
            NoConditionResult.Clear();
            bool location;
            int count = 0, numberOfCount = 0;
            //  checkerid = 1;
            int teachCount;
            int timing = 0;
            string timecheck;
            string sectioncheck;
            Open = false;
            bool timer = false;
            foreach (var item in Studentstep1)
            {
                 foreach (var j in val.Schedule)
                            {
                                String[] times = j.Time.Split(separators, StringSplitOptions.None);
                            if(j.Monday)
   
                     startstudentime = DateTime.Parse(times[0]);
                                endstudentime = DateTime.Parse(times[1]);
                                differstart = startteachertime.Subtract(startstudentime);
                                differend = endteachertime.Subtract(endstudentime);
                                if ((i.Days == "Monday" || i.Days == "A Monday" || i.Days == "B Monday") &&
                                    j.Monday == true)
                                {

                                    if (differstart.Minutes >= timing)
                                        matchstart = true;
                                    if (differend.Minutes <= -timing)
                                        matchend = true;
                                    if (matchstart && matchend)
                                        Monday = true;
                                }
                                if ((i.Days == "Tuesday" || i.Days == "A Tuesday" || i.Days == "B Tuesday") &&
                                    j.Tuesday == true)
                                {
                                    if (differstart.Minutes >= timing)
                                        matchstart = true;
                                    if (differend.Minutes <= -timing)
                                        matchend = true;
                                    if (matchstart && matchend)
                                        Tuesday = true;
                                }
                                if ((i.Days == "Wednesday" || i.Days == "A Wednesday" || i.Days == "B Wednesday") &&
                                    j.Wednesday == true)
                                {
                                    if (differstart.Minutes >= timing)
                                        matchstart = true;
                                    if (differend.Minutes <= -timing)
                                        matchend = true;
                                    if (matchstart && matchend)
                                        Wednesday = true;
                                }
                                if ((i.Days == "Thursday" || i.Days == "A Thursday" || i.Days == "B Thursday") &&
                                    j.Thursday == true)
                                {
                                    if (differstart.Minutes >= timing)
                                        matchstart = true;
                                    if (differend.Minutes <= -timing)
                                        matchend = true;
                                    if (matchstart && matchend)
                                        Thursday = true;
                                }
                                if ((i.Days == "Friday" || i.Days == "A Friday" || i.Days == "B Friday") &&
                                    j.Friday == true)
                                {
                                    if (differstart.Minutes >= timing)
                                        matchstart = true;
                                    if (differend.Minutes <= -timing)
                                        matchend = true;
                                    if (matchstart && matchend)
                                        Friday = true;
                                } 
            }
            while (!Open)
            {
                
            }
        }
     * */
#endregion;
        private  void ShuffleStep1(List<StudentStep1> mylist)
        {
         int   inGlobalCount = mylist.Count;
            StudentStep1 SwapStudent;
            while (inGlobalCount > 1)
            {
                inGlobalCount--;
            int    studentcount = rng.Next(inGlobalCount + 1);
                SwapStudent = mylist[studentcount];
                mylist[studentcount] = mylist[inGlobalCount];
                mylist[inGlobalCount] = SwapStudent;
            }
        }

        private void ShuffleSchedule1(List<Avail> mylist)
        {
            int inGlobalCount = mylist.Count;
           Avail SwapSchedule;
            while (inGlobalCount > 1)
            {
                inGlobalCount--;
                int schedulecount = rngsched.Next(inGlobalCount + 1);
                SwapSchedule = mylist[schedulecount];
                mylist[schedulecount] = mylist[inGlobalCount];
                mylist[inGlobalCount] = SwapSchedule;
            }
        }
        private void ShuffleTeachStep1(List<TeacherStep1> mylist)
        {
            int inGlobalCount = mylist.Count;
            TeacherStep1 SwapTeacher;
            while (inGlobalCount > 1)
            {
                inGlobalCount--;
                int studentcount = rngteach.Next(inGlobalCount + 1);
                SwapTeacher = mylist[studentcount];
                mylist[studentcount] = mylist[inGlobalCount];
                mylist[inGlobalCount] = SwapTeacher;
            }
        }
        private void ShuffleStep2(List<StudentStep2> mylist)
        {
          int  inGlobalCount = mylist.Count;
            StudentStep2 SwapStudent;
            while (inGlobalCount > 1)
            {
                inGlobalCount--;
             int   studentcount = rng.Next(inGlobalCount + 1);
                SwapStudent = mylist[studentcount];
                mylist[studentcount] = mylist[inGlobalCount];
                mylist[inGlobalCount] = SwapStudent;
            }
        }
        private void ShuffleGroupStudents(List<MatchingStudent> mylist)
        {
            int inGlobalCount = mylist.Count;
            MatchingStudent SwapStudent;
            while (inGlobalCount > 1)
            {
                inGlobalCount--;
                int studentcount = rng.Next(inGlobalCount + 1);
                SwapStudent = mylist[studentcount];
                mylist[studentcount] = mylist[inGlobalCount];
                mylist[inGlobalCount] = SwapStudent;
            }
        }
          private void ShuffleSchedule2(List<Avail> mylist)
        {
          int  inGlobalCount = mylist.Count;
            Avail ScheduleStudent;
            while (inGlobalCount > 1)
            {
                inGlobalCount--;
             int   schedulecount = rngsched.Next(inGlobalCount + 1);
                ScheduleStudent = mylist[schedulecount];
                mylist[schedulecount] = mylist[inGlobalCount];
                mylist[inGlobalCount] = ScheduleStudent;
            }
        }

        private void ShuffleTeachStep2(List<TeacherStep2>mylist)
        {
         int   inGlobalCount = mylist.Count;
            TeacherStep2 SwapTeacher;
            while (inGlobalCount > 1)
            {
                inGlobalCount--;
          int      studentcount = rngteach.Next(inGlobalCount + 1);
                SwapTeacher = mylist[studentcount];
                mylist[studentcount] = mylist[inGlobalCount];
                mylist[inGlobalCount] = SwapTeacher;
            }
        }
        private void ShuffleTeachCI(List<TeacherCI> mylist)
        {
            int inGlobalCount = mylist.Count;
            TeacherCI SwapTeacher;
            while (inGlobalCount > 1)
            {
                inGlobalCount--;
                int studentcount = rngteach.Next(inGlobalCount + 1);
                SwapTeacher = mylist[studentcount];
                mylist[studentcount] = mylist[inGlobalCount];
                mylist[inGlobalCount] = SwapTeacher;
            }
        }

        private void ShuffleCI(List<StudentCI> mylist)
        {
       int     inGlobalCount = mylist.Count;
            StudentCI SwapStudent;
            while (inGlobalCount > 1)
            {
                inGlobalCount--;
         int       studentcount = rng.Next(inGlobalCount + 1);
                SwapStudent = mylist[studentcount];
                mylist[studentcount] = mylist[inGlobalCount];
                mylist[inGlobalCount] = SwapStudent;
            }
        }
      
        class TeacherMatch
        {
            public string TeacherName{get;set;}
            public string TotalAllowed{get;set;}
        }
        class BackStudent
        {
            public string Name { get; set; }
            public string Time { get; set; }
            public string Day { get; set; }
        }

        class AvailableTime
        {
            public string Day { get; set; }
            public string Time { get; set; }
        }

        class MatchingStudent
        {
            public string StudentName1 { get; set; }
            public string StudentName2 { get; set; }
            public string StartTime { get; set; }
             public string EndTime { get; set; }
            public string Day { get; set; }
            public string OtherStartTime1 { get; set; }
            public string OtherEndTime1 { get; set; }
            public string OtherDay1 { get; set; }
            public string OtherStartTime2 { get; set; }
            public string OtherEndTime2 { get; set; }
            public string OtherDay2 { get; set; }
            public string OtherStartTime3 { get; set; }
            public string OtherEndTime3 { get; set; }
            public string OtherDay3 { get; set; }
            public string OtherStartTime4 { get; set; }
            public string OtherEndTime4 { get; set; }
            public string OtherDay4 { get; set; }
            public string Section { get; set; }
            public string Transportation1 { get; set;}
            public string Transportation2 { get; set; }
            public string Email1 { get; set; }
            public string Email2 { get; set; }
            public int location { get; set; }
            public string Major1 { get; set; }
            public string Major2 { get; set; }
           public  bool IsbackToback { get; set; }
           public bool IstwoDaysback { get; set; }
        }
        class studentPriorityQueue
        {
            public int priority { get; set; }
            public string FirstName { get; set; }
            public string LastName { get; set; }
            public string email { get; set; }
           // public string Day { get; set; }

        }
        class Comparer : IEqualityComparer<Availability>
        {
            public bool Equals(Availability sched1, Availability sched2)
            {
                if ((sched1.Monday == sched2.Monday && sched1.Monday) || (sched1.Tuesday == sched2.Tuesday && sched1.Tuesday) || (sched1.Wednesday == sched2.Wednesday && sched1.Wednesday) ||
                    (sched1.Thursday == sched2.Thursday && sched1.Thursday) || (sched1.Friday == sched2.Friday && sched1.Friday))
                    return true;
                else return false;

            }
            public int GetHashCode(Availability sched){
                return sched.GetHashCode();
            }
        }
        class StudentTimeCollection
        {
          public   List<string> studentTime { get; set; }
        }
        class BackDay
        {
            public string Day { get; set; }
            public string StartTime { get; set; }
            public string EndTime { get; set; }
        }
        class RangeTimeForStudents
        {
            public string Major1 { get; set; }
            public string Major { get; set; }
        } 
    }
}
